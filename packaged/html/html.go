// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// login.html
// home.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xfd\x6e\xd4\x46\x10\xff\x1f\x89\x77\x18\x4c\x84\xef\xc4\x9d\x9d\x84\xb4\x54\xe1\xee\x50\x94\xa0\x2a\x52\x55\x10\x89\x84\x50\x3f\xa2\x8d\x3d\x3e\x2f\xb1\x77\xcd\xee\xfa\xc2\x89\x22\xf1\x20\xad\xc4\xb3\xf0\x28\x3c\x49\x67\x77\xed\x9c\x9d\x4b\xda\xa3\xa8\xd2\x9d\xbc\x1f\xf3\xf9\x9b\x0f\x8f\x27\xf7\x8e\x9e\x1f\x9e\xbe\x7e\xf1\x0c\x72\x53\x16\xb3\xbb\x77\x26\xf6\x09\x05\x13\xf3\x69\x80\x22\x70\x27\xc8\x52\x7a\x02\x4c\x4a\x34\x8c\x08\x4d\x35\xc6\xb7\x35\x5f\x4c\x83\x43\x29\x0c\x0a\x33\x3e\x5d\x56\x18\x40\xe2\x77\xd3\xc0\xe0\x3b\x13\x5b\x41\x4f\x20\xc9\x99\xd2\x68\xa6\xb5\xc9\xc6\x3f\x04\x10\x7b\x41\x86\x9b\x02\x67\xc7\x26\xd4\xf0\x5a\xd6\xf0\x5c\x14\x5c\xe0\x24\xf6\xc7\x8e\x82\x0e\x2e\x40\x61\x31\x0d\xb4\x59\x16\xa8\x73\x44\x13\x40\xae\x30\x9b\x06\x4c\x93\x44\x1d\x27\x5a\xc7\xee\x32\xa2\x55\x10\x7f\x15\x5f\x46\xa6\x8e\xd9\x25\x6a\x59\x62\x54\x72\xb1\x26\xc2\x71\x84\xd6\xd7\xfd\xd8\x51\xeb\x68\x2e\xe5\xbc\x40\x56\x71\x1d\x25\xb2\xb4\x62\x9e\x66\xac\xe4\xc5\x72\xfa\x0a\x8b\x22\x2b\x48\xd3\x1f\x07\x6a\x21\xf7\xf7\xb6\xb7\x47\x8f\xe9\x4f\x4f\x6e\x58\xc1\x13\xbb\xf3\xab\xd0\xd9\x16\xae\x6c\x0b\xc1\x10\x76\xd3\xd0\x41\x46\x22\x43\x8b\x78\xdc\x40\x3e\x39\x97\xe9\xb2\x0d\x01\x2a\xe0\xe9\x34\xf0\xcb\xc0\x9b\x9a\xf2\x05\x24\x05\xf9\x35\x0d\x1a\xf0\xfd\x45\x73\x65\xe9\x0b\x39\x97\xc1\x6c\xc2\x1a\x0c\xee\x07\x33\x38\x36\x9a\x50\x8f\x3c\xea\x30\x89\xd9\x6c\x12\x13\x79\x97\xb3\x11\xaa\xf9\x5c\x8c\x2f\x15\xab\x5a\xb1\x74\xdd\x4a\x52\x38\xe7\xda\x58\x53\x26\xbc\xa5\xcf\x18\x64\x6c\x5c\x6b\x54\xe3\xaa\xa8\x35\x5d\xc5\x7c\xf6\xb2\x21\xb4\x8a\xd6\xa4\x90\x79\x5c\xac\x8b\x70\x8a\xdd\x05\x09\x38\xa1\x0d\x70\xb1\xe2\x5f\x99\xdb\xae\x3c\x64\xa8\x68\x49\x9b\x7b\xe3\x31\x9c\xfc\x74\x7c\xf4\xec\x04\x4e\x4e\x0f\x5e\x9e\xc2\x78\x6c\x69\x5a\x48\x74\xc1\x53\xdc\xf9\x77\x08\xf3\xdd\x19\xe1\xa4\x40\x7a\xa0\x88\x49\x50\x86\x2e\x49\xd7\x6e\x87\x84\x0b\x58\x3a\xaa\x4b\x01\x39\x13\xa9\xbe\xba\x5f\x19\xd7\x3c\x7b\x06\xec\xde\x6e\x00\xdc\x10\x8a\xb7\xb5\x34\xa8\xcf\x2c\x09\x23\x6b\x54\x27\x22\xf9\xa3\x3e\x51\x30\x6b\x42\x5b\x29\xd4\x28\x12\x84\x12\x99\xd0\x04\x21\x45\x81\x25\x86\x4b\x11\xc1\xa1\x2c\x2b\x26\x38\x6a\x10\x88\xa9\x77\xa1\xf5\x10\x2e\x73\x9e\xe4\xf6\xac\x11\x61\x88\x17\x52\x9e\x65\xa8\xec\xe6\x92\x2d\xf5\x08\x52\xac\x50\xa4\x5c\xcc\x09\x20\x30\x39\x52\xfd\x5b\x91\xcb\x11\x54\xa8\x34\x9d\x49\xe5\x5b\xc2\x3b\x13\x11\x26\x8f\xfe\x21\x78\x37\xe1\xf3\xdd\xa6\x01\xb2\x7a\xcb\x5a\xf0\x84\x19\x04\xb9\xa0\x3a\x59\x30\xc5\x65\xad\x6d\xf3\x11\x02\x0b\x0d\x14\x96\xf5\xa8\xad\xfc\x69\xac\xd4\x70\x5e\x93\xa7\xb6\x2b\xb1\xc2\xfa\x68\x11\xd8\x30\x9a\xdf\xff\x8f\xd1\xfc\xf2\xf1\xcf\xd3\x1c\x3d\xc6\x3f\x2a\x2e\x28\x34\x26\x97\xf5\x3c\x37\x20\x33\xb0\x2d\xcc\xe4\x36\x0c\x74\x9d\xb3\x54\x84\x06\xce\x31\x93\x0a\xef\xc1\xab\x9c\x91\x43\x19\x1c\xe6\x8a\x4a\xb0\x64\x14\x35\x22\x6a\x98\x29\x82\x12\xb5\x25\x27\x00\x11\x32\x25\x4b\x60\xa0\x0d\x71\x46\xeb\x9c\x51\x14\x51\x58\x73\x56\xd9\x95\xcf\x27\x06\x05\x37\xd4\xb1\xe1\x9c\x1b\x28\xad\xc2\x2f\x1f\xff\xea\x44\x9a\x9c\xe1\xe5\x1c\xb4\x4a\xae\x7a\x2f\xed\xe3\x54\x8d\x35\xd6\x5a\x47\x95\x98\x07\x84\x34\x55\x37\xf5\x01\xcc\x4c\xd3\x80\x3d\x0a\x7b\x2d\x0a\xac\x26\x7b\xd5\x99\x60\x25\x9e\xcd\x15\x5b\x06\xb3\x23\x15\xc1\x89\x95\x40\x31\xc9\xf7\x56\x3c\xe7\x2a\xbe\x65\xb3\x8e\xe9\x81\xe8\x66\x3b\x81\xbb\x4a\x22\x0b\x25\xa7\xb2\x90\x06\xd8\xb9\xa4\x8c\x70\xb9\xed\x53\xc9\xe6\xb4\xdd\x56\x4a\x2e\x88\x5f\x8d\x9a\x74\x71\x74\x97\xb9\x74\x35\xc3\x14\x61\xcc\x8a\x0b\x2b\xc8\x48\x5b\x3a\xbe\x9e\xbe\xa1\x18\x1e\x6d\x54\x0c\x27\xb9\x55\x5d\x57\x56\x6b\x6a\xab\x81\x0b\xca\x83\x92\xd9\x8a\xbf\x96\xff\x36\xd3\xa9\xaf\x2d\x81\x69\x28\x6b\x32\x8e\xb9\x6c\xa7\xd2\x16\x66\xc3\x94\xdf\xdb\xec\x25\xf4\x5f\x32\xfe\x48\xfa\x2c\x06\x96\x29\xc6\x53\xeb\x8f\xce\xe5\xa5\xef\x52\x19\xa3\x8e\x46\x7d\xa6\x74\x89\xea\x7d\xb6\x31\xe9\x38\xeb\x5d\xe1\x3a\xf7\x9c\x8e\x42\xda\xe4\x46\xb5\xe0\xc9\x2a\x7c\xb6\x31\x58\x35\xba\x26\x0a\xdf\xc5\x49\x92\xea\x89\xa2\x54\xd0\x2c\xc3\xcd\xa2\xd6\x79\xf1\x3a\x8c\x1e\xdf\x04\xc5\x35\x94\x36\xc5\xa9\x4f\x47\x01\x34\x52\x8c\x13\xb4\x4d\x1d\x6c\x5e\x35\xeb\x2e\x43\x9f\x25\x95\x49\xff\xd2\xbd\x87\x0d\x53\x73\x1a\xd0\x82\xb3\x73\x9a\xfa\x2e\x82\xd5\x9c\xd0\xa7\x04\x38\x92\x49\x5d\x92\x0a\x07\xcb\x35\x31\x9d\x57\x7b\x1f\xa0\x5b\xec\xa0\xd6\x93\xec\x7e\x8b\x31\x07\x2f\x8e\xbf\xc6\xa0\x75\x93\xfa\xfb\xde\x00\x74\x7b\x4d\x76\x06\x8b\x67\x3f\x1f\x35\x63\x85\x4e\x14\xaf\x8c\x6f\x73\xcd\xc0\x98\xc8\x14\xa3\x37\x6f\x6b\x54\x4b\x37\x2b\xfa\xe5\x78\x27\xda\xd9\x8d\xb6\xdd\xbc\xf9\xc6\x0d\x47\x9e\x75\x25\x84\x56\x5b\x83\xb4\x71\x6b\x18\x29\x9a\x69\x96\x83\xac\x16\xee\x9d\x3d\x18\xc2\xfb\xbb\x77\x3e\x7f\x82\xad\x41\x78\x5f\xb0\x05\xb0\x70\x18\x21\x4b\xf2\x75\x0a\xfa\x51\xef\x1e\x14\x32\x71\xd8\x44\x15\x33\xb9\x6d\xa0\x24\xb1\x2a\xa8\x7c\x06\xf1\xef\xbf\xc6\xf1\x28\x0c\x87\x30\x9d\x52\xf1\xd0\x48\x7b\x3b\x49\x2b\xf1\xc1\x03\xb8\x12\x98\x4b\x6d\x2c\xf5\x15\x7b\x7b\xd0\x21\xf6\xe7\x4c\xe7\x2b\x91\xf7\xbd\xce\x8e\x99\xf4\xa3\xb7\x35\x6c\xf9\xc0\x1f\xa7\x30\x25\xf7\xae\x38\x87\xa3\xf6\xe6\x80\xde\x7a\xd4\x7b\xed\x6d\xf8\x8b\x55\x34\x0d\xe1\x61\x47\x05\x55\x1b\x29\xd8\x19\xc2\xc3\xf0\xb7\x70\xf8\xe4\x66\xf1\x96\xbd\x55\x14\x15\x28\xe6\x26\x87\xa7\x1d\xdd\xfb\x7d\x6d\x6b\x24\x8d\x11\xfb\xd4\x82\x0a\x8d\x5d\x25\x9f\x3f\x59\xbc\x1b\xb2\xbe\x7b\xee\x67\x8d\xf0\x97\xcf\xb3\x4c\x77\x2d\x89\xa4\x3b\x18\x0c\x23\x23\xab\x27\x76\x7c\xbd\xce\xeb\xf1\x18\x46\x09\xb9\x78\x71\x2d\xd6\xdd\x0c\xdf\x1a\x04\x2e\x2d\x0a\x0e\x2c\xb0\xc9\x53\xd2\x30\x74\x68\x4b\x6e\x10\xd8\xa9\x6f\x81\x81\x05\xa6\xcf\xe2\x45\xb3\x34\xf5\x84\xa1\x27\xec\x23\xb8\x32\x24\xb4\x1f\x75\x23\xb0\x9f\x25\x94\x7b\x34\x3e\x52\x8f\xc4\xc1\x7b\x4a\x5e\x59\x14\xa7\xb2\xda\xef\x39\xf9\x61\x04\x3b\xdb\xdb\xdb\x37\xca\x52\x68\x6a\x25\x6e\x02\x92\x7e\x1f\x7a\x2c\x1f\xda\xb5\x5f\xb8\xcb\xbb\x77\xdc\xa3\x5b\x41\x71\xfb\xb1\x14\x37\x9f\xb2\x7f\x07\x00\x00\xff\xff\x61\xd3\xad\x60\xdc\x0e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3804, mode: os.FileMode(493), modTime: time.Unix(1456406064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\xe9\x6e\xdb\xb8\x16\xfe\x7d\x0b\xf4\x1d\x78\x79\x2f\x46\x0d\x10\x4b\x8e\xb3\xb9\xa9\xe5\x22\xe8\x02\xf4\x47\xd1\x00\x93\x62\x50\xcc\x14\x05\x2d\x1d\x49\x4c\x28\x51\x25\x29\x27\x9e\x4e\xdf\x7d\x0e\x29\xc9\xf1\x22\x3b\xf1\xb4\x19\x03\x41\xb8\x9c\xed\x3b\x1b\x49\x8d\xfe\xfb\xfa\xc3\xab\xcb\x4f\x17\x6f\x48\x66\x72\x31\x7e\xfa\x64\x64\xff\x13\xc1\x8a\x34\xa4\x50\x50\x5c\x21\x64\x94\x01\x8b\x71\xf4\x1f\x82\xe3\x1c\x0c\x43\x62\x53\xf6\xe0\x6b\xc5\xa7\x21\x7d\x25\x0b\x03\x85\xe9\x5d\xce\x4a\xa0\x24\xaa\x67\x21\x35\x70\x6b\x02\x2b\xec\x05\x89\x32\xa6\x34\x98\xb0\x32\x49\x6f\x48\x49\xe0\x84\xba\xdf\xc8\x70\x23\x60\xfc\xce\x78\x9a\x7c\x92\x15\xf9\x50\x08\x5e\xc0\x28\xa8\x97\x9f\x3e\xb9\x23\xc4\xf5\x6b\xa2\x40\x84\x9e\x36\x33\x01\x3a\x03\x30\xa4\x54\x90\x80\x89\x32\x8f\x64\x38\x0a\x3d\x6b\x96\x3e\x0b\x02\x76\xc5\x6e\xfd\x54\xca\x54\x00\x2b\xb9\xf6\x23\x99\xbb\xb5\x40\xf0\x89\x0e\x10\x5b\x25\x98\xfa\x92\x33\x03\x8a\x33\x11\x1c\xf8\x7d\xbf\xdf\x2e\xf7\xda\x65\x3f\xe7\x85\x1f\x69\xed\x8d\x3b\xac\xa0\x77\x56\xd0\x5a\x39\x65\x1a\x31\xea\x00\x39\x02\xb7\x69\x79\x69\xb0\x3b\x73\x82\x1e\xec\xb1\x1b\xd0\x32\x87\xd6\x86\x75\x39\x77\x80\x11\xaf\x65\xd1\xab\x80\x91\xed\x65\xc2\x72\x2e\x66\xe1\x6f\x20\x44\x22\x50\xdd\x5f\xe7\x6a\x2a\xcf\x8e\xfa\xfd\xfd\x53\xfc\xc3\xff\xdc\x30\xc1\x23\x3b\xab\x47\xde\xaa\x8f\x3d\x62\x30\xae\xa1\xe7\xc2\xb9\xec\x0d\x32\x72\x64\x8b\x61\x72\xbf\xdf\x8b\xf4\x8f\xb3\x48\x48\x76\xfd\x79\xdf\x4e\x7a\xed\xd8\x6f\xc7\xe4\xdb\x32\x87\xfd\xc5\x5c\x97\x82\xcd\xce\x48\x21\x0b\x78\xb1\xbc\xff\x7d\x41\x67\xd0\x2a\xc5\x61\x93\x97\x98\xb5\x13\x19\xcf\x08\x8a\x67\x65\x19\x52\x05\x29\xd7\x46\x31\xc3\x65\x71\x5e\x96\xb4\x26\xb1\xc4\xa0\x08\x8f\x43\x5a\x0f\x9b\xe4\x8e\xf9\x94\x44\x02\x03\x10\xd2\x26\x79\x69\x83\xd1\x6d\x59\x7a\x21\x53\x49\xc7\x23\xd6\x04\x2b\xc3\xc8\xd0\x31\x79\x67\x34\xe6\xac\x5f\xe7\x2c\x5a\xc3\xc6\xa3\x00\x39\x16\x99\x1b\xb9\x9a\xa7\x45\xef\x46\xb1\x92\xce\xbd\x37\x17\x86\xb2\x39\xd6\xd9\x88\xb7\xc4\x09\x23\x09\xeb\x39\x16\xb7\x11\xf0\xf1\xaf\x38\x21\xbc\xb0\x2a\x1a\xe1\x73\x45\xed\xa8\x76\x06\x28\x87\x15\xa7\x0b\xda\x93\x4a\x08\x1d\x29\x80\x22\x91\x2a\x9f\x83\xb3\x13\x32\x8f\x08\x96\x75\x26\x11\x6a\x29\x35\x26\x25\x8b\xac\xef\x5a\x4f\xa2\xab\xb0\x23\xcc\x64\x65\xac\x8b\x44\x95\x17\x94\x14\x2c\x87\x1a\x58\x55\x3a\xb1\x64\x11\x37\x8a\xe5\x05\x37\x98\x48\x73\x02\x5f\x83\x9a\x82\xd2\x3c\x86\x29\x66\x5a\xec\xa2\x03\x4a\x49\xa5\x49\x48\xbe\x51\x5e\xb8\x65\x9b\xf5\x26\xe3\x45\x4a\xcf\x88\x51\x15\x7c\xf7\xd6\xbd\x8a\xa9\x7c\x3b\x37\x48\xc9\x1b\x4a\x9a\x59\xef\x56\xcf\x2d\x5c\xcc\xd3\x96\x29\xa4\xc7\xfd\x35\x28\xe3\xe5\x5c\x1b\xe5\x31\xda\x5e\xa2\x30\x9b\x0d\x0c\x43\xab\xc6\xeb\xd9\x3a\x12\x6c\x02\x62\xfc\x11\x41\x59\x4f\x8c\x82\x7a\xde\x41\xe8\x64\x59\x87\xe4\x32\xb6\xb5\x5f\xc7\x9b\xa0\x96\x9c\xdd\x0a\x28\x52\x93\x85\xf4\x10\xcd\xc2\x52\x6f\xa7\x03\x8a\x65\x88\xdd\x55\x41\xdc\x38\xba\xe1\x72\xb5\xe8\x5a\x2b\xc6\xa8\x32\x32\x91\x51\xa5\xbb\xb4\x36\x41\xc8\x41\x6b\x96\x82\x5e\x8c\xd4\x96\x40\x38\xb3\xac\xdc\x5e\x86\xbb\x36\x15\x85\x86\x55\x07\x75\x6a\x08\x69\x5c\x95\xd8\x3f\xb0\x77\x56\x8d\x4f\xe8\xf8\x32\xe3\x9a\xb4\x53\x82\x63\x26\x14\x26\xe9\x8c\x18\x76\x0d\xc5\x62\x58\x97\x24\x77\xac\x8f\x82\xce\xa8\xfc\x40\xe4\xde\xe4\x8c\x8b\x1d\xc2\x06\x96\x7e\x2d\x2c\xcd\x6a\x1d\x96\x7a\xf2\xe8\x96\x5f\x60\x51\xdf\x48\x15\xef\x60\x7c\xd9\xb0\xac\xd9\x7f\xb7\x51\x43\x98\xcf\xff\x35\x14\xf6\xc2\x90\x70\x95\xbb\x2c\xfc\x07\x90\xee\x52\x78\x23\xb8\x45\x92\x1f\x84\xb9\x9a\x9b\xeb\xed\x68\x43\x53\xe9\x6c\x5b\x5d\x38\x75\xc9\x0a\x47\x89\x6d\xcf\x8e\x37\x15\xf7\x6a\x3f\xae\xdb\xdb\x49\xbf\xbb\x5a\x1f\x1a\x9c\x95\x20\x0d\x7a\x6f\xf1\x24\x90\xca\xf6\x9a\x0c\x0f\x46\x5b\xdf\xe8\x46\x8c\x59\xbc\xa5\xe5\x6d\x8c\x99\x91\xa6\xb4\xac\xab\xdd\xef\x64\xa9\xf9\x9d\xac\x05\x72\xce\xb7\x4d\xd9\xa3\x77\xbc\x0d\x9a\xc2\xf6\xe4\xba\xb3\xf2\xdc\x1e\xd6\x6e\xcd\x79\x8a\xdc\x30\x4d\x52\x3e\xdd\xdc\xf2\xe6\xa2\xb7\xec\x6f\xc8\xcd\x4e\xd2\xaf\xca\xe9\x75\x98\xed\x31\x8e\x2e\x75\x70\x91\x53\x29\x70\x67\x7b\x4f\xc0\xd4\xc6\xe4\x3d\x25\x9a\xff\x89\x28\x06\x7d\x3c\x83\xd0\x35\x2c\xa4\x08\xc4\x06\x1c\x2f\x96\x16\x53\xd0\xdc\x73\xa4\xbb\xe7\xbc\xd4\x80\x57\x09\x13\x1e\x0c\x0e\x8f\x16\xff\x7e\xe1\x5a\x57\xa0\xc2\xa5\x4b\x51\x7b\xbb\xdd\x26\xf0\x6c\x37\x89\x58\x16\x35\xba\x07\x9e\x1c\x6e\xfd\x9e\xa2\x6a\xf9\xd6\xeb\x7c\xf9\xb6\xb5\x52\xf7\x5b\x4a\xf9\x5e\x8d\x18\xcb\x49\x65\x0c\xd6\x52\xdd\x91\x74\x35\xc9\x39\x1e\xea\xcd\x95\x0d\xb7\x15\xe3\x1a\x2b\x00\x47\xa5\xe2\x39\x53\x33\x5a\x5f\x03\xab\xd2\x65\x42\xcd\xbd\x83\xda\xa5\x5b\x54\x60\xcb\xc2\xdd\x1a\x5b\x64\x38\xc6\x3b\x22\x2f\x0d\xd1\x2a\xda\xf1\x25\x75\xa5\xf1\x09\x75\xe4\x0f\xdb\xb9\x7f\xa5\xed\xad\xad\x96\x37\xfe\x99\x92\x7b\xac\xe0\xf6\x7d\xe6\xde\x45\x8f\xa7\xa5\x6d\x22\x8f\xac\x86\xe1\x33\xf3\xe7\xaa\x78\xd0\x9b\xb6\x5b\x5b\x93\x1a\x6d\x08\xb1\x65\x57\x02\x9e\x79\x2b\x6f\x29\x0f\x5f\x74\x5e\x91\xbe\x6f\xe4\x79\xfb\x76\xd2\x78\x0b\x27\xb9\x2c\x24\xe6\x5d\x04\xb1\x5f\x57\xa9\xf7\x79\xef\x2e\x05\x7d\x77\xd6\xa7\xcf\x92\xaa\x70\x3d\xe8\xd9\xff\xf3\xf8\x32\x03\xb4\x29\xbd\x50\x72\x8a\x0d\x58\xed\xad\x3e\x0d\xd7\x49\xfc\x18\x12\xec\x04\x17\x4c\x80\x31\x68\xe1\x44\x54\xc0\x75\x86\x96\x75\xbc\x2a\xbd\xe3\xbe\x77\x46\xbc\xff\x25\xa7\xc9\x24\x89\xbd\xfd\x0e\x8a\x83\x7e\x4d\x32\xc1\xe7\x13\x74\x93\x0c\x1a\x92\x21\x44\x43\x18\x74\x92\x1c\x36\x24\xc7\xc7\x2c\x8e\x0f\x3b\x49\x8e\x1a\x92\xc3\x88\x1d\x44\xdd\x8a\x8e\x5b\x92\xfe\xf3\x83\xc9\xa4\x93\xe4\xa4\x21\x19\xb0\x53\x60\xdd\x8a\x4e\x5b\x92\xc3\x93\xc9\x90\x75\x92\x0c\x1b\x92\x83\xf8\x78\x78\xda\x8d\xe8\x79\x4b\x72\x7a\x84\xa0\x3a\x49\xce\x5b\xdf\x6d\x71\xef\xf9\xe0\x7e\xff\x9e\x3f\xc0\x35\xe7\x0f\x40\x65\x0f\x46\xc5\xb4\x79\x0d\x09\xab\x84\x79\x25\x85\x54\x96\x47\xf0\x34\x33\xdb\x39\x98\xba\x76\xe4\xda\xd2\x1f\xf7\x09\x22\x23\x68\x39\xc1\xb8\x12\xb4\x8e\x58\xa8\xc4\x62\x21\xce\xd8\x95\xef\x13\x7b\x2f\xee\xcd\x5a\xbc\x40\xe5\x98\xad\x71\x6d\x9a\xb7\xb7\x6e\x8c\xdf\x34\xfa\xb5\xcc\x5e\xa0\x75\x9a\x36\xb4\x0a\x8a\xef\x66\x15\x97\x4c\x99\x59\xf3\x39\xa9\xae\xc1\x5e\x0a\x78\x57\x60\x78\x8f\x0b\xae\xda\x35\x6c\x02\x74\x53\xcb\xd9\x45\xce\x97\x8f\x97\x6f\x87\xbb\x09\x6b\x7b\x52\x2d\x60\x65\xba\x2a\xca\x82\xb5\xdf\x76\xea\x2f\x1c\xf5\x27\xca\xbf\x03\x00\x00\xff\xff\xb0\x06\x0f\xf4\xb4\x14\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 5300, mode: os.FileMode(420), modTime: time.Unix(1456406092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x69\x6f\xdc\x36\x13\xfe\xfc\xee\xaf\xe0\xcb\x16\x50\x0c\x58\xd2\xfa\xde\x38\x92\x0a\x23\x69\x81\x00\x2d\x62\x14\x29\x8a\xa0\x0d\x0a\xae\x34\x92\x98\x50\xa4\x4a\x52\x6b\x2f\xd2\xfc\xf7\x0e\x75\xec\x25\x39\x4e\x8a\x44\x80\x61\x92\xf3\xcc\xf1\xcc\x0c\x8f\x8d\xfe\xff\xe2\xd5\xf3\xd7\x6f\x6e\x7f\x24\xa5\xad\x44\x32\x8b\xdc\x3f\x22\x98\x2c\x62\x0a\x92\x26\x33\x42\xa2\x12\x58\x96\xcc\xfe\x47\x70\x58\x81\x65\x88\xb4\xb5\x0f\x7f\x37\x7c\x15\xd3\xe7\x4a\x5a\x90\xd6\x7f\xbd\xae\x81\x92\xb4\x9b\xc5\xd4\xc2\xbd\x0d\x9d\xa9\x67\x24\x2d\x99\x36\x60\xe3\xc6\xe6\xfe\x82\x92\xd0\x99\x6c\xbf\xc8\x72\x2b\x20\xf9\x59\x15\x84\x4b\xe2\x93\x97\xd6\x33\xe4\x8d\x6a\xc8\x2b\x29\xb8\x84\x28\xec\xe4\xb3\x0d\x1e\x57\xdf\x13\x0d\x22\xf6\x8c\x5d\x0b\x30\x25\x80\x25\xb5\x86\x1c\x6c\x5a\x7a\xa4\xc4\x51\xec\xb9\xe0\xcc\x75\x18\xb2\x77\xec\x3e\x28\x94\x2a\x04\xb0\x9a\x9b\x20\x55\x55\xbb\x16\x0a\xbe\x34\x21\xf2\x6b\x04\xd3\x7f\x55\xcc\x82\xe6\x4c\x84\x27\xc1\x3c\x98\x0f\xcb\xfe\xb0\x1c\x54\x5c\x06\xa9\x31\x5e\x32\x0e\x82\x6e\x83\xa0\x9d\x6f\xca\x0c\x12\x35\x21\x2a\x84\xad\xd0\xa9\xd2\xf0\x8b\x75\x73\xcc\xa2\xcf\xee\xc0\xa8\x0a\x86\x08\x46\x66\xb6\x6c\x91\xac\xd3\x30\x87\x6c\x51\xeb\x87\x9c\x55\x5c\xac\xe3\xdf\x41\x88\x5c\xa0\xb7\x7f\x6e\xf4\x4a\x5d\x9f\xcf\xe7\xc7\x57\xf8\x87\xff\xb9\x65\x82\xa7\x6e\xd6\x8d\xbc\xc3\x04\x7b\xc4\x62\x69\x63\xaf\xad\xe8\x5e\x2a\x48\xd4\xa2\xb6\x05\x6a\xbf\x3f\x64\xf1\xe7\x75\x2a\x14\x7b\xff\xf6\xd8\x4d\xfc\x61\x1c\x0c\x63\xf2\x61\x4f\xc1\x7d\x19\x37\xb5\x60\xeb\x6b\x22\x95\x84\x67\x7b\xe2\x8f\x5b\x77\x61\xef\x0f\x47\x5d\x4b\xce\xa2\xa5\xca\xd6\x04\x0d\xb3\xba\x8e\xa9\x50\x05\x97\x37\x75\x4d\x9d\xc4\x21\x40\x13\x9e\xc5\xb4\x1b\x76\xbd\x9c\xf1\x15\x49\x05\x26\x3b\xa6\x7d\xb3\xd2\x8e\x50\x2b\x71\x68\xb4\xa2\x68\x12\xb1\xbe\x2e\x25\x16\x81\x26\xd8\x9c\x06\x5b\x33\xe8\x5a\x13\x03\x60\x49\x14\xa2\xc6\x8e\x6e\x6f\xd5\xf0\x42\xfa\x77\x9a\xd5\x74\x48\xd4\xc6\x94\x86\x82\x1b\xeb\x22\x89\xf8\x00\xcf\x19\xc9\x99\xdf\x18\xd0\x7e\x2d\x1a\x83\xa2\x90\x27\xbf\xf6\x40\xe7\xa6\x73\x30\xf8\xea\x07\x5d\x02\x40\x23\xd1\xd9\xae\xf3\xbc\x11\xc2\xa4\x1a\x40\xe6\x4a\x57\x03\x33\x37\x26\x9b\xec\xe3\x16\x2e\x15\xf2\xac\x95\xc1\xe6\x63\xa9\xe5\x4a\xf6\xb9\xa3\xb8\xf1\xd7\xaa\xb1\x2e\x37\xa2\xa9\x70\x2e\x59\x05\xbd\xb0\xb5\x48\x76\x08\xa3\x45\x2e\xb9\x8d\xbd\x8d\x38\x40\x1a\x2b\xd0\x86\x67\xb0\xc2\x66\xca\x98\xb3\x0d\x5a\x2b\x6d\x48\x4c\x3e\x50\x2e\xdb\x65\xd7\xd7\xb6\xe4\xb2\xa0\xd7\xc4\xea\x06\x3e\x7a\xa3\x64\x62\xb3\xde\x6f\x82\xd1\xea\x8e\xee\x74\xdd\x20\xdf\x55\xda\x08\x0e\x09\x38\xa0\x5f\x58\xff\x1e\xb3\x73\x3e\xef\xe7\x6e\x72\x32\x9f\xef\x18\x6d\xf5\xab\x0c\x09\xd5\x8d\xf5\x5d\x67\x30\xac\xb3\x4e\x46\x9d\x1a\x09\xb6\x04\x91\xfc\x86\x4c\x5d\x6e\xa2\xb0\x9b\x8f\x71\xad\x25\x97\xa3\x4a\x65\x6e\xc7\xf7\x09\xc6\xed\x2c\x40\x16\xb6\x8c\xe9\x29\xc5\xbd\x86\xa7\xa8\x86\x6c\x37\xcf\xb4\xdb\x70\xed\x11\x8a\xf5\x69\xac\xca\x55\xda\x98\x83\x58\xc3\xa9\x60\xff\x33\x9d\x5b\xec\x9e\x3b\xa5\xb3\xcf\xa7\x53\xf7\x1a\x23\x0e\x5b\x41\x47\x63\x33\xff\xa6\x04\x4e\xfd\x9f\xb0\x93\x95\x76\xf9\x2a\x71\x53\xf3\xb4\xed\x3d\xbc\x90\xb2\x2f\xa8\x91\x55\xb6\x76\x1a\x58\xa6\x0c\xef\x80\xfb\xa1\x52\x97\x7b\x75\xbb\x1c\x71\xde\xe8\x7d\x0e\xc7\xad\x74\xdc\xbd\x87\x6d\xdd\x0f\xa7\x5b\x7c\x7f\x5b\xb4\x62\x53\x33\x39\x18\x71\xe3\x03\xf1\xc4\x06\x99\xc8\x0a\x06\xbd\x6c\xac\xc5\xec\x75\x15\x34\xcd\xb2\xe2\xd8\x8a\xfd\x19\x83\x62\xcd\xb8\x41\xf2\x38\xaa\x35\xaf\x98\x5e\xd3\xfe\x16\x6f\x19\x77\xca\x13\x86\xfb\x43\xa3\x02\x63\x58\x01\x66\xe7\x5c\xf9\xc4\xc1\xd1\xd6\xc2\xed\x02\xbf\x44\xa9\x3b\x30\x85\x81\x4d\x30\x2d\x66\x82\xc4\x84\xbf\x78\x38\x7e\xf0\x7c\xcc\x5c\x8b\xa0\x21\x9a\xbc\xec\xd6\xc8\xce\xe2\x41\x61\x1e\xa8\xd7\x43\x4b\x0f\x97\x60\xb7\x98\x51\xe8\x68\xbb\x83\xbc\x5b\x9b\x45\x78\x6c\xf3\xda\x12\xa3\xd3\x2f\x7c\xc3\xbc\x33\xf8\x78\x39\x0f\x16\xc3\x3c\x78\x67\xdc\x79\xda\xd9\x4b\xbe\xa2\x61\x9f\x49\xee\x1e\x46\xed\x93\xe4\x9b\x39\x19\xba\xe3\xdb\x7a\x61\xf8\xba\xfb\xaa\x1e\x3e\xeb\x25\x39\xe9\xac\x6b\x90\xa1\x78\x78\x12\x35\x02\x9e\x78\xc3\x5b\xc6\xc3\x47\x94\x27\x8b\x5f\x7a\x33\xde\xb1\x9b\xf4\x29\xf2\xde\x1e\x6d\x9a\x0b\xa3\x92\x39\x2f\x9e\xe4\x8d\x6c\x6f\xf4\x27\xdf\x57\xd9\xeb\x12\xd0\x6b\x71\xab\xd5\x0a\xb7\x8e\x3e\x3a\x78\x78\x8d\x11\x41\x06\x39\x1e\x52\xb7\x4c\x80\xb5\x18\xc4\x52\x34\xc0\x4d\x89\x31\x8c\x9f\x6c\xde\xc5\xdc\xbb\x26\xde\x77\xf9\x55\xbe\xcc\x33\xef\x78\x0c\xc0\x1b\xb6\x45\x2c\xf1\xa5\x02\x93\x88\xd3\x1e\xb1\x80\x74\x01\xa7\x53\x88\xb3\x1e\x71\x71\xc1\xb2\xec\x6c\x0a\x71\xde\x23\xce\x52\x76\x92\x4e\x7a\xb9\x18\x10\xf3\xa7\x27\xcb\xe5\x14\xe2\xb2\x47\x9c\xb2\x2b\x60\x93\x5e\xae\x06\xc4\xd9\xe5\x72\xc1\xa6\x10\x8b\x1e\x71\x92\x5d\x2c\xae\x26\xb9\x3c\x1d\x10\x57\xe7\x48\x67\x0a\x71\x33\xa4\xec\xe1\xa4\xde\x9c\x3e\x9a\xd5\x9b\xc7\x53\x72\xf3\x38\x1f\x77\x63\x69\x66\xec\x0b\xc8\x59\x23\xec\x73\x25\x94\x76\x2a\x82\x17\xa5\xfd\xa4\x02\xd3\xef\x5b\xb4\x71\xf0\x8b\x39\x41\x52\x04\xa3\x26\x58\x4b\x82\xa1\x11\xc7\x92\x38\x1e\xa4\x8d\x74\xff\xb5\x7f\xf4\xec\xb1\x1e\xc5\xfb\xbd\xc2\xde\xcc\xba\xb8\xbc\xa3\x51\x24\x41\x7f\x29\x8d\xda\x78\x0b\x75\x6e\x76\x36\x62\xe8\x7e\x46\xb4\xaf\xea\xf6\x37\xf0\xbf\x01\x00\x00\xff\xff\x11\x48\xc4\xbf\x14\x0f\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 3860, mode: os.FileMode(420), modTime: time.Unix(1456406075, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _homeHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\x6d\x6f\xdb\xb6\x13\xc0\x5f\xff\xfd\x29\xf8\x67\x07\x30\x01\x62\xc9\x4e\xe2\xda\x75\x24\x0d\x46\xba\x17\x7d\x31\x34\xc0\x02\x0c\xc5\x56\x0c\xb4\x74\x92\x98\x50\xa4\x4a\x52\x69\x8d\x6d\xdf\x7d\x47\x3d\xc4\x71\xac\x2d\x2b\xd0\x09\x28\x7c\x24\x7f\xf7\xc8\x3b\x36\xd1\xff\xdf\xbe\xbf\xbe\xfd\x70\xf3\x03\x29\x5d\x25\x93\x49\xe4\x7f\x88\xe4\xaa\x88\x29\x28\x9a\x4c\x08\x89\x4a\xe0\x59\x32\xf9\x1f\x41\xb1\x02\xc7\x91\x74\xf5\x14\x3e\x35\xe2\x21\xa6\xd7\x5a\x39\x50\x6e\x7a\xbb\xab\x81\x92\xb4\x5b\xc5\xd4\xc1\x17\x17\x7a\x53\x57\x24\x2d\xb9\xb1\xe0\xe2\xc6\xe5\xd3\x15\x25\xa1\x37\xd9\x7e\x91\x13\x4e\x42\xf2\xce\x31\x4b\x3e\xe8\x86\xbc\x57\x52\x28\x88\xc2\x6e\x7b\xf2\x88\xe1\xee\x3d\x31\x20\x63\x66\xdd\x4e\x82\x2d\x01\x1c\xa9\x0d\xe4\xe0\xd2\x92\x91\x12\xa5\x98\xf9\x98\xec\x3a\x0c\xf9\x1d\xff\x12\x14\x5a\x17\x12\x78\x2d\x6c\x90\xea\xaa\xdd\x0b\xa5\xd8\xda\x10\xd3\x6a\x24\x37\xbf\x55\xdc\x81\x11\x5c\x86\xf3\x60\x16\xcc\x86\xed\xe9\xb0\x1d\x54\x42\x05\xa9\xb5\x2c\x39\x0e\x82\xee\x83\xa0\x9d\x6f\xca\x2d\xe6\x67\x43\x54\x08\xdb\x43\xaf\x4a\xc3\xaf\xd6\xcd\xb1\x78\x53\xfe\x19\xac\xae\x60\x88\xe0\xc8\xcc\x3e\x5b\x4c\xd6\x6b\xd8\xe7\xd9\xa2\xd6\xf7\x39\xaf\x84\xdc\xc5\x3f\x83\x94\xb9\x44\x6f\x7f\x6c\xcc\x83\x5e\x5f\xce\x66\x67\x4b\xfc\x87\xbf\xc2\x71\x29\x52\xbf\xea\x24\xf6\xbc\xc0\x8c\x38\xbc\xd1\x98\xb5\x17\x79\x50\x0a\x12\xb5\xd4\xfe\x82\xda\xef\x17\x55\xfc\xba\x4e\xa5\xe6\xf7\x1f\xcf\xfc\x62\x3a\xc8\xc1\x20\x93\xdf\x0f\x14\xfc\x97\x09\x5b\x4b\xbe\x5b\x13\xa5\x15\x5c\x1d\x1c\xff\xb9\x77\x17\xf6\xfe\x50\xea\x3a\x71\x12\x6d\x75\xb6\x23\x68\x98\xd7\x75\x4c\x85\xb3\xba\xd1\x6d\xf3\x6c\xea\x9a\xfa\x73\xcf\x81\x21\x22\x8b\x69\x27\x76\x8d\x9c\x89\x07\x92\x4a\x2c\x79\x4c\xfb\x4e\xa5\x5d\x5a\xed\x89\xa7\xa5\x2e\x34\x4d\x22\xde\xdf\xce\x2b\x9a\x90\x77\xce\x62\x77\x06\x5d\x77\x62\x0c\x3c\x89\x42\xc4\x9f\x28\xf6\x26\xad\x28\xd4\xf4\xb3\xe1\x35\x1d\x6a\xf5\x68\xc7\x9b\x6d\xd0\x59\x24\x06\x38\xe7\x24\xe7\xd3\x56\xa5\x3b\x09\x45\xf2\x13\xae\x08\xae\xbc\x8f\xce\xfa\xe0\xa8\x17\xba\x02\x80\xc1\x14\x27\x4f\x3d\xe7\x8d\x94\x36\x35\x00\x2a\xd7\xa6\xa2\x1e\x6c\x79\xa4\x70\x5b\xd4\x8e\x58\x93\x7e\xe5\x8c\xdc\x59\x1c\x8e\xcb\x60\x35\xac\x83\x3b\xec\x01\xbc\x8b\xd6\x5e\xf2\x0d\x0d\x4f\xb9\x12\x7e\xf0\xda\x96\xff\xef\x9c\xe0\x5c\x7f\x53\x0f\xff\xea\x0d\x19\x75\xd6\xdd\xed\x50\xd6\x4a\x67\x8d\x84\x13\x76\xd8\xc5\x0c\x87\x88\xa9\xe2\xc7\xde\x18\x3b\x63\x95\x56\xda\xd6\x3c\x85\x2c\xf8\x64\x52\x9d\x01\xfb\x78\xfa\x38\x23\x18\xa2\xca\x45\x71\x92\x37\x2a\x75\x42\xab\x93\xef\xaa\xec\xb6\x04\x0c\xa1\xb8\x31\xfa\x41\x60\xcf\x9c\x3e\x9b\xbf\x63\x22\xc8\x20\x47\xef\x37\x5c\x82\x73\x18\xd1\x56\x36\x20\x6c\x89\xa1\x1c\x4f\x2e\x5b\xcc\xd8\x9a\xb0\x57\xf9\x32\xdf\xe6\x19\x3b\x3b\x06\xe6\xb3\x8e\xd8\x62\xc3\xc2\x28\x71\xde\x13\x2b\x48\x57\x70\x3e\x46\x5c\xf4\xc4\x62\xc1\xb3\xec\x62\x8c\xb8\xec\x89\x8b\x94\xcf\xd3\x51\x2f\x8b\x81\x98\xbd\x99\x6f\xb7\x63\xc4\xeb\x9e\x38\xe7\x4b\xe0\xa3\x5e\x96\x03\x71\xf1\x7a\xbb\xe2\x63\xc4\xaa\x27\xe6\xd9\x62\xb5\x1c\xcd\xe5\xcd\x40\x2c\x2f\x31\x9d\x31\x62\x33\x94\xec\xef\x8b\xba\x39\x7f\xb1\xaa\x9b\x97\x4b\xb2\x79\x39\x1f\xff\x3c\x1a\x6e\xdd\x5b\xc8\x79\x23\xdd\xb5\x96\xda\x78\x15\x29\x8a\xd2\xfd\xa3\x02\x37\xf7\x2d\x6d\x3d\xbe\x98\x11\x4c\x8a\x60\xd4\x04\xef\x92\x60\x68\xc4\x67\x49\x7c\x1e\xa4\x8d\xf4\xf0\xd1\x3f\xbd\x7a\xa9\x47\x1d\xae\xb1\x37\xb3\x2e\x2e\x76\x7a\x14\x49\x50\x1b\x7c\x4e\xcc\xee\xa8\x8d\xf7\xa8\x77\xf3\x64\x2a\x43\xff\xbf\x49\xfb\xb8\xb6\x7f\x01\xfd\x15\x00\x00\xff\xff\x66\x8a\xd4\x8c\x12\x09\x00\x00")

func homeHtmlBytes() ([]byte, error) {
	return bindataRead(
		_homeHtml,
		"home.html",
	)
}

func homeHtml() (*asset, error) {
	bytes, err := homeHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "home.html", size: 2322, mode: os.FileMode(420), modTime: time.Unix(1456411176, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
	"login.html": loginHtml,
	"home.html": homeHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"home.html": &bintree{homeHtml, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

