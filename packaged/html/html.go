// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xfd\x6e\xd3\xc8\x16\xff\x1f\x89\x77\x38\x98\x0a\x27\x22\xb1\xdb\xd2\x7b\xb9\x2a\x71\x50\xd5\x56\xf7\x56\xba\x5a\x10\xad\x84\xd0\x7e\x54\x53\xfb\x38\x1e\x6a\xcf\x98\x99\x71\x4a\xc4\x22\xf1\x20\xbb\x12\xcf\xc2\xa3\xf0\x24\x7b\x66\xc6\x69\xec\xa6\xdd\x0d\x8b\x56\x4a\xe4\xf1\xcc\xf9\xfc\x9d\x8f\x39\x9e\x3c\x38\x7a\x71\x78\xf6\xe6\xe5\x31\x14\xa6\x2a\xa7\xf7\xef\x4d\xec\x13\x4a\x26\x66\x49\x80\x22\x70\x3b\xc8\x32\x7a\x02\x4c\x2a\x34\x8c\x08\x4d\x3d\xc6\x77\x0d\x9f\x27\xc1\xa1\x14\x06\x85\x19\x9f\x2d\x6a\x0c\x20\xf5\x6f\x49\x60\xf0\xbd\x89\xad\xa0\x67\x90\x16\x4c\x69\x34\x49\x63\xf2\xf1\x7f\x02\x88\xbd\x20\xc3\x4d\x89\xd3\x13\x13\x6a\x78\x23\x1b\x78\x21\x4a\x2e\x70\x12\xfb\x6d\x47\x41\x1b\x97\xa0\xb0\x4c\x02\x6d\x16\x25\xea\x02\xd1\x04\x50\x28\xcc\x93\x80\x69\x92\xa8\xe3\x54\xeb\xd8\x1d\x46\xb4\x0a\xe2\x6f\xe2\xcb\xc9\xd4\x31\xbb\x42\x2d\x2b\x8c\x2a\x2e\xd6\x44\x38\x8e\xd0\xfa\xba\x1f\x3b\x6a\x1d\xcd\xa4\x9c\x95\xc8\x6a\xae\xa3\x54\x56\x56\xcc\xf3\x9c\x55\xbc\x5c\x24\xaf\xb1\x2c\xf3\x92\x34\xfd\x7a\xa0\xe6\x72\x7f\x6f\x7b\x7b\xf4\x94\xfe\xf4\xe4\x86\x95\x3c\xb5\x6f\x7e\x15\x3a\xdb\xc2\x95\x6d\x21\x18\xc2\x2e\x09\x1d\x64\x24\x32\xb4\x88\xc7\x2d\xe4\x93\x0b\x99\x2d\xec\xf3\xc1\x78\x0c\xff\x3b\x3e\x38\x3a\x7e\x05\xa7\x67\x07\xaf\xce\x60\x3c\x5e\x46\x06\x15\xf0\x2c\x09\xfc\x32\xf0\x1e\x64\x7c\x0e\x69\x49\xee\x26\x41\x1b\x13\x7f\xd0\x1e\x59\xfa\x52\xce\x64\x30\x9d\xb0\x16\x9a\x60\x0a\x27\x46\x53\x2c\x22\x1f\x0b\x98\xc4\x6c\x3a\x89\x89\xba\xcb\xd8\xca\xd4\x7c\x26\xc6\x57\x8a\xd5\x4b\xa9\x74\xbc\x14\xa4\x70\xc6\xb5\x51\xcc\x70\x49\xd9\x33\xe1\x4b\x9e\x9c\x41\xce\xc6\x8d\x46\x35\xae\xcb\x46\xd3\x51\xcc\xa7\xa7\x24\x08\x9a\xda\xea\x5a\x13\xf4\x70\x9d\xbb\x94\xe9\x65\x87\x91\x8b\x15\xe3\xca\xd4\xe5\xca\x83\x88\xea\x06\x7c\xc7\x3f\x1c\x39\xec\xda\xdd\xd3\xff\x9f\x1c\x1d\x9f\xf6\x40\x5d\x22\xa4\x4b\x9e\xe1\xce\x5f\x23\x5a\xec\x4e\x09\x37\x05\xd2\x03\x47\x4c\x82\xf2\x78\x41\xfa\x77\x3b\x24\x5c\xc0\xc2\x51\x5d\x09\x28\x98\xc8\xf4\xf5\xf9\xca\xe0\xf6\xd9\x33\x60\xf7\x6e\x03\xe0\x96\xd0\xbc\x6b\xa4\x41\x7d\x6e\x49\x18\x59\xa3\x3a\x11\x2a\x9e\xf4\x89\x82\x69\x1b\xea\x5a\xa1\x46\x91\x22\x54\xc8\x84\x26\x58\x0d\x2a\x96\xda\x00\x46\x70\x28\xab\x9a\x09\x8e\x1a\x04\x62\xe6\x5d\x58\x7a\x08\x57\x05\x4f\x0b\xbb\xd7\x8a\x30\xc4\x0b\x19\xcf\x73\x54\xf6\xe5\x8a\x2d\xf4\x08\x32\xac\x51\x64\x5c\xcc\x08\x20\x30\x05\x52\x97\xb0\x22\x17\x23\xa8\x51\x69\xda\x93\xca\x37\x8e\xf7\x26\x22\x4c\x9e\xfc\x49\x40\x6f\xc3\xe7\x5f\x9b\x06\xc8\xea\xad\x1a\xc1\x53\x66\x10\xe4\x9c\xca\x66\xce\x14\x97\x8d\xb6\x2d\x4a\x08\x2c\x35\x50\x58\xd6\xa3\xb6\xf2\xa7\xb5\x52\xc3\x45\x43\x9e\xda\xde\xc5\x4a\xeb\xa3\x45\x60\xc3\x68\xfe\xfb\x1f\x8c\xe6\xd7\x4f\xbf\x9d\x15\xe8\x31\xfe\xaf\xe2\x82\x42\x63\x0a\xd9\xcc\x0a\x03\x32\x07\xdb\xe8\x4c\x61\xc3\x40\xc7\x05\xcb\x44\x68\xe0\x02\x73\xa9\xf0\x01\xbc\x2e\x18\x39\x94\xc3\x61\xa1\xa8\x76\x2b\x46\x51\x23\xa2\x96\x99\x22\x28\x51\x5b\x72\x02\x10\x21\x57\xb2\x02\x06\xda\x10\x67\xb4\xce\x19\x45\x11\x85\xb5\x60\xb5\x5d\xf9\x7c\x62\x50\x72\x43\x7d\x1d\x2e\xb8\x81\xca\x2a\xfc\xfa\xe9\xf7\x4e\xa4\xc9\x19\x5e\xcd\x40\xab\x34\x09\x68\x11\x67\x6a\xac\xb1\xd1\x3a\xaa\xc5\x2c\x20\x88\xa9\xd4\xa9\x5d\x61\x6e\xda\xfe\xec\xdd\xdf\x5b\xba\xcf\x1a\x32\x54\x9d\x0b\x56\xe1\xf9\x4c\xb1\x45\x30\x3d\x52\x11\x9c\x5a\x09\x14\x8c\x62\x6f\xc5\x73\xa1\xe2\x3b\x5e\xd6\xc1\x3c\x10\xdd\x34\x27\x54\x57\xd9\x63\x31\xe4\x54\x0f\xd2\x00\xbb\x90\x94\x0a\x2e\xa9\x7d\x0e\xd9\x64\xb6\xaf\xb5\x92\x73\xe2\x57\xa3\x36\x4f\x1c\xdd\x55\x21\x5d\xb1\x30\x45\xe0\xb2\xf2\xd2\x0a\x32\xd2\xd6\x8c\x2f\xa4\xef\xa8\x82\x27\x1b\x55\xc1\x69\x61\x55\x37\xb5\xd5\x9a\xd9\x32\xe0\x82\x12\xa0\x72\xbd\xfa\x46\xe2\xdb\x14\xa7\x86\xb6\x00\xa6\xa1\x6a\xc8\x38\xe6\xd2\x9c\x6a\x5a\x98\x0d\x73\x7d\x6f\xb3\xcb\xe8\xef\xa4\xfa\x91\xf4\xe9\x0b\x2c\x57\x8c\x67\xd6\x1f\x5d\xc8\x2b\xdf\x9e\x72\x46\xad\x8c\x1a\x4c\xe5\x32\xd4\xfb\x6c\x63\xd2\x71\xd6\xbb\xc2\x75\xe1\x39\x1d\x85\xb4\x59\x8d\x6a\xce\xd3\x55\xf8\x6c\x47\xb0\x6a\x74\x43\x14\xbe\x7d\x93\x24\xd5\x13\x45\xa9\xa0\x59\x8e\x9b\x45\xad\x73\x01\x3b\x8c\x9e\xde\x06\xc5\x0d\x94\x36\xc5\xa9\x4f\x47\x01\x34\x52\x8c\x53\xb4\xdd\x1c\x6c\x5e\xb5\xeb\x2e\x43\x9f\x25\x93\x69\xff\xd0\xdd\xc6\x86\xa9\x19\xcd\x6f\xc1\xf9\x05\x0d\x85\x97\xc1\xea\x76\xee\x53\x02\x1c\xc9\xb4\xa9\x48\x85\x83\xe5\x86\x98\xce\x05\xdf\x07\xe8\x0e\x3b\xa8\xe7\xa4\xbb\xdf\x63\xcc\xc1\xcb\x93\x6f\x31\x68\xdd\xa4\xfe\x7b\x6f\x12\xba\xbb\x26\x3b\x13\x05\xcd\x19\xed\x3c\xa1\x53\xc5\x6b\xe3\xfb\x5b\x3b\x4f\xa6\x32\xc3\xe8\xed\xbb\x06\xd5\xc2\x8d\x92\x7e\x39\xde\x89\x76\x76\xa3\x6d\x37\x8e\xbe\x75\x13\x92\x67\x5d\x09\xa1\xd5\xd6\x20\x6b\xdd\x1a\x46\x8a\x06\x9c\xc5\x20\x6f\x84\xbb\xac\x07\x43\xf8\x70\xff\xde\x97\xcf\xb0\x35\x08\x1f\x0a\x36\x07\x16\x0e\x23\x64\x69\xb1\x4e\x41\x3f\x6a\xda\x03\x9a\xa7\x1c\x36\x51\xcd\x4c\x61\x1b\x28\x49\xac\x4b\x2a\x9f\x41\xfc\xcb\x4f\x71\x3c\x0a\xc3\x21\x24\x09\x15\x0f\x4d\xbc\x77\x93\x2c\x25\x3e\x7a\x04\xd7\x02\x0b\xa9\x8d\xa5\xbe\x66\x5f\x6e\x74\x88\xfd\x3e\xd3\xc5\x4a\xe4\x43\xaf\xb3\x63\x26\xfd\xe8\x9a\x86\x2d\x1f\xf8\x93\x0c\x12\x72\xef\x9a\x73\x38\x5a\x9e\x1c\xd0\x75\x47\xbd\xd7\x9e\x86\x3f\x5a\x45\x49\x08\x8f\x3b\x2a\xa8\xda\x48\xc1\xce\x10\x1e\x87\x3f\x87\xc3\x67\xb7\x8b\xb7\xec\x4b\x45\x51\x89\x62\x66\x0a\x78\xde\xd1\xbd\xdf\xd7\xb6\x46\xd2\x1a\xb1\x4f\x2d\xa8\xd4\xd8\x55\xf2\xe5\xb3\xc5\xbb\x25\xeb\xbb\xe7\x7e\xd6\x08\x7f\xf8\x22\xcf\x75\xd7\x92\x48\xba\x8d\xc1\x30\x32\xb2\x7e\x66\xe7\xd6\x9b\xbc\x1e\x8f\x61\x94\x92\x8b\x97\x37\x62\xdd\xcd\xf0\xad\x41\xe0\xd2\xa2\xe4\xc0\x02\x9b\x3c\x15\x4d\x41\x87\xb6\xe4\x06\x81\x1d\xf7\xe6\x18\x58\x60\xfa\x2c\x5e\x34\xcb\x32\x4f\x18\x7a\xc2\x3e\x82\x2b\x43\x42\xfb\xcd\x37\x02\xfb\xd5\x42\xb9\x47\x73\x23\xf5\x48\x1c\x7c\xa0\xe4\x95\x65\x79\x26\xeb\xfd\x9e\x93\x1f\x47\xb0\xb3\xbd\xbd\x7d\xab\x2c\x85\xa6\x51\xe2\x36\x20\xe9\xf7\xb1\xc7\xf2\x71\xb9\xf6\x0b\x77\x78\xff\x9e\x7b\x74\x2b\x28\x5e\x7e\x4b\xc5\xed\x97\xee\x1f\x01\x00\x00\xff\xff\x56\xab\xda\x5d\xfb\x0e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3835, mode: os.FileMode(493), modTime: time.Unix(1455202056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x57\x6d\x6f\xdb\x36\x10\xfe\x9c\x02\xfd\x0f\x2c\x3b\x40\x09\x50\x4b\xce\x8b\x6b\x37\x95\x34\x18\x49\x80\x15\xd8\xd6\x20\xcd\x30\x14\x5b\x31\xd0\x12\x65\x33\xa1\x48\x8d\xa4\x92\x18\xdb\xfe\xfb\x8e\xa4\x64\x2b\xb6\x90\x26\x40\x8a\x4d\x80\x21\x1e\xf5\xdc\xdb\xc3\xe3\x91\x8e\x5f\x9d\x7e\x3c\xb9\xfc\x7c\x7e\x86\x16\xa6\xe4\xe9\xcb\x17\xb1\x7d\x23\x4e\xc4\x3c\xc1\x54\x60\x98\x41\x28\x5e\x50\x92\xc3\x68\x07\xc1\xb8\xa4\x86\x00\xd8\x54\x03\xfa\x67\xcd\x6e\x12\x7c\x22\x85\xa1\xc2\x0c\x2e\x97\x15\xc5\x28\xf3\x52\x82\x0d\xbd\x33\x91\x35\xf6\x1e\x65\x0b\xa2\x34\x35\x49\x6d\x8a\xc1\x04\xa3\xc8\x19\x75\x4f\x6c\x98\xe1\x34\xfd\x60\x02\x8d\x3e\xcb\x1a\x7d\x14\x9c\x09\x1a\x47\x7e\xfa\xe5\x8b\x35\x10\xe6\xaf\x91\xa2\x3c\x09\xb4\x59\x72\xaa\x17\x94\x1a\x54\x29\x5a\x50\x93\x2d\x02\xb4\x80\x51\x12\xd8\xb0\xf4\x71\x14\x91\x2b\x72\x17\xce\xa5\x9c\x73\x4a\x2a\xa6\xc3\x4c\x96\x6e\x2e\xe2\x6c\xa6\x23\xc8\xad\xe6\x44\xfd\x51\x12\x43\x15\x23\x3c\xda\x0f\x87\xe1\xb0\x9d\x1e\xb4\xd3\x61\xc9\x44\x98\x69\x1d\xa4\x3d\x51\xe0\x75\x14\xd8\x3b\xc7\x44\x43\x8e\x3a\x02\x8d\xc8\x7d\xb4\xba\x38\xda\x54\x5e\x07\x0a\x71\x16\x40\x96\xde\x0c\x14\xd4\xbe\x2f\x48\xc9\xf8\x32\xf9\x95\x72\x5e\x70\xf0\xf1\xf7\x54\xdd\xc8\xe3\xa3\xe1\xf0\xcd\x18\x7e\xf0\x66\x86\x70\x96\x59\xc9\x8f\x82\x4d\x6e\x02\x64\x60\x3d\x92\xc0\x2d\xc3\xfd\x2c\x50\xec\x60\x5d\x7a\xdd\xf3\x9b\x98\xff\x7e\x9c\x71\x49\xae\xbf\xbc\xb1\xc2\xa0\x1d\x87\xed\x18\xfd\x75\x5f\xc3\x3e\x39\xd3\x15\x27\xcb\x63\x24\xa4\xa0\xef\xef\x7f\xff\xa7\xe3\x33\x6a\x9d\xc2\xb0\xa9\x27\xa8\xb6\x99\xcc\x97\x08\xcc\x93\xaa\x4a\xb0\xa2\x73\xa6\x8d\x22\x86\x49\x31\xad\x2a\xec\x21\xaf\x06\xf6\x41\x3f\x9c\x4d\x4f\xcf\x2e\xd0\xa7\xcb\xe9\xc5\x25\xc8\xae\x54\xc1\x0c\x55\x88\xe5\x09\xf6\x43\xab\x11\xe7\xec\x06\x65\x1c\x56\x23\xc1\x4d\x31\xae\xa6\x2d\x92\xcb\xb9\xc4\x69\x4c\x9a\x55\xc3\x29\xfa\x60\x34\xd4\x5e\xe8\x6b\x0f\xa2\x23\x69\x1c\x01\xda\x7b\x17\xc4\xab\xc1\xdb\x9a\xd9\x89\x6b\xbb\x4b\x76\x76\x60\x35\xd7\x46\x5e\x83\x51\x26\x30\x72\x65\x9b\xe0\x1f\x9d\x94\xba\x97\x37\x07\x60\xab\x1b\x39\xe5\x38\x02\x63\xee\xed\xbd\x78\x3e\xa8\x4a\xb7\x92\x3d\xfb\xf9\xd4\xa7\xea\x42\xe9\x24\x56\xd4\x9c\xeb\x4c\x51\x2a\x0a\xa9\x4a\xdc\xac\x6d\x6c\x05\xb4\x5a\x2c\x58\x15\x59\x1b\xcb\x02\xaf\x4b\x81\x57\x05\x10\x97\xf9\x80\x89\xaa\x36\x03\xcb\x0f\x81\xa4\x55\xb7\x38\x38\x99\x51\x9e\xfe\xa2\xa9\x12\xa4\x84\xbd\xe8\xe5\x0e\xc0\xe9\x5a\x37\xa5\xcc\xed\x56\x68\x92\xb7\xe8\x95\xe0\x8a\xcf\xf5\x00\x8c\x48\x6d\x64\x21\xb3\x5a\xaf\x23\x88\x1e\x08\xe1\x5e\x9e\x90\xd0\x80\x2a\x25\x15\xb6\x0e\xf5\x2d\x83\xdd\xee\xa7\xcf\xec\xac\x0e\x5b\xe7\x6d\xd2\x16\xb5\x90\xb7\x3d\x98\x6e\x0a\xd6\xc5\xca\xde\xe0\x76\x41\x85\xad\x3e\xe8\x67\x8a\xe6\x38\xbd\x68\x46\x61\xbb\x42\x6d\xd4\x6d\x55\x3c\x81\xc7\x73\xc8\xe3\x56\xaa\xfc\x11\x3c\x56\x0d\xb4\xa5\x72\x2d\x7b\x36\x57\xf2\xb7\xe0\xb1\xe3\xfc\x21\x2a\xb7\x63\xf8\x4f\xd8\xb4\xc7\x4c\xc1\x54\xe9\x5a\xc5\x13\xa8\xbd\x81\x5e\x99\x3b\xa5\x4d\x92\xbb\x5f\xfe\x7f\x74\x77\xa2\x7b\x7e\xe2\xad\x95\xb6\x57\x28\x79\x7b\xcf\x83\xae\x88\x40\x70\x04\xdd\x41\x13\xb3\xe3\xee\x37\x20\x63\x56\x1b\x23\x45\x43\x98\xae\x67\x25\x83\xfd\xde\x90\x00\x9f\x2b\xc5\x4a\xa2\x96\x4d\x92\x2c\xbb\x86\x3e\x0a\x2d\x61\x77\x0f\xa7\x9f\xd8\x5c\xa0\xba\x72\x94\x7a\x2b\x5b\x01\xfa\xb1\x65\xa3\xd3\x2c\x5d\x27\x84\xd6\xc7\x2a\x83\xb4\xca\x9e\x78\xe6\x5f\x69\x38\xec\x8f\xc2\x49\x2b\x87\x57\x70\x30\x42\x66\xce\x5e\xfa\x9c\x96\x07\x44\x30\x7b\x93\x70\xb7\x88\x6f\xe8\x05\x6e\x2a\xcf\xeb\xe2\x51\xd7\xa2\x7e\x6f\xcd\x9a\xb5\xdc\xc2\xde\xab\x39\xdd\x0d\x36\x8e\xf5\x00\x2e\x17\x81\x98\xff\xd4\xd8\x0b\xbe\xec\xad\x6b\x2a\x74\xfb\x7a\xbe\x5b\xd4\x22\xb3\xf0\xdd\xef\xca\xfc\x72\x41\xc1\xe5\xfc\x5c\xc9\x1b\x06\xa7\xe4\xde\xe6\x25\x64\x1b\x12\xe6\xb4\x80\xbd\x79\x4e\x38\x35\x06\x02\x98\xf1\x9a\x32\xbd\x00\xc7\x3d\xf7\x97\x60\x34\x0c\x8e\x51\xf0\xba\x18\x17\xb3\x22\x0f\xde\xf4\x20\xf6\x87\x1e\x32\x83\x53\x9a\xf6\x43\x0e\x1a\xc8\x84\x66\x13\x7a\xd0\x0b\x39\x6c\x20\xa3\x11\xc9\xf3\xc3\x5e\xc8\x51\x03\x39\xcc\xc8\x7e\xd6\xef\x68\xd4\x42\x86\xef\xf6\x67\xb3\x5e\xc8\xdb\x06\x72\x40\xc6\x94\xf4\x3b\x1a\xb7\x90\xc3\xb7\xb3\x09\xe9\x85\x4c\x1a\xc8\x7e\x3e\x9a\x8c\xfb\x33\x7a\xd7\x42\xc6\x47\x90\x54\x2f\x64\xda\x72\xf7\x00\xbd\xd3\x83\xaf\xf3\x3b\x7d\x04\x35\xd3\x47\x64\x65\xfb\xb6\x22\xda\x9c\xd2\x82\xd4\xdc\x9c\x48\x2e\x95\xd5\xe1\x6c\xbe\x30\x0f\x6b\x10\x75\xed\xe0\xda\xe2\x47\x43\x04\x99\x21\x88\x1c\xc1\xba\x22\x88\x0e\xd9\x54\x91\xcd\x05\xb9\x60\x37\x6e\xc2\x7b\xef\xbf\x5a\xb5\x06\x64\xa8\xd6\xdc\x87\x16\xec\x6d\x07\x13\x36\x0d\x75\xab\xb2\x3b\x58\xe7\xa9\xb3\x37\x5d\xc3\x8c\xec\x3d\xdb\x5f\x35\xfd\xdf\xbc\x7f\x03\x00\x00\xff\xff\x21\xff\x92\xf3\xf8\x0d\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 3576, mode: os.FileMode(420), modTime: time.Unix(1455202084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

