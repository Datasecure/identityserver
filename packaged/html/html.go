// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xfd\x6e\xd4\x46\x10\xff\x1f\x89\x77\x18\x4c\x84\xef\xc4\x9d\x9d\x84\xb4\x54\xe1\xee\x50\x94\xa0\x2a\x12\x2a\xa8\x89\x84\x50\x3f\xa2\x8d\x3d\xbe\x5d\x62\xef\x9a\xdd\xf5\x85\x13\x45\xe2\x41\x5a\x89\x67\xe1\x51\x78\x92\xce\x7a\xed\x9c\x9d\x4b\xda\xa3\xa8\xd2\x9d\xbc\x1f\xf3\xf9\x9b\x0f\x8f\x27\xf7\x8e\x5e\x1c\x9e\xbe\x7e\xf9\x0c\xb8\x2d\xf2\xd9\xdd\x3b\x13\xf7\x84\x9c\xc9\xf9\x34\x40\x19\xd4\x27\xc8\x52\x7a\x02\x4c\x0a\xb4\x8c\x08\x6d\x39\xc6\xb7\x95\x58\x4c\x83\x43\x25\x2d\x4a\x3b\x3e\x5d\x96\x18\x40\xe2\x77\xd3\xc0\xe2\x3b\x1b\x3b\x41\x4f\x20\xe1\x4c\x1b\xb4\xd3\xca\x66\xe3\x1f\x02\x88\xbd\x20\x2b\x6c\x8e\xb3\x63\x1b\x1a\x78\xad\x2a\x78\x21\x73\x21\x71\x12\xfb\xe3\x9a\x82\x0e\x2e\x40\x63\x3e\x0d\x8c\x5d\xe6\x68\x38\xa2\x0d\x80\x6b\xcc\xa6\x01\x33\x24\xd1\xc4\x89\x31\x71\x7d\x19\xd1\x2a\x88\xbf\x8a\x2f\x23\x53\xc7\xec\x12\x8d\x2a\x30\x2a\x84\x5c\x13\x51\x73\x84\xce\xd7\xfd\xb8\xa6\x36\xd1\x5c\xa9\x79\x8e\xac\x14\x26\x4a\x54\xe1\xc4\x3c\xcd\x58\x21\xf2\xe5\xf4\x15\xe6\x79\x96\x93\xa6\x3f\x0e\xf4\x42\xed\xef\x6d\x6f\x8f\x1e\xd3\x9f\x9e\xc2\xb2\x5c\x24\x6e\xe7\x57\x61\x6d\x5b\xb8\xb2\x2d\x04\x4b\xd8\x4d\xc3\x1a\x32\x12\x19\x3a\xc4\xe3\x06\xf2\xc9\xb9\x4a\x97\x6d\x08\x50\x83\x48\xa7\x81\x5f\x06\xde\xd4\x54\x2c\x20\xc9\xc9\xaf\x69\xd0\x80\xef\x2f\x9a\x2b\x47\x9f\xab\xb9\x0a\x66\x13\xd6\x60\x70\x3f\x98\xc1\xb1\x35\x84\x7a\xe4\x51\x87\x49\xcc\x66\x93\x98\xc8\xbb\x9c\x8d\x50\x23\xe6\x72\x7c\xa9\x59\xd9\x8a\xa5\xeb\x56\x92\xc6\xb9\x30\xd6\x99\x32\x11\x2d\x7d\xc6\x20\x63\xe3\xca\xa0\x1e\x97\x79\x65\xe8\x2a\x16\xb3\x13\x12\x02\x55\xe9\xf4\xac\x09\x21\xeb\x84\x5c\x97\x90\xab\xe4\xc2\x33\x3f\x57\x73\x10\x72\xc5\xbb\xb2\xb4\x5d\x79\xb4\x50\xd3\x92\x36\xf7\xc6\x63\x38\x79\x7e\x7c\xf4\xec\x04\x4e\x4e\x0f\x7e\x3e\x85\xf1\xd8\xd1\xb4\x68\x98\x5c\xa4\xb8\xf3\xef\xe8\xf1\xdd\x19\x41\xa4\x41\x79\x8c\x88\x49\x52\x72\x2e\x49\xd7\x6e\x87\x44\x48\x58\xd6\x54\x97\x12\x38\x93\xa9\xb9\xba\x5f\x19\xd7\x3c\x7b\x06\xec\xde\x6e\x00\xdc\x10\x85\xb7\x95\xb2\x68\xce\x1c\x09\x23\x6b\x74\x27\x18\xfc\x51\x9f\x28\x98\x35\x51\x2d\x35\x1a\x94\x09\x42\x81\x4c\x1a\x82\x90\x22\xc5\x12\x2b\x94\x8c\xe0\x50\x15\x25\x93\x02\x0d\x48\xc4\xd4\xbb\xd0\x7a\x08\x97\x5c\x24\xdc\x9d\x35\x22\x2c\xf1\x42\x2a\xb2\x0c\xb5\xdb\x5c\xb2\xa5\x19\x41\x8a\x25\xca\x54\xc8\x39\x01\x04\x96\x23\x95\xbe\x13\xb9\x1c\x41\x89\xda\xd0\x99\xd2\xbe\x1b\xbc\xb3\x11\x61\xf2\xe8\x1f\x82\x77\x13\x3e\xdf\x6d\x1a\x20\xa7\xb7\xa8\xa4\x48\x98\x45\x50\x0b\x2a\x91\x05\xd3\x42\x55\xc6\xf5\x1d\x29\x31\x37\x40\x61\x59\x8f\xda\xca\x9f\xc6\x4a\x03\xe7\x15\x79\xea\x1a\x12\xcb\x9d\x8f\x0e\x81\x0d\xa3\xf9\xfd\xff\x18\xcd\x2f\x1f\xff\x3c\xe5\xe8\x31\xfe\x51\x0b\x49\xa1\xb1\x5c\x55\x73\x6e\x41\x65\xe0\xba\x97\xe5\x2e\x0c\x74\xcd\x59\x2a\x43\x0b\xe7\x98\x29\x8d\xf7\xe0\x15\x67\xe4\x50\x06\x87\x5c\x53\x99\x16\x8c\xa2\x46\x44\x0d\x33\x45\x50\xa1\x71\xe4\x04\x20\x42\xa6\x55\x01\x0c\x8c\x25\xce\x68\x9d\x33\x8a\x22\x0a\x2b\x67\xa5\x5b\xf9\x7c\x62\x90\x0b\x4b\xcd\x1a\xce\x85\x85\xc2\x29\xfc\xf2\xf1\xaf\x4e\xa4\xc9\x19\x51\xcc\xc1\xe8\xe4\xaa\xed\xd2\x3e\x4e\xf5\xd8\x60\x65\x4c\x54\xca\x79\x40\x48\x53\x67\xa0\x1e\x80\x99\x6d\x7a\xaf\x47\x61\xaf\x45\x81\x55\x64\xaf\x3e\x93\xac\xc0\xb3\xb9\x66\xcb\x60\x76\xa4\x23\x38\x71\x12\x28\x26\x7c\x6f\xc5\x73\xae\xe3\x5b\x36\xeb\x98\x1e\xc8\x6e\xb6\x13\xb8\xab\x24\x72\x50\x0a\x2a\x0b\x65\x81\x9d\x2b\xca\x88\x3a\xb7\x7d\x2a\xb9\x9c\x76\xdb\x52\xab\x05\xf1\xeb\x51\x93\x2e\x35\xdd\x25\x57\x75\xcd\x30\x4d\x18\xb3\xfc\xc2\x09\xb2\xca\x95\x8e\xaf\xa7\x6f\x28\x86\x47\x1b\x15\xc3\x09\x77\xaa\xab\xd2\x69\x4d\x5d\x35\x08\x49\x79\x50\x30\x57\xf1\xd7\xf2\xdf\x65\x3a\xf5\xb5\x25\x30\x03\x45\x45\xc6\xb1\x3a\xdb\xa9\xb4\xa5\xdd\x30\xe5\xf7\x36\x7b\xff\xfc\x97\x8c\x3f\x52\x3e\x8b\x81\x65\x9a\x89\xd4\xf9\x63\xb8\xba\xf4\x5d\x2a\x63\xd4\xd1\xa8\xcf\x14\x75\xa2\x7a\x9f\x5d\x4c\x3a\xce\x7a\x57\x84\xe1\x9e\xb3\xa6\x50\x2e\xb9\x51\x2f\x44\xb2\x0a\x9f\x6b\x0c\x4e\x8d\xa9\x88\xc2\x77\x71\x92\xa4\x7b\xa2\x28\x15\x0c\xcb\x70\xb3\xa8\x75\xde\xb9\x35\x46\x8f\x6f\x82\xe2\x1a\x4a\x9b\xe2\xd4\xa7\xa3\x00\x5a\x25\xc7\x09\xba\xa6\x0e\x2e\xaf\x9a\x75\x97\xa1\xcf\x92\xaa\xa4\x7f\x59\xbf\x83\x2d\xd3\x73\x9a\xcd\x82\xb3\x73\x1a\xf8\x2e\x82\xd5\x88\xd0\xa7\x04\x38\x52\x49\x55\x90\x8a\x1a\x96\x6b\x62\x3a\xaf\xf5\x3e\x40\xb7\xd8\x41\xad\x27\xd9\xfd\x16\x63\x0e\x5e\x1e\x7f\x8d\x41\xeb\x26\xf5\xf7\xbd\xd9\xe7\xf6\x9a\xec\x0c\x16\xcf\x7e\x3a\x6a\xc6\x0a\x93\x68\x51\x5a\xdf\xe6\x9a\x59\x31\x51\x29\x46\x6f\xde\x56\xa8\x97\xf5\x98\xe8\x97\xe3\x9d\x68\x67\x37\xda\xae\x47\xcd\x37\xf5\x5c\xe4\x59\x57\x42\x68\xb5\x35\x48\x1b\xb7\x86\x91\xa6\x99\x66\x39\xc8\x2a\x59\xbf\xb3\x07\x43\x78\x7f\xf7\xce\xe7\x4f\xb0\x35\x08\xef\x4b\xb6\x00\x16\x0e\x23\x64\x09\x5f\xa7\xa0\x1f\xf5\xee\x01\x4d\x50\x35\x36\x51\xc9\x2c\x77\x0d\x94\x24\x96\x39\x95\xcf\x20\xfe\xfd\xd7\x38\x1e\x85\xe1\x10\xa6\x53\x2a\x1e\x9a\x66\x6f\x27\x69\x25\x3e\x78\x00\x57\x02\xb9\x32\xd6\x51\x5f\xb1\xb7\x07\x1d\x62\x7f\xce\x0c\x5f\x89\xbc\xef\x75\x76\xcc\xa4\x1f\xbd\xad\x61\xcb\x07\xfe\x38\x85\x29\xb9\x77\xc5\x39\x1c\xb5\x37\x07\xf4\xd6\xa3\xde\xeb\x6e\xc3\x5f\x9c\xa2\x69\x08\x0f\x3b\x2a\xa8\xda\x48\xc1\xce\x10\x1e\x86\xbf\x85\xc3\x27\x37\x8b\x77\xec\xad\xa2\x28\x47\x39\xb7\x1c\x9e\x76\x74\xef\xf7\xb5\xad\x91\x34\x46\xec\x53\x0b\xca\x0d\x76\x95\x7c\xfe\xe4\xf0\x6e\xc8\xfa\xee\xd5\x3f\x67\x84\xbf\x7c\x91\x65\xa6\x6b\x49\xa4\xea\x83\xc1\x30\xb2\xaa\x7c\xe2\xc6\xd7\xeb\xbc\x1e\x8f\x61\x94\x90\x8b\x17\xd7\x62\xdd\xcd\xf0\xad\x41\x50\xa7\x45\x2e\x80\x05\x2e\x79\x0a\x1a\x86\x0e\x5d\xc9\x0d\x02\x37\xf5\x2d\x30\x70\xc0\xf4\x59\xbc\x68\x96\xa6\x9e\x30\xf4\x84\x7d\x04\x57\x86\x84\xee\x7b\x6e\x04\xee\x8b\x84\x72\x8f\xc6\x47\xea\x91\x38\x78\x4f\xc9\xab\xf2\xfc\x54\x95\xfb\x3d\x27\x3f\x8c\x60\x67\x7b\x7b\xfb\x46\x59\x1a\x6d\xa5\xe5\x4d\x40\xd2\xef\x43\x8f\xe5\x43\xbb\xf6\x8b\xfa\xf2\xee\x9d\xfa\xd1\xad\xa0\xb8\xfd\x4e\x8a\x9b\xaf\xd8\xbf\x03\x00\x00\xff\xff\x6c\xaf\x8d\x26\xd7\x0e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3799, mode: os.FileMode(493), modTime: time.Unix(1455275674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xeb\x6e\xdb\x38\x16\xfe\xbd\x05\xfa\x0e\x5c\xee\x02\x6a\x80\x48\x72\x9c\x38\x71\x53\xcb\x8b\xa0\x17\xa0\xc0\x16\x0d\x66\x52\x0c\x8a\x99\xa2\xa0\x25\x4a\x62\x42\x89\x2a\x49\xd9\xf1\x5c\xde\x7d\x0e\x49\xc9\xb1\x65\x39\x89\x67\x5a\xa0\x3f\xc6\x40\x10\x5e\xbe\x73\xfb\xce\xe1\x4d\x93\x7f\xbf\x7a\xff\xf2\xea\xe3\xe5\x6b\x94\xeb\x82\x4f\x9f\x3e\x99\x98\xff\x88\x93\x32\x8b\x30\x2d\x31\x8c\x20\x34\xc9\x29\x49\xa0\xf5\x2f\x04\xed\x82\x6a\x02\x60\x5d\xf9\xf4\x4b\xcd\xe6\x11\x7e\x29\x4a\x4d\x4b\xed\x5f\x2d\x2b\x8a\x51\xec\x7a\x11\xd6\xf4\x56\x87\x46\xd9\x0b\x14\xe7\x44\x2a\xaa\xa3\x5a\xa7\xfe\x18\xa3\xd0\x2a\xb5\xbf\x89\x66\x9a\xd3\xe9\x5b\xed\x29\xf4\x51\xd4\xe8\x7d\xc9\x59\x49\x27\xa1\x1b\x7e\xfa\xe4\x0e\x08\xe3\x37\x48\x52\x1e\x79\x4a\x2f\x39\x55\x39\xa5\x1a\x55\x92\xa6\x54\xc7\xb9\x87\x72\x68\x45\x9e\x71\x4b\x9d\x87\x21\xb9\x26\xb7\x41\x26\x44\xc6\x29\xa9\x98\x0a\x62\x51\xd8\xb1\x90\xb3\x99\x0a\x21\xb6\x9a\x13\xf9\xb9\x20\x9a\x4a\x46\x78\x78\x14\x0c\x82\x41\x3b\xec\xb7\xc3\x41\xc1\xca\x20\x56\xca\x9b\xf6\x78\x81\xef\xbc\xc0\xce\x38\x26\x0a\x62\x54\x21\x48\x84\x76\xd2\xc8\xe2\x70\x7f\xe1\x14\x18\xf4\xc9\x82\x2a\x51\xd0\xd6\x87\x6d\x3d\x77\x01\x43\xbc\x46\x44\x75\x03\x06\xb1\xff\xa5\xa4\x60\x7c\x19\xfd\x44\x39\x4f\x39\x98\xfb\xfd\x42\xce\xc5\xf9\xc9\x60\x70\x78\x06\x7f\xf0\x9f\x69\xc2\x59\x6c\x7a\xae\xe5\x75\x39\xf6\x90\x86\xbc\x46\x9e\x4d\xe7\x26\x1b\x68\x62\x61\xeb\x69\xb2\xbf\x9f\xcb\xec\x97\xf3\x98\x0b\x72\xf3\xe9\xd0\x74\xfc\xb6\x1d\xb4\x6d\xf4\xdb\xa6\x84\xf9\x25\x4c\x55\x9c\x2c\xcf\x51\x29\x4a\xfa\x62\x73\xfe\x8f\x35\x9b\x61\x6b\x14\x9a\x4d\x5d\x42\xd5\xce\x44\xb2\x44\xa0\x9e\x54\x55\x84\x25\xcd\x98\xd2\x92\x68\x26\xca\x8b\xaa\xc2\x0e\x62\xc0\x54\x22\x96\x44\xd8\x35\x9b\xe2\x4e\xd8\x1c\xc5\x1c\x12\x10\xe1\xa6\x78\x71\x13\xa3\x9d\x32\x78\x2e\x32\x81\xa7\x13\xd2\x24\x2b\x87\xcc\xe0\x29\x7a\xab\x15\xd4\x6c\xe0\x6a\x16\xbc\x21\xd3\x49\x08\x12\xeb\xc2\x8d\x5e\xc5\xb2\xd2\x5f\x48\x52\xe1\x15\x7b\x2b\x65\xa0\x9b\xc1\x3a\x9b\xb0\x16\x9c\x12\x94\x12\x9f\x8b\xf8\x06\x46\x43\x36\xfd\xbf\xc8\x10\x2b\x8d\xfa\x46\xf1\xca\x48\xdb\x72\x44\x50\x69\xe3\x84\xee\x9a\xe5\xb4\xe6\x5c\xc5\x92\xd2\x32\x15\xb2\x58\x05\x66\x3a\x68\x95\x0d\x58\xd2\xb9\x80\x30\x2b\xa1\xa0\x20\x49\x6c\x78\x6b\x59\x04\x9a\x60\x37\x58\x8a\x5a\x1b\x7a\x78\x5d\x94\x1b\xec\x40\x55\xdd\xae\xe6\xa5\x58\x60\xd4\xf4\xfc\x5b\xd5\x15\xd8\x10\x8a\xf0\x68\xb0\x4b\xf3\x0a\x5c\x24\x3e\x2b\x2b\x50\x66\x12\x43\x80\x65\x39\xdd\x2e\x9c\x09\x27\x33\xca\xa7\x1f\x14\x95\x25\x29\x60\xf3\x70\xfd\x1e\xa0\xd5\x65\xc2\x2e\x44\x62\x96\xa1\xa3\x1e\x19\xa9\x55\xc7\x56\xbb\xdd\xbc\x80\x89\x5a\x8b\x54\xc4\xb5\xea\xfa\x15\x3e\xe8\xd8\x46\x0e\x80\x6c\x9f\x4a\x29\x80\x4a\x30\xae\x16\x0c\xb6\x2c\x37\xfc\xda\x8c\xaa\xa0\x75\xa4\x4d\x88\x41\xe5\x62\xd1\x83\xe9\x0b\xcb\x98\x5a\xe9\xf5\x17\x39\xb5\xc9\x83\xcd\x59\xd2\x04\x4f\x7f\x68\x5a\xc1\x7a\x71\xde\x45\xe2\xc6\xfe\x06\xef\xaf\x0b\xc2\xf8\x1e\xa4\x53\x83\x6f\x49\x6f\x3a\x8e\x74\xd7\xf9\xd6\x5c\x57\x80\x5b\x08\x99\x3c\x40\xf7\x0a\xf6\xfd\x31\x7e\xd9\xb8\xb6\x07\xe9\x6b\x41\x5b\xde\xef\xfa\x8e\xfa\x5d\xd1\xfe\xc3\xfe\x4e\xf6\xcd\x4d\x27\x65\xb2\xb0\xa7\xcc\x5f\x48\xc5\x1c\x8e\xdb\xc4\x0a\x77\x93\xb2\x3e\xf3\x7d\xa7\x67\xcd\xd3\x6f\x9e\xa8\x2e\x6a\xfb\xf8\xd9\x71\x88\xf4\x1e\x53\x7d\xee\xaa\x8a\x94\x16\x09\xc7\xae\x69\xef\x0a\xa9\x63\xaf\x39\xce\x4e\x07\xbd\x4a\x1f\x55\x5a\x16\xe9\x2a\x68\xe8\xbf\x81\x03\x58\x48\x73\xf8\x00\x61\x9a\xc5\x96\x5f\xa8\xb6\xe4\x9e\xa3\xcd\x2a\xe8\x56\x9a\x16\xba\x32\x62\x6d\x7d\xad\xfa\x7d\x7e\x3e\x5c\x49\x2b\xe8\x17\x69\xb4\xa0\x39\x95\xca\x5e\x14\x4e\x31\xb2\x45\x05\x92\x52\x52\x7b\x7b\xf0\x39\x9d\x1b\x17\xde\x61\xa4\xd8\xaf\x60\x7b\x38\x80\xd3\x1e\x4a\x85\x44\x58\x98\xc8\xe0\xd2\x7a\x34\x3c\x3e\x69\xff\xda\x6b\x70\xef\x1c\xa4\xc3\x99\xec\xf5\x7b\xbb\x76\x1e\x93\xcc\xdd\xf5\xb5\x79\xc9\xea\xd4\xdb\x3d\x25\xf4\xa0\x45\x20\x78\x56\x6b\x0d\xb9\x74\x8b\x5a\xd5\xb3\x82\xc1\x2d\xa3\x59\x9c\x30\x5d\x49\x56\x10\xb9\xc4\xd3\x1f\xe1\xbe\x88\xea\xca\x26\xc5\xc9\xec\x61\x6c\xe3\x12\x1a\x9a\x55\x6b\xaf\x88\x6d\x3c\xd0\x86\x0b\x21\xab\x34\x52\x32\xde\xf3\xc9\x74\xad\xe0\xad\x74\x12\x8c\xdb\x7e\x70\x0d\xef\x01\x70\xc0\xea\x9b\x7e\x4d\xcd\x3e\x29\x99\x79\x88\xd9\x07\xd0\x37\xb4\x02\x0f\xbd\xaf\x6b\xe2\x51\xaf\xca\x7e\x6b\x4d\xce\x5a\x6e\x61\x15\xd7\x9c\x3e\xf3\x3a\xaf\x19\x0f\xde\x54\x5e\x99\xbd\x6b\xf4\x79\x87\x5e\x21\x4a\x01\x35\x10\xc3\x56\xea\xd6\x89\xf7\xe9\xe0\xae\x1c\x02\x7b\x4e\x65\xcf\xd2\xba\xb4\x4b\xf3\xd9\x7f\x8b\xe4\x2a\xa7\xe0\x46\x76\x29\xc5\x9c\xc1\xbb\xe1\xa0\xfb\x1e\xdb\x86\x04\x09\x4d\x61\x4f\xb8\x24\x9c\x6a\x0d\x4e\xcd\x78\x4d\x99\xca\xc1\x99\x9e\xa7\x9c\x37\x1a\x78\xe7\xc8\xfb\x4f\x7a\x96\xce\xd2\xc4\x3b\xec\x41\x1c\x0d\x1c\x64\x06\xef\x16\xda\x0f\x19\x36\x90\x31\x8d\xc7\x74\xd8\x0b\x39\x6e\x20\xa3\x11\x49\x92\xe3\x5e\xc8\x49\x03\x39\x8e\xc9\x51\xdc\x6f\x68\xd4\x42\x06\xcf\x8f\x66\xb3\x5e\xc8\x69\x03\x19\x92\x33\x4a\xfa\x0d\x9d\xb5\x90\xe3\xd3\xd9\x98\xf4\x42\xc6\x0d\xe4\x28\x19\x8d\xcf\xfa\x23\x7a\xde\x42\xce\x4e\x20\xa8\x5e\xc8\x45\xcb\xdd\x3d\xf4\x5e\x0c\x1f\xe6\xf7\xe2\x11\xd4\x5c\x3c\x22\x2a\x73\x5e\x48\xa2\xf4\x2b\x9a\x92\x9a\xeb\x97\x82\x0b\x69\x64\x38\xcb\x72\x7d\xbf\x04\x91\x37\x16\xae\x0c\x7e\x34\x40\x10\x19\x02\xcf\x11\xe4\x15\x81\x77\xc8\x84\x8a\x4c\x2c\xc8\x3a\xdb\xf9\x28\x70\xf0\xe2\xc1\xaa\x85\x23\xb4\x80\x6a\x4d\x9c\x6b\xde\xc1\xb6\x33\x41\xb3\xe9\x6e\x55\xf6\x1a\xd6\x5a\xda\xb1\x3b\x60\x9d\x33\x99\x54\x44\xea\x65\xf3\x0d\xc7\xad\x41\x3f\xa3\x70\x84\x12\x38\xc9\xc3\xeb\x76\x0c\xd6\x3d\xde\xb5\xcb\xec\xa3\xe7\xf3\x87\xab\x37\xe3\xfd\x94\xb5\xdb\x90\x53\xd0\xe9\x76\x55\x99\x60\xcd\x07\x15\xf7\x69\xc1\x7d\x17\xfc\x33\x00\x00\xff\xff\x12\x8c\x2e\x31\x29\x14\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 5161, mode: os.FileMode(420), modTime: time.Unix(1455286880, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

