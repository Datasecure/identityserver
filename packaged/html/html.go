// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// login.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xfd\x6e\xd4\x46\x10\xff\x1f\x89\x77\x18\x4c\x84\xef\xc4\x9d\x9d\x84\xb4\x54\xe1\xee\x50\x94\xa0\x2a\x12\x2a\xa8\x89\x84\x50\x3f\xa2\x8d\x3d\xbe\x5d\x62\xef\x9a\xdd\xf5\x85\x13\x45\xe2\x41\x5a\x89\x67\xe1\x51\x78\x92\xce\x7a\xed\x9c\x9d\x4b\xda\xa3\xa8\xd2\x9d\xbc\x1f\xf3\xf9\x9b\x0f\x8f\x27\xf7\x8e\x5e\x1c\x9e\xbe\x7e\xf9\x0c\xb8\x2d\xf2\xd9\xdd\x3b\x13\xf7\x84\x9c\xc9\xf9\x34\x40\x19\xd4\x27\xc8\x52\x7a\x02\x4c\x0a\xb4\x8c\x08\x6d\x39\xc6\xb7\x95\x58\x4c\x83\x43\x25\x2d\x4a\x3b\x3e\x5d\x96\x18\x40\xe2\x77\xd3\xc0\xe2\x3b\x1b\x3b\x41\x4f\x20\xe1\x4c\x1b\xb4\xd3\xca\x66\xe3\x1f\x02\x88\xbd\x20\x2b\x6c\x8e\xb3\x63\x1b\x1a\x78\xad\x2a\x78\x21\x73\x21\x71\x12\xfb\xe3\x9a\x82\x0e\x2e\x40\x63\x3e\x0d\x8c\x5d\xe6\x68\x38\xa2\x0d\x80\x6b\xcc\xa6\x01\x33\x24\xd1\xc4\x89\x31\x71\x7d\x19\xd1\x2a\x88\xbf\x8a\x2f\x23\x53\xc7\xec\x12\x8d\x2a\x30\x2a\x84\x5c\x13\x51\x73\x84\xce\xd7\xfd\xb8\xa6\x36\xd1\x5c\xa9\x79\x8e\xac\x14\x26\x4a\x54\xe1\xc4\x3c\xcd\x58\x21\xf2\xe5\xf4\x15\xe6\x79\x96\x93\xa6\x3f\x0e\xf4\x42\xed\xef\x6d\x6f\x8f\x1e\xd3\x9f\x9e\xc2\xb2\x5c\x24\x6e\xe7\x57\x61\x6d\x5b\xb8\xb2\x2d\x04\x4b\xd8\x4d\xc3\x1a\x32\x12\x19\x3a\xc4\xe3\x06\xf2\xc9\xb9\x4a\x97\x6d\x08\x50\x83\x48\xa7\x81\x5f\x06\xde\xd4\x54\x2c\x20\xc9\xc9\xaf\x69\xd0\x80\xef\x2f\x9a\x2b\x47\x9f\xab\xb9\x0a\x66\x13\xd6\x60\x70\x3f\x98\xc1\xb1\x35\x84\x7a\xe4\x51\x87\x49\xcc\x66\x93\x98\xc8\xbb\x9c\x8d\x50\x23\xe6\x72\x7c\xa9\x59\xd9\x8a\xa5\xeb\x56\x92\xc6\xb9\x30\xd6\x99\x32\x11\x2d\x7d\xc6\x20\x63\xe3\xca\xa0\x1e\x97\x79\x65\xe8\x2a\x16\xb3\x13\x12\x02\x55\xe9\xf4\xac\x09\x21\xeb\x84\x5c\x97\x90\xab\xe4\xc2\x33\x3f\x57\x73\x10\x72\xc5\xbb\xb2\xb4\x5d\x79\xb4\x50\xd3\x92\x36\xf7\xc6\x63\x38\x79\x7e\x7c\xf4\xec\x04\x4e\x4e\x0f\x7e\x3e\x85\xf1\xd8\xd1\xb4\x68\x98\x5c\xa4\xb8\xf3\xef\xe8\xf1\xdd\x19\x41\xa4\x41\x79\x8c\x88\x49\x52\x72\x2e\x49\xd7\x6e\x87\x44\x48\x58\xd6\x54\x97\x12\x38\x93\xa9\xb9\xba\x5f\x19\xd7\x3c\x7b\x06\xec\xde\x6e\x00\xdc\x10\x85\xb7\x95\xb2\x68\xce\x1c\x09\x23\x6b\x74\x27\x18\xfc\x51\x9f\x28\x98\x35\x51\x2d\x35\x1a\x94\x09\x42\x81\x4c\x1a\x82\x90\x22\xc5\x12\x2b\x94\x8c\xe0\x50\x15\x25\x93\x02\x0d\x48\xc4\xd4\xbb\xd0\x7a\x08\x97\x5c\x24\xdc\x9d\x35\x22\x2c\xf1\x42\x2a\xb2\x0c\xb5\xdb\x5c\xb2\xa5\x19\x41\x8a\x25\xca\x54\xc8\x39\x01\x04\x96\x23\x95\xbe\x13\xb9\x1c\x41\x89\xda\xd0\x99\xd2\xbe\x1b\xbc\xb3\x11\x61\xf2\xe8\x1f\x82\x77\x13\x3e\xdf\x6d\x1a\x20\xa7\xb7\xa8\xa4\x48\x98\x45\x50\x0b\x2a\x91\x05\xd3\x42\x55\xc6\xf5\x1d\x29\x31\x37\x40\x61\x59\x8f\xda\xca\x9f\xc6\x4a\x03\xe7\x15\x79\xea\x1a\x12\xcb\x9d\x8f\x0e\x81\x0d\xa3\xf9\xfd\xff\x18\xcd\x2f\x1f\xff\x3c\xe5\xe8\x31\xfe\x51\x0b\x49\xa1\xb1\x5c\x55\x73\x6e\x41\x65\xe0\xba\x97\xe5\x2e\x0c\x74\xcd\x59\x2a\x43\x0b\xe7\x98\x29\x8d\xf7\xe0\x15\x67\xe4\x50\x06\x87\x5c\x53\x99\x16\x8c\xa2\x46\x44\x0d\x33\x45\x50\xa1\x71\xe4\x04\x20\x42\xa6\x55\x01\x0c\x8c\x25\xce\x68\x9d\x33\x8a\x22\x0a\x2b\x67\xa5\x5b\xf9\x7c\x62\x90\x0b\x4b\xcd\x1a\xce\x85\x85\xc2\x29\xfc\xf2\xf1\xaf\x4e\xa4\xc9\x19\x51\xcc\xc1\xe8\xe4\xaa\xed\xd2\x3e\x4e\xf5\xd8\x60\x65\x4c\x54\xca\x79\x40\x48\x53\x67\xa0\x1e\x80\x99\x6d\x7a\xaf\x47\x61\xaf\x45\x81\x55\x64\xaf\x3e\x93\xac\xc0\xb3\xb9\x66\xcb\x60\x76\xa4\x23\x38\x71\x12\x28\x26\x7c\x6f\xc5\x73\xae\xe3\x5b\x36\xeb\x98\x1e\xc8\x6e\xb6\x13\xb8\xab\x24\x72\x50\x0a\x2a\x0b\x65\x81\x9d\x2b\xca\x88\x3a\xb7\x7d\x2a\xb9\x9c\x76\xdb\x52\xab\x05\xf1\xeb\x51\x93\x2e\x35\xdd\x25\x57\x75\xcd\x30\x4d\x18\xb3\xfc\xc2\x09\xb2\xca\x95\x8e\xaf\xa7\x6f\x28\x86\x47\x1b\x15\xc3\x09\x77\xaa\xab\xd2\x69\x4d\x5d\x35\x08\x49\x79\x50\x30\x57\xf1\xd7\xf2\xdf\x65\x3a\xf5\xb5\x25\x30\x03\x45\x45\xc6\xb1\x3a\xdb\xa9\xb4\xa5\xdd\x30\xe5\xf7\x36\x7b\xff\xfc\x97\x8c\x3f\x52\x3e\x8b\x81\x65\x9a\x89\xd4\xf9\x63\xb8\xba\xf4\x5d\x2a\x63\xd4\xd1\xa8\xcf\x14\x75\xa2\x7a\x9f\x5d\x4c\x3a\xce\x7a\x57\x84\xe1\x9e\xb3\xa6\x50\x2e\xb9\x51\x2f\x44\xb2\x0a\x9f\x6b\x0c\x4e\x8d\xa9\x88\xc2\x77\x71\x92\xa4\x7b\xa2\x28\x15\x0c\xcb\x70\xb3\xa8\x75\xde\xb9\x35\x46\x8f\x6f\x82\xe2\x1a\x4a\x9b\xe2\xd4\xa7\xa3\x00\x5a\x25\xc7\x09\xba\xa6\x0e\x2e\xaf\x9a\x75\x97\xa1\xcf\x92\xaa\xa4\x7f\x59\xbf\x83\x2d\xd3\x73\x9a\xcd\x82\xb3\x73\x1a\xf8\x2e\x82\xd5\x88\xd0\xa7\x04\x38\x52\x49\x55\x90\x8a\x1a\x96\x6b\x62\x3a\xaf\xf5\x3e\x40\xb7\xd8\x41\xad\x27\xd9\xfd\x16\x63\x0e\x5e\x1e\x7f\x8d\x41\xeb\x26\xf5\xf7\xbd\xd9\xe7\xf6\x9a\xec\x0c\x16\xcf\x7e\x3a\x6a\xc6\x0a\x93\x68\x51\x5a\xdf\xe6\x9a\x59\x31\x51\x29\x46\x6f\xde\x56\xa8\x97\xf5\x98\xe8\x97\xe3\x9d\x68\x67\x37\xda\xae\x47\xcd\x37\xf5\x5c\xe4\x59\x57\x42\x68\xb5\x35\x48\x1b\xb7\x86\x91\xa6\x99\x66\x39\xc8\x2a\x59\xbf\xb3\x07\x43\x78\x7f\xf7\xce\xe7\x4f\xb0\x35\x08\xef\x4b\xb6\x00\x16\x0e\x23\x64\x09\x5f\xa7\xa0\x1f\xf5\xee\x01\x4d\x50\x35\x36\x51\xc9\x2c\x77\x0d\x94\x24\x96\x39\x95\xcf\x20\xfe\xfd\xd7\x38\x1e\x85\xe1\x10\xa6\x53\x2a\x1e\x9a\x66\x6f\x27\x69\x25\x3e\x78\x00\x57\x02\xb9\x32\xd6\x51\x5f\xb1\xb7\x07\x1d\x62\x7f\xce\x0c\x5f\x89\xbc\xef\x75\x76\xcc\xa4\x1f\xbd\xad\x61\xcb\x07\xfe\x38\x85\x29\xb9\x77\xc5\x39\x1c\xb5\x37\x07\xf4\xd6\xa3\xde\xeb\x6e\xc3\x5f\x9c\xa2\x69\x08\x0f\x3b\x2a\xa8\xda\x48\xc1\xce\x10\x1e\x86\xbf\x85\xc3\x27\x37\x8b\x77\xec\xad\xa2\x28\x47\x39\xb7\x1c\x9e\x76\x74\xef\xf7\xb5\xad\x91\x34\x46\xec\x53\x0b\xca\x0d\x76\x95\x7c\xfe\xe4\xf0\x6e\xc8\xfa\xee\xd5\x3f\x67\x84\xbf\x7c\x91\x65\xa6\x6b\x49\xa4\xea\x83\xc1\x30\xb2\xaa\x7c\xe2\xc6\xd7\xeb\xbc\x1e\x8f\x61\x94\x90\x8b\x17\xd7\x62\xdd\xcd\xf0\xad\x41\x50\xa7\x45\x2e\x80\x05\x2e\x79\x0a\x1a\x86\x0e\x5d\xc9\x0d\x02\x37\xf5\x2d\x30\x70\xc0\xf4\x59\xbc\x68\x96\xa6\x9e\x30\xf4\x84\x7d\x04\x57\x86\x84\xee\x7b\x6e\x04\xee\x8b\x84\x72\x8f\xc6\x47\xea\x91\x38\x78\x4f\xc9\xab\xf2\xfc\x54\x95\xfb\x3d\x27\x3f\x8c\x60\x67\x7b\x7b\xfb\x46\x59\x1a\x6d\xa5\xe5\x4d\x40\xd2\xef\x43\x8f\xe5\x43\xbb\xf6\x8b\xfa\xf2\xee\x9d\xfa\xd1\xad\xa0\xb8\xfd\x4e\x8a\x9b\xaf\xd8\xbf\x03\x00\x00\xff\xff\x6c\xaf\x8d\x26\xd7\x0e\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3799, mode: os.FileMode(493), modTime: time.Unix(1455275674, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x79\x6f\xdb\x38\x16\xff\x7b\x0b\xf4\x3b\x70\xb9\x8b\x55\x03\xc4\x92\xe3\x5c\x6e\x6a\xb9\x08\x7a\x00\x05\xb6\x68\x80\x49\x31\x28\x66\x8a\x82\x96\x9e\x24\x26\x94\xa8\x92\x94\x13\x4f\xa7\xdf\x7d\x1e\x29\xc9\xf1\x21\x3b\xf1\xb4\x19\x03\x41\x78\xbc\xeb\xf7\x2e\x92\x1a\xfd\xfb\xf5\x87\x57\x97\x9f\x2e\xde\x90\xcc\xe4\x62\xfc\xf4\xc9\xc8\xfe\x27\x82\x15\x69\x48\xa1\xa0\xb8\x42\xc8\x28\x03\x16\xe3\xe8\x5f\x04\xc7\x39\x18\x86\xc4\xa6\xec\xc1\xd7\x8a\x4f\x43\xfa\x4a\x16\x06\x0a\xd3\xbb\x9c\x95\x40\x49\x54\xcf\x42\x6a\xe0\xd6\x04\x56\xd8\x0b\x12\x65\x4c\x69\x30\x61\x65\x92\xde\x90\x92\xc0\x09\x75\xbf\x91\xe1\x46\xc0\xf8\x9d\xf1\x34\xf9\x24\x2b\xf2\xa1\x10\xbc\x80\x51\x50\x2f\x3f\x7d\x72\x47\x88\xeb\xd7\x44\x81\x08\x3d\x6d\x66\x02\x74\x06\x60\x48\xa9\x20\x01\x13\x65\x1e\xc9\x70\x14\x7a\xd6\x2c\x7d\x16\x04\xec\x8a\xdd\xfa\xa9\x94\xa9\x00\x56\x72\xed\x47\x32\x77\x6b\x81\xe0\x13\x1d\x20\xb6\x4a\x30\xf5\x25\x67\x06\x14\x67\x22\x38\xf0\xfb\x7e\xbf\x5d\xee\xb5\xcb\x7e\xce\x0b\x3f\xd2\xda\x1b\x77\x58\x41\xef\xac\xa0\xb5\x72\xca\x34\x62\xd4\x01\x72\x04\x6e\xd3\xf2\xd2\x60\x77\xe6\x04\x3d\xd8\x63\x37\xa0\x65\x0e\xad\x0d\xeb\x72\xee\x00\x23\x5e\xcb\xa2\x57\x01\x23\xdb\xcb\x84\xe5\x5c\xcc\xc2\x5f\x41\x88\x44\xa0\xba\x3f\xcf\xd5\x54\x9e\x1d\xf5\xfb\xfb\xa7\xf8\x87\xff\xb9\x61\x82\x47\x76\x56\x8f\xbc\x55\x1f\x7b\xc4\x60\x5c\x43\xcf\x85\x73\xd9\x1b\x64\xe4\xc8\x16\xc3\xe4\x7e\xbf\x15\xe9\xef\x67\x91\x90\xec\xfa\xf3\xbe\x9d\xf4\xda\xb1\xdf\x8e\xc9\xb7\x65\x0e\xfb\x8b\xb9\x2e\x05\x9b\x9d\x91\x42\x16\xf0\x62\x79\xff\xfb\x82\xce\xa0\x55\x8a\xc3\x26\x2f\x31\x6b\x27\x32\x9e\x11\x14\xcf\xca\x32\xa4\x0a\x52\xae\x8d\x62\x86\xcb\xe2\xbc\x2c\x69\x4d\x62\x89\x41\x11\x1e\x87\xb4\x1e\x36\xc9\x1d\xf3\x29\x89\x04\x06\x20\xa4\x4d\xf2\xd2\x06\xa3\xdb\xb2\xf4\x42\xa6\x92\x8e\x47\xac\x09\x56\x86\x91\xa1\x63\xf2\xce\x68\xcc\x59\xbf\xce\x59\xb4\x86\x8d\x47\x01\x72\x2c\x32\x37\x72\x35\x4f\x8b\xde\x8d\x62\x25\x9d\x7b\x6f\x2e\x0c\x65\x73\xac\xb3\x11\x6f\x89\x13\x46\x12\xd6\x13\x32\xba\xc6\xd5\x80\x8f\xff\x2f\x53\xc2\x0b\x2b\xbe\x11\x3c\x57\xd2\x8e\x6a\x47\x80\x72\x38\x71\xba\xa0\x39\xa9\x84\xd0\x91\x02\x28\x12\xa9\xf2\x39\x30\x3b\x21\xf3\x68\x60\x49\x67\x12\x61\x96\x52\x63\x42\xb2\xc8\xfa\xad\xf5\x22\xba\x09\xbb\xc1\x4c\x56\xc6\xba\x47\x54\x79\x41\x49\xc1\x72\xa8\x41\x55\xa5\x13\x4b\x16\x31\xa3\x58\x5e\x70\x83\x49\x34\x27\xf0\x35\xa8\x29\x28\xcd\x63\x98\x62\x96\xc5\x2e\x32\xa0\x94\x54\x9a\x84\xe4\x1b\xe5\x85\x5b\xb6\x19\x6f\x32\x5e\xa4\xf4\x8c\x18\x55\xc1\x77\x6f\xdd\xa3\x98\xc6\xb7\x73\x83\x94\xbc\xa1\xa4\x99\xf5\x6e\xf5\xdc\xc2\xc5\x1c\x6d\x99\x42\x7a\xdc\x5f\x83\x32\x5e\xce\xb3\x51\x1e\xa3\xed\x25\x0a\xb3\x99\xc0\x30\xac\x6a\xbc\x9e\xa9\x23\xc1\x26\x20\xc6\x1f\x11\x94\xf5\xc4\x28\xa8\xe7\x1d\x84\x4e\x96\x75\x48\x2e\x63\x5b\xf7\x75\xac\x09\x6a\xc9\xd9\xad\x80\x22\x35\x59\x48\x0f\xd1\x2c\x2c\xf3\x76\x3a\xa0\x58\x82\xd8\x59\x15\xc4\x8d\xa3\x1b\x2e\x57\x87\xae\xad\x62\x8c\x2a\x23\x13\x19\x55\xba\x4b\x6b\x13\x84\x1c\xb4\x66\x29\xe8\xc5\x48\x6d\x09\x84\x33\xcb\xca\xed\x65\xb8\x6b\xd3\x50\x68\x58\x75\x50\xa7\x86\x90\xc6\x55\x89\xbd\x03\xfb\x66\xd5\xf8\x84\x8e\x2f\x33\xae\x49\x3b\x25\x38\x66\x42\x61\x92\xce\x88\x61\xd7\x50\x2c\x86\x75\x49\x72\xc7\xfa\x28\xe8\x8c\xca\x0f\x44\xee\x4d\xce\xb8\xd8\x21\x6c\x60\xe9\xd7\xc2\xd2\xac\xd6\x61\xa9\x27\x8f\x6e\xf9\x05\x16\xf5\x8d\x54\xf1\x0e\xc6\x97\x0d\xcb\x9a\xfd\x77\x1b\x35\x84\xf9\xfc\x1f\x43\x61\x2f\x0b\x09\x57\xb9\xcb\xc2\xbf\x01\xe9\x2e\x85\x37\x82\x5b\x24\xf9\x41\x98\xab\xb9\xb9\xde\x8e\x36\x34\x95\xce\xb6\xd5\x85\x53\x97\xac\x70\x94\xd8\xf6\xec\x78\x53\x71\xaf\xf6\xe3\xba\xbd\x9d\xf4\xbb\xab\xf5\xa1\xc1\x59\x09\xd2\xa0\xf7\x16\x4f\x02\xa9\x6c\xaf\xc9\xf0\x50\xb4\xf5\x8d\x6e\xc4\x98\xc5\x5b\x5a\xde\xc6\x98\x19\x69\x4a\xcb\xba\xda\xfd\x4e\x96\x9a\xdf\xc9\x5a\x20\xe7\x7c\xdb\x94\x3d\x7a\xc7\xdb\xa0\x29\x6c\x4f\xae\x3b\x2b\xcf\x0b\xd2\xac\x39\x4f\x91\x1b\xa6\x49\xca\xa7\x9b\x5b\xde\x5c\xf4\x96\xfd\x0d\xb9\xd9\x49\xfa\x55\x39\xbd\x0e\xb3\x3d\xc6\xd1\xa5\x0e\x2e\x72\x2a\x05\xee\x6c\xef\x09\x98\xda\x98\xbc\xa7\x44\xf3\x3f\x10\xc5\xa0\x8f\x67\x10\xba\x86\x85\x14\x81\xd8\x80\xe3\xa5\xd2\x62\x0a\x9a\x3b\x8e\x74\x77\x9c\x97\x1a\xf0\x2a\x61\xc2\x83\xc1\xe1\xd1\xe2\xdf\xff\xb8\xd6\x15\xa8\x70\xe9\x42\xd4\xde\x6c\xb7\x09\x3c\xdb\x4d\x22\x96\x45\x8d\xee\x81\x27\x87\x5b\xbf\xa7\xa8\x5a\xbe\xf5\x3a\x5f\xbe\x6d\xad\xd4\xfd\x96\x52\xbe\x57\x23\xc6\x72\x52\x19\x83\xb5\x54\x77\x24\x5d\x4d\x72\x8e\x87\x7a\x73\x65\xc3\x6d\xc5\xb8\xc6\x0a\xc0\x51\xa9\x78\xce\xd4\x8c\x8e\x7f\xc1\x8c\x26\x55\xe9\x32\xa1\xe6\xde\x41\xed\xd2\x2d\x2a\xb0\x65\xe1\x6e\x8d\x2d\x32\x1c\xe3\x1d\x91\x97\x86\x68\x15\xed\xf8\x8a\xba\xd2\xf8\x7c\x3a\xf2\x87\xed\xdc\xbf\xd2\xf6\xd6\x56\xcb\x1b\xff\x4c\xc9\x3d\x56\x70\xfb\x36\x73\x6f\xa2\xc7\xd3\xd2\x36\x91\x47\x56\xc3\xf0\x89\xf9\x73\x55\x3c\xe8\x3d\xdb\xad\xad\x49\x8d\x36\x84\xd8\xb2\x2b\x01\xcf\xbc\x95\x77\x94\x87\xaf\x39\xaf\x48\xdf\x37\xf2\xbc\x7d\x3b\x69\xbc\x85\x93\x5c\x16\x12\xf3\x2e\x82\xd8\xaf\xab\xd4\xfb\xbc\x77\x97\x82\xbe\x3b\xeb\xd3\x67\x49\x55\xb8\x1e\xf4\xec\xbf\x79\x7c\x99\x01\xda\x94\x5e\x28\x39\xc5\x06\xac\xf6\x56\x9f\x85\xeb\x24\x7e\x0c\x09\x76\x82\x0b\x26\xc0\x18\xb4\x70\x22\x2a\xe0\x3a\x43\xcb\x3a\x5e\x94\xde\x71\xdf\x3b\x23\xde\x7f\x92\xd3\x64\x92\xc4\xde\x7e\x07\xc5\x41\xbf\x26\x99\xe0\xf3\x09\xba\x49\x06\x0d\xc9\x10\xa2\x21\x0c\x3a\x49\x0e\x1b\x92\xe3\x63\x16\xc7\x87\x9d\x24\x47\x0d\xc9\x61\xc4\x0e\xa2\x6e\x45\xc7\x2d\x49\xff\xf9\xc1\x64\xd2\x49\x72\xd2\x90\x0c\xd8\x29\xb0\x6e\x45\xa7\x2d\xc9\xe1\xc9\x64\xc8\x3a\x49\x86\x0d\xc9\x41\x7c\x3c\x3c\xed\x46\xf4\xbc\x25\x39\x3d\x42\x50\x9d\x24\xe7\xad\xef\xb6\xb8\xf7\x7c\x70\xbf\x7f\xcf\x1f\xe0\x9a\xf3\x07\xa0\xb2\x07\xa3\x62\xda\xbc\x86\x84\x55\xc2\xbc\x92\x42\x2a\xcb\x23\x78\x9a\x99\xed\x1c\x4c\x5d\x3b\x72\x6d\xe9\x8f\xfb\x04\x91\x11\xb4\x9c\x60\x5c\x09\x5a\x47\x2c\x54\x62\xb1\x10\x67\xec\xca\xb7\x89\xbd\x17\xf7\x66\x2d\x5e\xa0\x72\xcc\xd6\xb8\x36\xcd\xdb\x5b\x37\xc6\x6f\x1a\xfd\x5a\x66\x2f\xd0\x3a\x4d\x1b\x5a\x05\xc5\x77\xb3\x8a\x4b\xa6\xcc\xac\xf9\x94\x54\xd7\x60\x2f\x05\xbc\x2b\x30\xbc\xc7\x05\x57\xed\x1a\x36\x01\xba\xa9\xe5\xec\x22\xe7\xcb\xc7\xcb\xb7\xc3\xdd\x84\xb5\x3d\xa9\x16\xb0\x32\x5d\x15\x65\xc1\xda\xef\x3a\xf5\x17\x8e\xfa\xf3\xe4\x5f\x01\x00\x00\xff\xff\x1c\x1c\x42\xe6\xb0\x14\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 5296, mode: os.FileMode(420), modTime: time.Unix(1456151670, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\x69\x6f\xdc\x36\x13\xfe\xfc\xee\xaf\xe0\xcb\x16\x50\x0c\x58\xd2\xfa\xde\x38\x92\x0a\x23\x69\x81\x00\x2d\x62\xa0\x29\x8a\xa0\x0d\x0a\xae\x34\x92\x98\x50\xa4\x4a\x52\x6b\x2f\xd2\xfc\xf7\x0e\x75\xec\x25\x39\x4e\x8a\x44\x80\x61\x92\xf3\xcc\xf1\xcc\x0c\x8f\x8d\xfe\xff\xe2\xd5\xf3\xd7\x6f\x6e\x7f\x24\xa5\xad\x44\x32\x8b\xdc\x3f\x22\x98\x2c\x62\x0a\x92\x26\x33\x42\xa2\x12\x58\x96\xcc\xfe\x47\x70\x58\x81\x65\x88\xb4\xb5\x0f\x7f\x37\x7c\x15\xd3\xe7\x4a\x5a\x90\xd6\x7f\xbd\xae\x81\x92\xb4\x9b\xc5\xd4\xc2\xbd\x0d\x9d\xa9\x67\x24\x2d\x99\x36\x60\xe3\xc6\xe6\xfe\x82\x92\xd0\x99\x6c\xbf\xc8\x72\x2b\x20\xf9\x59\x15\x84\x4b\xe2\x93\x97\xd6\x33\xe4\x8d\x6a\xc8\x2b\x29\xb8\x84\x28\xec\xe4\xb3\x0d\x1e\x57\xdf\x13\x0d\x22\xf6\x8c\x5d\x0b\x30\x25\x80\x25\xb5\x86\x1c\x6c\x5a\x7a\xa4\xc4\x51\xec\xb9\xe0\xcc\x75\x18\xb2\x77\xec\x3e\x28\x94\x2a\x04\xb0\x9a\x9b\x20\x55\x55\xbb\x16\x0a\xbe\x34\x21\xf2\x6b\x04\xd3\x7f\x55\xcc\x82\xe6\x4c\x84\x27\xc1\x3c\x98\x0f\xcb\xfe\xb0\x1c\x54\x5c\x06\xa9\x31\x5e\x32\x0e\x82\x6e\x83\xa0\x9d\x6f\xca\x0c\x12\x35\x21\x2a\x84\xad\xd0\xa9\xd2\xf0\x8b\x75\x73\xcc\xa2\xcf\xee\xc0\xa8\x0a\x86\x08\x46\x66\xb6\x6c\x91\xac\xd3\x30\x87\x6c\x51\xeb\x87\x9c\x55\x5c\xac\xe3\xdf\x41\x88\x5c\xa0\xb7\x7f\x6e\xf4\x4a\x5d\x9f\xcf\xe7\xc7\x57\xf8\x87\xff\xb9\x65\x82\xa7\x6e\xd6\x8d\xbc\xc3\x04\x7b\xc4\x62\x69\x63\xaf\xad\xe8\x5e\x2a\x48\xd4\xa2\xb6\x05\x6a\xbf\x3f\x64\xf1\xe7\x75\x2a\x14\x7b\xff\xf6\xd8\x4d\xfc\x61\x1c\x0c\x63\xf2\x61\x4f\xc1\x7d\x19\x37\xb5\x60\xeb\x6b\x22\x95\x84\x67\x7b\xe2\x8f\x5b\x77\x61\xef\x0f\x47\x5d\x4b\xce\xa2\xa5\xca\xd6\x04\x0d\xb3\xba\x8e\xa9\x50\x05\x97\x37\x75\x4d\x9d\xc4\x21\x40\x13\x9e\xc5\xb4\x1b\x76\xbd\x9c\xf1\x15\x49\x05\x26\x3b\xa6\x7d\xb3\xd2\x8e\x50\x2b\x71\x68\xb4\xa2\x68\x12\xb1\xbe\x2e\x25\x16\x81\x26\xd8\x9c\x06\x5b\x33\xe8\x5a\x13\x03\x60\x49\x14\xa2\xc6\x8e\x6e\x6f\xd5\xf0\x42\xfa\x77\x9a\xd5\x74\x48\xd4\xc6\x94\x86\x82\x1b\xeb\x22\x89\xf8\x00\xcf\x19\xc9\x99\xdf\x18\xd0\x7e\x2d\x1a\x83\xa2\x90\x27\xbf\xa2\x0d\xd2\xd4\xce\x4b\x67\x7f\x70\xd5\x0f\x3a\xfe\xa0\x91\xe7\x6c\xd7\x77\xde\x08\x61\x52\x0d\x20\x73\xa5\xab\x81\x98\x1b\x93\x4d\xf2\x71\x07\x97\x0a\x69\xd6\xca\x60\xef\xb1\xd4\x72\x25\xfb\xd4\x51\xdc\xf7\x6b\xd5\x58\x97\x1a\xd1\x54\x38\x97\xac\x82\x5e\xd8\x5a\x24\x3b\x7c\xd1\x22\x97\xdc\xc6\xde\x46\x1c\x20\x8b\x15\x68\xc3\x33\x58\x61\x2f\x65\xcc\xd9\x06\xad\x95\x36\x24\x26\x1f\x28\x97\xed\xb2\x6b\x6b\x5b\x72\x59\xd0\x6b\x62\x75\x03\x1f\xbd\x51\x2e\xb1\x57\xef\x37\xc1\x68\x75\x47\x77\x9a\x6e\x90\xef\x2a\x6d\x04\x87\x04\x1c\xd0\x2f\xac\x7f\x8f\xd9\x39\x9f\xf7\x73\x37\x39\x99\xcf\x77\x8c\xb6\xfa\x55\x86\x84\xea\xc6\xfa\xae\x31\x18\x96\x59\x27\xa3\x46\x8d\x04\x5b\x82\x48\x7e\x43\xa6\x2e\x37\x51\xd8\xcd\xc7\xb8\xd6\x92\xcb\x51\xa5\x32\xb7\xe1\xfb\x04\xe3\x6e\x16\x20\x0b\x5b\xc6\xf4\x94\xe2\x56\xc3\x43\x54\x43\xb6\x9b\x67\xda\xed\xb7\xf6\x04\xc5\xfa\x34\x56\xe5\x2a\x6d\xcc\x41\xac\xe1\x54\xb0\xff\x99\xce\x2d\x76\xcf\x9d\xd2\xd9\xe7\xd3\xa9\x7b\x8d\x11\x87\xad\xa0\xa3\xb1\x99\x7f\x53\x02\xa7\xfe\x4f\xd8\xc9\x4a\xbb\x7c\x95\xb8\xa7\x79\xda\xf6\x1e\xde\x47\xd9\x17\xd4\xc8\x2a\x5b\x3b\x0d\x2c\x53\x86\x57\xc0\xfd\x50\xa9\xcb\xbd\xba\x5d\x8e\x38\x6f\xf4\x3e\x87\xe3\x56\x3a\xee\xde\xc3\xb6\xee\x87\xd3\x2d\xbe\xbf\x2d\x5a\xb1\xa9\x99\x1c\x8c\xb8\xf1\x81\x78\x62\x83\x4c\x64\x05\x83\x5e\x36\xd6\x62\xf6\xba\x0a\x9a\x66\x59\x71\x6c\xc5\xfe\x8c\x41\xb1\x66\xdc\x20\x79\x1c\xd5\x9a\x57\x4c\xaf\x69\x7f\x89\xb7\x8c\x3b\xe5\x09\xc3\xfd\xa1\x51\x81\x31\xac\x00\xb3\x73\xae\x7c\xe2\xe0\x68\x6b\xe1\x76\x81\x5f\xa2\xd4\x9d\x97\xc2\xc0\x26\x98\x16\x33\x41\x62\xc2\x5f\x3c\x1c\x3f\x78\x3e\x66\xae\x45\xd0\x10\x4d\x5e\x76\x6b\x64\x67\xf1\xa0\x30\x0f\xd4\xeb\xa1\xa5\x87\x4b\xb0\x5b\xcc\x28\x74\xb4\xdd\x41\xde\xad\xcd\x22\x3c\xb6\x79\x6d\x89\xd1\xe9\x17\x3e\x61\xde\x19\x7c\xbb\x9c\x07\x8b\x61\x1e\xbc\x33\xee\x3c\xed\xec\x25\x5f\xd1\xb0\xcf\x24\x77\xef\xa2\xf6\x45\xf2\xcd\x9c\x0c\xdd\xf1\x6d\xbd\x30\x7c\xdc\x7d\x55\x0f\x9f\xf5\x90\x9c\x74\xd6\x35\xc8\x50\x3c\x3c\x89\x1a\x01\x4f\xbc\xe1\x29\xe3\xe1\x1b\xca\x93\xc5\x2f\xbd\x19\xef\xd8\x4d\xfa\x14\x79\x6f\x8f\x36\xcd\x85\x51\xc9\x9c\x17\x4f\xf2\x46\xb6\x37\xfa\x93\xef\xab\xec\x75\x09\xe8\xb5\xb8\xd5\x6a\x85\x5b\x47\x1f\x1d\xbc\xbb\xc6\x88\x20\x83\x1c\x0f\xa9\x5b\x26\xc0\x5a\x0c\x62\x29\x1a\xe0\xa6\xc4\x18\xc6\x2f\x36\xef\x62\xee\x5d\x13\xef\xbb\xfc\x2a\x5f\xe6\x99\x77\x3c\x06\xe0\x0d\xdb\x22\x96\xf8\x52\x81\x49\xc4\x69\x8f\x58\x40\xba\x80\xd3\x29\xc4\x59\x8f\xb8\xb8\x60\x59\x76\x36\x85\x38\xef\x11\x67\x29\x3b\x49\x27\xbd\x5c\x0c\x88\xf9\xd3\x93\xe5\x72\x0a\x71\xd9\x23\x4e\xd9\x15\xb0\x49\x2f\x57\x03\xe2\xec\x72\xb9\x60\x53\x88\x45\x8f\x38\xc9\x2e\x16\x57\x93\x5c\x9e\x0e\x88\xab\x73\xa4\x33\x85\xb8\x19\x52\xf6\x70\x52\x6f\x4e\x1f\xcd\xea\xcd\xe3\x29\xb9\x79\x9c\x8f\xbb\xb1\x34\x33\xf6\x05\xe4\xac\x11\xf6\xb9\x12\x4a\x3b\x15\xc1\x8b\xd2\x7e\x52\x81\xe9\xf7\x2d\xda\x38\xf8\xc5\x9c\x20\x29\x82\x51\x13\xac\x25\xc1\xd0\x88\x63\x49\x1c\x0f\xd2\x46\xba\xff\xd8\x3f\x7a\xf6\x58\x8f\xe2\xfd\x5e\x61\x6f\x66\x5d\x5c\xde\xd1\x28\x92\xa0\xbf\x94\x46\x6d\xbc\x85\x3a\x37\x3b\x1b\x31\x74\xbf\x22\xda\x57\x75\xfb\x13\xf8\xdf\x00\x00\x00\xff\xff\x92\xd1\x86\x27\x13\x0f\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 3859, mode: os.FileMode(420), modTime: time.Unix(1456329602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
	"login.html": loginHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

