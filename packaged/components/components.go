// Code generated by go-bindata.
// sources:
// components/company/controller.js
// components/company/views/newcompany.html
// components/organization/controller.js
// components/organization/views/neworganization.html
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companyControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8c\x41\x0a\xc2\x30\x10\x45\xf7\x39\x45\x08\x85\x26\x20\xbd\x80\xb8\x90\x1e\x43\x5c\x0c\x31\x6a\x24\x9d\x29\xe9\xa4\x50\xa4\x77\x77\x2a\x52\x17\x99\xdd\xbc\xff\xdf\x07\x7c\x94\x04\xb9\x1b\xe8\x56\x52\xb0\x26\xf2\xb4\x50\x21\x4c\x11\xc3\x79\x1c\x8d\xeb\x3c\x21\x67\x4a\x29\x64\x6b\x7a\x1a\x46\xc0\xa5\xdf\x91\x39\x54\xc8\x1d\x95\x52\x15\xed\x9a\x88\xaf\xe0\x59\x9f\xf4\xa5\x6d\x12\x79\xe0\x48\xd8\x5e\xa5\x7c\x2f\xe8\xb7\x47\x57\x92\xdd\x8b\x4e\xbf\x95\x96\x9b\x21\xeb\x79\x90\x11\x7e\xc6\x49\xdc\x8d\x81\xd8\x33\x70\xb0\xee\x07\xf6\xc1\x7f\x22\xfa\x37\x5a\xd5\xaa\x3e\x01\x00\x00\xff\xff\x87\xbd\x25\x85\xf3\x00\x00\x00")

func companyControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_companyControllerJs,
		"company/controller.js",
	)
}

func companyControllerJs() (*asset, error) {
	bytes, err := companyControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/controller.js", size: 243, mode: os.FileMode(420), modTime: time.Unix(1457350098, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsNewcompanyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x00\x02\x9b\x0c\x43\x3b\xe7\xa2\xd4\xc4\x92\x54\x85\x44\x85\xbc\xd4\x72\x85\xe4\xfc\xdc\x82\xc4\xbc\x4a\x1b\x7d\xa0\x04\x97\x8d\x3e\x58\x21\x20\x00\x00\xff\xff\x37\xa4\x6f\x64\x2f\x00\x00\x00")

func companyViewsNewcompanyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsNewcompanyHtml,
		"company/views/newcompany.html",
	)
}

func companyViewsNewcompanyHtml() (*asset, error) {
	bytes, err := companyViewsNewcompanyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/newcompany.html", size: 47, mode: os.FileMode(420), modTime: time.Unix(1457350076, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8c\x41\x0a\xc2\x30\x10\x45\xf7\x39\x45\x08\x85\x26\x20\xbd\x80\xb8\x10\x0f\xe0\x01\xc4\xc5\x10\x63\x8d\xa4\x33\x25\x9d\x14\x54\x7a\x77\xa7\x45\xea\xa6\xd9\xe5\xbd\xf9\x0f\xb0\x2d\x09\x72\xd3\xd1\xad\xa4\x60\x4d\xe4\xe1\x45\x85\x30\x45\x0c\xc7\xbe\x37\xae\xf1\x84\x9c\x29\xa5\x90\xad\x39\xe7\x16\x30\xbe\x81\x23\xe1\x69\xe5\x66\xb7\xcd\xdd\x5e\x29\xb5\xad\x9a\x2a\xe2\x33\x78\xd6\x07\x7d\xa9\xab\x44\x7e\xf1\xf5\x55\x16\xf7\x82\x7e\xfe\xe8\xed\xa5\x5d\xaf\x9d\xfe\x28\x2d\x6f\x84\xac\xc7\x4e\x4a\xfc\x88\x83\x04\x66\x06\x92\x18\x81\x83\x75\x3f\xb0\x56\xff\x46\xe6\x8b\x9a\xd4\xa4\xbe\x01\x00\x00\xff\xff\x14\x20\x75\x08\x07\x01\x00\x00")

func organizationControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationControllerJs,
		"organization/controller.js",
	)
}

func organizationControllerJs() (*asset, error) {
	bytes, err := organizationControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/controller.js", size: 263, mode: os.FileMode(420), modTime: time.Unix(1457349845, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsNeworganizationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x00\x02\x9b\x0c\x43\x3b\xe7\xa2\xd4\xc4\x92\x54\x85\x44\x85\xbc\xd4\x72\x85\xfc\xa2\xf4\xc4\xbc\xcc\xaa\xc4\x92\xcc\xfc\x3c\x1b\x7d\xa0\x2c\x97\x8d\x3e\x58\x35\x20\x00\x00\xff\xff\x16\x0c\x33\x62\x34\x00\x00\x00")

func organizationViewsNeworganizationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsNeworganizationHtml,
		"organization/views/neworganization.html",
	)
}

func organizationViewsNeworganizationHtml() (*asset, error) {
	bytes, err := organizationViewsNeworganizationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/neworganization.html", size: 52, mode: os.FileMode(420), modTime: time.Unix(1457348854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company/controller.js": companyControllerJs,
	"company/views/newcompany.html": companyViewsNewcompanyHtml,
	"organization/controller.js": organizationControllerJs,
	"organization/views/neworganization.html": organizationViewsNeworganizationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"company": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{companyControllerJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"newcompany.html": &bintree{companyViewsNewcompanyHtml, map[string]*bintree{}},
		}},
	}},
	"organization": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{organizationControllerJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"neworganization.html": &bintree{organizationViewsNeworganizationHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

