// Code generated by go-bindata.
// sources:
// components/company/controller.js
// components/company/service.js
// components/company/views/detail.html
// components/company/views/new.html
// components/notifications/controller.js
// components/organization/controller.js
// components/organization/service.js
// components/organization/views/detail.html
// components/organization/views/new.html
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companyControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x0e\xd3\x30\x10\x86\xf7\x3d\x85\x15\x55\xb2\x2d\x22\x97\x05\x1b\xa8\xba\x40\x3d\x02\x4b\xc4\xc2\x72\xa6\xc4\xc8\xb1\x23\x3f\x52\xaa\x2a\x77\x67\x92\xba\x69\x42\x1a\xc4\x6c\x5a\xfd\xf3\xf8\xbf\x99\x98\x5d\x92\x55\x51\x3b\xcb\x38\xb9\xef\x08\x06\x4d\x01\x48\x88\x5e\xab\x48\x8f\xbb\x51\x92\xf6\x67\x32\xd2\x8b\xc6\x55\xc9\x00\x2b\x74\x0c\x37\x97\x9c\x35\xda\xc2\xd7\xb6\x2d\xb8\x50\xce\x46\xef\x8c\x01\xcf\x8a\xb3\x6b\x5a\x69\x6f\xe7\x49\x2a\xca\x95\xc4\x71\xf2\x38\x7a\x95\x11\x7b\x6d\x7f\x81\x8a\xe4\x44\xbe\xd3\xbd\x71\x4a\x0e\x74\xb4\xa4\xb9\xf2\x1b\xf8\x4e\x2b\xa0\x25\xa1\xfb\xab\xb6\x95\xbb\xd2\x1f\x19\xf3\xb9\xca\x7a\x28\x9b\x06\x95\xcb\x31\x25\xc9\x43\x9e\xdb\x0f\xd1\x49\x4f\xba\x06\x01\x62\xad\xc3\xf1\x25\x37\x42\x79\x90\x11\x30\xf3\xf8\x93\x7d\x73\xb2\x93\x46\x57\xa3\x09\x78\xef\x7c\xc0\xb2\x7b\x3f\x2b\x91\x08\xd7\x61\x17\xe3\x33\x71\x62\x7e\x65\x91\x64\x4a\xf7\x6f\x2a\x1f\xde\x8c\xbf\x80\xff\x0d\x30\xaf\x5a\x6e\x9f\xf7\x61\xd8\x6b\x65\x03\x25\xfe\x46\xf9\xdb\x7a\xbe\xe8\x11\xb1\x06\xcb\x16\xd2\x9c\x87\xa1\xa5\xfc\x0b\xe6\x19\xd3\xd9\x45\x2b\x63\xcd\x8a\x83\x1a\xfd\x35\x84\x43\x41\x3e\x90\xec\xcb\x8f\xab\xe6\xbe\xdc\xf6\x43\xe6\xe0\xec\x86\xa3\xbe\x90\x5c\x20\x42\x94\x31\xe1\x11\x4e\xe4\xd3\xc7\xcf\xf3\xef\xbb\x8a\x8d\xdb\x55\xa9\x35\x1a\xf9\xe1\x0b\x89\x3e\x41\xbf\xc6\x1c\x51\xdf\xaa\x60\x02\x6c\x3b\xe6\x47\x27\xa6\xf3\xd4\x1e\x2e\x68\x59\x8c\xe6\xc3\x69\x16\x3b\xfc\xaf\xf1\x52\x99\x9d\xf5\x91\xc0\xc7\xb4\xeb\xf9\xf0\xfc\xfe\x04\x00\x00\xff\xff\x45\xe8\x9a\x08\xf6\x03\x00\x00")

func companyControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_companyControllerJs,
		"company/controller.js",
	)
}

func companyControllerJs() (*asset, error) {
	bytes, err := companyControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/controller.js", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1457713272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyServiceJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\x3f\x6f\xeb\x20\x10\xdf\xfd\x29\x50\x64\x09\x90\x2c\xde\x1e\xeb\x0d\x4f\x6f\xed\xd4\xaa\x53\xd5\x81\x3a\xd7\x84\xca\x39\x08\x1c\x51\xa3\xc8\xdf\xbd\x18\x9b\x34\x4e\xab\xdc\x60\xe0\xee\xf7\x0f\x23\xde\x23\x76\x64\x2c\x0a\xc9\xce\x15\x4b\xc5\x63\x00\x16\xc8\x9b\x8e\x78\x5b\x55\xb9\xa7\x71\x1b\x7b\xed\xd5\xde\x6e\x62\x0f\x62\x65\x28\x9c\x6c\xb4\xd8\x1b\x84\x7f\xce\xad\xa4\x0a\xe0\x8f\xa6\x4b\xa3\xff\x76\xef\x34\x9e\x9e\xa6\xf3\xaa\x59\x9e\x65\x51\x5c\xb6\x55\x6d\xf0\x03\x3a\x62\x7f\xd9\x0b\xaf\x77\x44\x8e\x37\xbc\x3e\xf0\xd7\x76\x42\x97\x90\x37\x34\x91\xa1\x0d\xab\x0f\x25\xfc\x58\x47\xed\x99\x76\xe6\xf9\xf1\x21\xc9\x31\x9e\xb6\x7f\xba\x4c\x33\x10\xf8\x2c\x58\x70\x73\xec\x04\xfc\xe6\x8f\xd5\x79\xd0\x04\xeb\x79\xbd\x8c\x86\xcb\xce\x03\x45\x8f\x85\x7f\xa5\x7a\x89\x3a\x51\x05\xea\x3d\x34\x8c\xf4\x27\x7a\xb9\xf4\x18\xfd\xa3\xef\x93\xf7\x94\xb6\x5d\x4c\x67\x83\x7c\x43\xe5\x6c\x20\x91\xb0\x0d\x3b\x6f\x7b\xfb\xa6\x7b\xb3\x59\x67\xe1\xac\xbb\xce\xdf\x41\x2a\xda\x01\x8a\x85\xca\x75\x22\xe1\x21\x38\x8b\x01\xe4\xcd\x65\x6f\x2c\x0b\x4c\x6d\x34\xe9\xf6\x07\x72\x68\xee\x39\xe8\x60\x51\xde\x95\xaf\x0f\xca\xc3\xf8\xd8\x05\xfd\x8b\xc5\xa2\x73\x05\x18\xa6\xff\x9c\x96\x6a\x90\x22\x0d\xbe\x02\x00\x00\xff\xff\xb9\xae\x5f\xb5\xbf\x02\x00\x00")

func companyServiceJsBytes() ([]byte, error) {
	return bindataRead(
		_companyServiceJs,
		"company/service.js",
	)
}

func companyServiceJs() (*asset, error) {
	bytes, err := companyServiceJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/service.js", size: 703, mode: os.FileMode(420), modTime: time.Unix(1457772163, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsDetailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x00\x02\x9b\x0c\x43\x3b\xe7\xfc\xdc\x82\xc4\xbc\x4a\x85\x94\xd4\x92\xc4\xcc\x9c\x62\x1b\x7d\xa0\x18\x97\x8d\x3e\x58\x0d\x20\x00\x00\xff\xff\xd8\x55\xeb\x9c\x2a\x00\x00\x00")

func companyViewsDetailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsDetailHtml,
		"company/views/detail.html",
	)
}

func companyViewsDetailHtml() (*asset, error) {
	bytes, err := companyViewsDetailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/detail.html", size: 42, mode: os.FileMode(420), modTime: time.Unix(1457693299, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x4b\x92\xa3\x30\x0c\x86\xf7\x39\x85\xca\xab\x99\x05\x43\x4d\xcd\x16\xd8\xe4\x0a\xb9\x80\xc0\x22\xb8\xc6\x0f\xda\x8f\x04\x6e\xdf\xb2\x49\xe7\xd5\x5d\xdd\x61\x83\x91\xe5\x4f\x3f\xbf\xe4\x46\xaa\x53\xb7\x03\x7e\x9a\xd1\x79\x03\x1a\x57\x97\x62\x2b\x06\xa7\x93\xb1\x02\xec\xb1\x0a\xa9\x37\x8a\x43\x27\xf3\x67\xf0\x84\x91\x7e\xfd\x16\xdb\x91\x72\x6c\xfa\xdb\xed\x4b\x18\x10\x2c\x9d\x61\x70\x66\x46\xbb\x36\x35\x6f\xdc\xb2\x7a\x5f\xdf\x7d\x19\x59\x29\x3b\xa7\x58\x0d\xce\x46\x54\x96\xfc\x6d\xb3\x24\x68\xec\x49\x77\xfb\x0d\x05\x16\x0d\x35\xf5\x16\x7b\xcc\x2b\x94\x2c\xd2\x38\x49\xba\x68\xcc\xc9\x02\x8c\xb2\x9a\xec\x31\x4e\xad\xf8\x27\xc0\xd3\x5b\x52\x9e\x24\xc4\x75\xa6\x56\x44\x5a\xa2\x00\x4c\xd1\x8d\x6e\x48\xa1\x6b\xea\xc2\x79\x62\xb3\x33\x85\x4c\x21\xe0\x91\x42\x81\x9f\x50\x2b\x89\x51\x39\x96\xec\x9d\x0f\x5c\x48\x56\x19\x54\x4d\x4a\x32\x79\x44\x1d\x48\x3c\x82\xbe\x80\xb5\x42\xa6\x59\xab\x81\x5d\x13\xdd\x61\x52\xa1\xfc\x22\xf0\x1b\x35\x7b\x29\x57\x88\xf8\x9f\x6c\x53\x5f\xbb\x73\x05\x3d\x86\x9a\xfa\x3b\x2b\x5f\xf5\xf9\x80\x0b\xd8\x64\x7a\xf2\x2f\xbb\x1c\x71\xb1\x5e\xdc\xfb\xf9\xd9\xc5\x1f\xc4\x65\x4b\x3e\xc6\xcd\xbb\xf3\x93\x6b\x59\x7b\x9f\x62\x74\xf6\x52\x64\x1b\x43\x01\x83\xc6\xc0\xcd\xe0\x6d\x8f\x2a\x70\x4f\x79\x35\x7b\x65\xd0\xaf\xe2\x32\x89\xa5\xf0\x76\xf8\x09\x1a\x78\x9e\x60\xd4\xb4\xb0\xda\xbc\xbe\x17\x7b\xbb\x09\x75\xbe\x0a\xdd\xee\x12\x7a\x0f\x00\x00\xff\xff\x44\xaf\xf1\xa6\x23\x03\x00\x00")

func companyViewsNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsNewHtml,
		"company/views/new.html",
	)
}

func companyViewsNewHtml() (*asset, error) {
	bytes, err := companyViewsNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/new.html", size: 803, mode: os.FileMode(420), modTime: time.Unix(1457705626, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _notificationsControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\xc1\x8a\xc3\x20\x10\x86\xef\x3e\x85\x48\x40\x85\x25\x2f\x10\xf6\xb0\xec\x7d\x5f\x60\xe9\x41\xac\x69\xa7\x18\x27\xe8\x18\x28\x25\xef\x5e\x93\x34\xb6\x97\xcc\xc1\xc3\x7c\xfe\xdf\xf0\xab\x3e\x07\x4b\x80\x41\x69\xfe\x60\xbc\x8c\xcc\xc9\xf1\x44\x11\x2c\xc9\x8e\xb1\x75\x67\xc2\x25\x7b\x13\xdb\x01\xcf\xd9\x3b\x25\x80\xd2\x1d\x33\x06\x0f\xc1\xfd\x8c\xa3\xd0\xad\xc5\x40\x11\xbd\x77\x51\x89\x3f\x24\xe8\xc1\x9a\x45\x9b\x7e\x2b\x10\x5f\x07\x40\xef\x67\x0e\x78\xdb\x40\xb8\x39\x4b\xfc\x9b\xff\xcb\xc6\xe3\xf6\x41\x9e\xba\x2d\xb5\x37\x38\x8a\xab\x1a\xd9\x2b\x2e\x33\x99\xc8\xa7\xa1\x28\xe9\x0a\xe9\x65\x5a\xab\x16\xd7\x64\xc8\x29\xfd\xb1\xac\x27\xde\xb4\xa8\x2a\x9e\xd9\xf6\x32\x36\xeb\x25\xf7\x0c\x00\x00\xff\xff\x48\x43\x47\x15\x55\x01\x00\x00")

func notificationsControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_notificationsControllerJs,
		"notifications/controller.js",
	)
}

func notificationsControllerJs() (*asset, error) {
	bytes, err := notificationsControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "notifications/controller.js", size: 341, mode: os.FileMode(420), modTime: time.Unix(1457604838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xcb\x8e\x9c\x30\x10\xbc\xcf\x57\x58\xd6\x48\xd8\x0a\xf2\xe6\x90\x4b\x32\xda\x43\x94\x0f\xc8\x21\xc7\xd5\x1e\x1c\x68\x16\x47\xc6\x46\x7e\xb0\x4a\x46\xfc\x7b\xda\xbc\x06\x02\x48\xe9\x13\xaa\x6a\x77\x55\x17\xcd\xaa\x68\x8a\xa0\xac\x61\x9c\xdc\x2f\x04\x2b\x8b\x1e\x88\x0f\x4e\x15\x21\xbb\x5d\x2e\x03\x26\xcd\x5b\xd4\xd2\x89\xc6\x96\x51\x03\xa3\x2a\xf8\xdf\x36\x5a\xa3\x95\x81\xaf\x6d\x4b\xb9\x28\xac\x09\xce\x6a\x0d\x8e\xd1\xef\xee\x4d\x1a\xf5\x47\xa6\xb1\xdf\x16\x9c\xe6\xc7\x38\x9f\x45\x8e\x69\x71\x55\xe6\x17\x14\x81\x3c\x93\x97\xec\xaa\x6d\x31\xf0\x59\x9e\xad\xdb\x7f\x80\xeb\x54\x01\x88\x5e\xdf\x95\x29\xed\x7b\xf6\x7a\x1b\x87\xce\xeb\x9d\x4c\x67\xcb\xc4\x9c\x1c\x0c\xcc\xc9\x34\x6f\x0e\x27\x55\x27\x1d\xe9\x1a\xf4\x13\x6a\xe5\x6f\x0f\xb8\x11\x85\x03\x19\x00\x99\xf1\x63\xb2\x30\x91\x9d\xd4\xaa\x1c\x86\x83\x73\xd6\x79\x6c\xbb\xf7\xab\x16\x89\x3e\x3b\x7c\xc5\xf8\x0a\x5c\xec\x3f\x58\x74\xb2\xd0\xfd\x41\xe7\xa8\xcd\xf8\xc3\xf0\x6c\xba\x34\x49\xf4\xe5\x75\x43\xa8\x8a\x25\x77\x89\xfb\xe7\x49\x2a\x84\x45\x1b\x7d\xcd\xc6\x16\xbe\x69\xe8\xb7\x0a\xa7\x2b\xae\xbb\x0e\x42\x9e\x62\x4b\x12\x46\x36\x90\xa3\x4e\x4e\x9d\xfd\x49\xb7\x6a\x22\xd4\x60\xd8\xce\xe1\x72\xbf\x28\x2c\x0f\x36\x48\xb5\xfc\x64\xd1\xca\x50\x33\xfa\x64\x57\x2e\x9e\x28\xf9\x40\x26\x6d\x7e\xdb\xbd\xef\xf3\x73\x49\xf4\xed\xad\x39\x11\x55\x15\x99\x1a\x84\x0f\x32\x44\x4c\xe3\x99\x7c\xfa\xf8\x79\x7d\x4a\xbb\x3a\x09\xb1\x8c\xad\x56\xb8\x02\x7c\x21\xc1\x45\xe8\xf7\x36\x07\xab\x87\x28\x68\x0f\xe7\x8a\xd3\x7d\x8b\x25\xa1\xda\x41\x85\x92\x74\x10\x4f\xd1\x6c\x76\xf8\x5f\xe1\x2d\xb2\x8a\x75\x24\xf0\x6e\x2f\x3d\x4f\x97\xfe\x37\x00\x00\xff\xff\xbe\xbb\xbd\x3d\x80\x04\x00\x00")

func organizationControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationControllerJs,
		"organization/controller.js",
	)
}

func organizationControllerJs() (*asset, error) {
	bytes, err := organizationControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/controller.js", size: 1152, mode: os.FileMode(420), modTime: time.Unix(1457713448, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationServiceJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\xcb\x6a\xf3\x30\x10\x85\xf7\x7e\x0a\x11\x0c\x92\x40\xe8\xdf\xdb\xfc\x8b\xee\x0b\x85\x96\xae\x42\x16\xaa\x3d\x4d\x54\x9c\x91\xa3\x4b\x4a\x1b\xfc\xee\x95\x2f\x4a\xed\xd4\x44\x1b\x99\x99\x33\xdf\x39\x23\xcc\xde\x03\x56\x5e\x1b\x64\x9c\x5c\x32\x12\x0f\x0d\x0e\x88\xf3\x56\x57\x9e\x96\x59\x36\xd4\x14\xee\x43\xa3\xac\x3c\x9a\x3a\x34\xc0\x36\xda\xbb\x2f\x13\x0c\x36\x1a\xe1\xa1\x6d\x37\x5c\x3a\xb0\x67\x5d\xc5\xd6\x93\xdd\x2b\xd4\xdf\xaa\x67\xbe\x8c\xc5\x8d\x58\x29\xf2\xc4\x5e\xe9\xc9\x5c\xe3\x07\x54\x9e\xfc\x27\x5b\x9a\x1f\xbc\x6f\xa9\xa0\xf9\x89\xee\xca\x71\x24\x65\x5e\x9b\x65\x83\x5e\x90\xfc\x94\x16\xea\xcf\x59\x59\xa2\x5a\xfd\xfa\xfc\x18\x99\x84\xc6\xcf\x7f\x66\x36\xeb\xe8\x44\x4e\xda\x69\x9d\x28\xfe\x65\xf4\xa7\xb2\xa0\x3c\x14\xd3\x7d\x6d\x75\xd7\x2f\x0b\x3e\x58\x4c\xf3\x33\xea\x35\xf3\x38\xca\x50\x1d\x41\x90\x1a\x9d\x20\xe6\x13\xc1\xf2\xa5\x51\x1f\x22\xd8\x26\x06\x18\x63\x97\x8b\xee\xe4\x32\xac\x2a\x5b\xe3\x3c\x8b\x5a\x41\x2e\xfb\xc6\xbc\xa9\x46\xd7\xc5\x40\x8f\xf0\xa2\x37\x18\xf8\xae\xd8\x0e\xf7\xae\xe3\xd2\x1f\x00\xd9\x02\x38\x4f\xc8\x2c\xb8\x36\xbe\x09\xf0\x9b\xe5\x6f\xdc\x93\x4c\xd6\xca\xab\xf2\x8f\xb2\x13\xf7\x1c\x94\x33\xc8\xef\xe2\xf3\x93\xb4\xd0\xff\x05\x49\xbd\x62\xb1\xa8\xcc\x04\xdd\xf8\xee\xf1\xca\x3a\xce\x62\xe3\x27\x00\x00\xff\xff\x70\xe2\x97\xa4\xe7\x02\x00\x00")

func organizationServiceJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationServiceJs,
		"organization/service.js",
	)
}

func organizationServiceJs() (*asset, error) {
	bytes, err := organizationServiceJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/service.js", size: 743, mode: os.FileMode(420), modTime: time.Unix(1457772156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsDetailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x00\x02\x9b\x0c\x43\x3b\xff\xa2\xf4\xc4\xbc\xcc\xaa\xc4\x92\xcc\xfc\x3c\x85\x94\xd4\x92\xc4\xcc\x1c\x1b\x7d\xa0\x38\x97\x8d\x3e\x58\x1d\x20\x00\x00\xff\xff\x83\xe1\x17\x33\x2e\x00\x00\x00")

func organizationViewsDetailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsDetailHtml,
		"organization/views/detail.html",
	)
}

func organizationViewsDetailHtml() (*asset, error) {
	bytes, err := organizationViewsDetailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/detail.html", size: 46, mode: os.FileMode(420), modTime: time.Unix(1457693254, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xcd\x72\x9b\x30\x10\xc7\xef\x7e\x8a\x1d\x9d\xda\x03\x65\x3a\xbd\x02\x97\xf6\xdc\x76\x26\x79\x81\x05\x2d\xa0\x89\x3e\x88\x3e\x6c\x93\xa7\xcf\x22\x1c\x1b\x3b\x99\xc4\xbe\x58\xec\xc7\x4f\x7f\xfd\xb5\xaa\xa4\xda\x37\x3b\xe0\x5f\xd5\x3b\x6f\x40\xe3\xec\x52\xac\x45\xe7\x74\x32\x56\x80\x1d\x8a\x90\x5a\xa3\x38\xb4\x37\x3f\x3a\x4f\x18\xe9\xdb\x77\xb1\xb6\xe4\xb6\xf1\x67\xf3\x3b\x87\x01\xc1\xd2\x01\x9c\x1f\xd0\xaa\x17\x8c\xca\xd9\xaa\xe4\xec\xa5\xb4\xf5\xe5\xe6\xcb\xc8\x42\xd9\x29\xc5\xa2\x73\x36\xa2\xb2\xe4\x2f\xc9\x5c\xa0\xb1\x25\xdd\xfc\xdb\xf0\xc0\xa2\xa1\xaa\x5c\x13\xd7\xc5\x19\xb5\xc8\x35\x4e\x92\xce\x6a\x97\x62\x01\x46\x59\x4d\x76\x88\x63\x2d\x7e\x09\xf0\xf4\x9c\x94\x27\x09\x71\x9e\xa8\x16\x91\x8e\x51\x00\xa6\xe8\x7a\xd7\xa5\xd0\x54\x65\xe6\xdc\xb0\xd9\xa3\x4c\xa6\x10\x70\xa0\x90\xe1\x7b\xd4\x4a\x66\x51\xe4\xbd\xf3\x81\x37\x92\xc5\x02\x2a\x46\x25\x99\xdc\xa3\x0e\x24\xae\x41\x1f\xc0\x6a\x21\xd3\xa4\x55\xc7\xfe\x89\xe6\x71\x54\x21\x1f\x11\xf8\x1f\x35\xbb\x2a\x67\x88\xf8\x44\x6c\xe4\xf9\x9e\xce\xa0\xeb\x50\x55\x7e\xe6\xe7\xbd\x66\xff\xf7\xca\xa0\x9f\xe1\xcf\xdf\x87\xbb\x6d\x9e\xd6\x1e\x6e\x11\x5b\x57\xdf\x7b\xf9\x85\xc4\xc5\x98\xb7\xf1\xf3\xee\x70\xe3\xdd\x72\x82\x36\xc5\xc8\x43\xb0\x6e\xb2\x8e\xa5\x80\x4e\x63\xe0\x2b\xe1\xb4\x47\x15\xf8\x66\x79\x75\x92\x24\x4e\x93\x99\x37\x5e\x9b\x6f\xa0\x61\x42\x0b\xbd\xa6\x23\xab\x5d\xd6\x5b\xb1\x97\x97\x51\x2e\x4f\xa3\xd9\x9d\x42\xaf\x01\x00\x00\xff\xff\xb3\xdb\xc3\xcb\x33\x03\x00\x00")

func organizationViewsNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsNewHtml,
		"organization/views/new.html",
	)
}

func organizationViewsNewHtml() (*asset, error) {
	bytes, err := organizationViewsNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/new.html", size: 819, mode: os.FileMode(420), modTime: time.Unix(1457705612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company/controller.js": companyControllerJs,
	"company/service.js": companyServiceJs,
	"company/views/detail.html": companyViewsDetailHtml,
	"company/views/new.html": companyViewsNewHtml,
	"notifications/controller.js": notificationsControllerJs,
	"organization/controller.js": organizationControllerJs,
	"organization/service.js": organizationServiceJs,
	"organization/views/detail.html": organizationViewsDetailHtml,
	"organization/views/new.html": organizationViewsNewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"company": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{companyControllerJs, map[string]*bintree{}},
		"service.js": &bintree{companyServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"detail.html": &bintree{companyViewsDetailHtml, map[string]*bintree{}},
			"new.html": &bintree{companyViewsNewHtml, map[string]*bintree{}},
		}},
	}},
	"notifications": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{notificationsControllerJs, map[string]*bintree{}},
	}},
	"organization": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{organizationControllerJs, map[string]*bintree{}},
		"service.js": &bintree{organizationServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"detail.html": &bintree{organizationViewsDetailHtml, map[string]*bintree{}},
			"new.html": &bintree{organizationViewsNewHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

