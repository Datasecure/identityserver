// Code generated by go-bindata.
// sources:
// components/company/controller.js
// components/company/views/newcompany.html
// components/organization/controller.js
// components/organization/views/neworganization.html
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companyControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x8f\xd1\x8a\xc3\x20\x10\x45\xdf\xfd\x0a\x91\x80\x0a\x4b\x7e\x20\xec\xc3\x92\xcf\x58\xf6\x41\x5c\xdb\x5a\xcc\x4c\xd0\x31\x10\x4a\xfe\xbd\x26\x4d\x2c\x25\xf3\x20\x72\xaf\x73\xee\x55\x5d\x32\x58\xf2\x08\x4a\xf3\x07\xe3\x65\x64\x4e\x8e\x27\x8a\xde\x92\xec\xd8\x26\x19\xb8\xe6\x60\x62\x3b\xe0\x7f\x0e\x4e\x09\x4f\x69\xc6\x8c\x10\x3c\xb8\x9f\x71\x14\xba\xb5\x08\x14\x31\x04\x17\x95\xe8\x71\x18\x0d\xcc\x7d\x95\xc4\xd7\x49\xd2\x85\xbc\xa1\x4f\x4e\xdb\x78\xb8\x3b\x4b\xfc\x9b\xff\xca\x26\xa0\x35\x6b\x3b\xf9\xb7\x57\x39\xea\x9e\x17\x55\x7d\x7c\xfc\x64\x9d\xc9\x44\x3e\x0d\x05\x46\x37\x9f\xba\x2a\xd7\x8b\x29\xb4\xc9\x90\x53\x7a\x0f\xf8\x08\x79\xbb\x05\x59\xed\x85\xbd\x4e\xc6\x16\xbd\xee\x3d\x03\x00\x00\xff\xff\xd3\x5e\x25\x6d\x44\x01\x00\x00")

func companyControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_companyControllerJs,
		"company/controller.js",
	)
}

func companyControllerJs() (*asset, error) {
	bytes, err := companyControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/controller.js", size: 324, mode: os.FileMode(420), modTime: time.Unix(1457520894, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsNewcompanyHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x72\x83\x30\x0c\x45\xf7\x39\x85\x46\xfb\x94\x69\xd7\xc0\x26\x57\xe8\x05\x04\x28\x89\x67\x6c\x99\xca\x72\x02\xb7\xaf\x03\x99\x86\x66\xd1\x49\x59\x19\xff\xef\xaf\x37\xfe\xae\x07\x77\x69\x77\x50\xbe\xfa\x18\x35\x80\xa7\x39\x66\x6b\xb0\x8f\x3e\x07\xc1\x55\x5a\xe4\xf3\x7b\x7b\x50\x26\x63\x20\x10\xbe\x42\x1f\xc3\x48\x32\xd7\x55\x11\x1e\xae\x4e\xab\xcd\x5f\x18\xf6\x4e\xc6\x6c\xfb\x3e\x8a\x91\x13\xd6\x87\xb8\x18\x3c\x75\xec\xdb\xc3\x1a\x05\x42\x81\xeb\x6a\xdd\xfb\xed\x5b\x52\x40\x4e\xfb\x10\x07\xf6\x0d\x5e\xc2\xdb\xcd\x8c\x10\x9c\x78\x96\x93\x9d\x1b\xfc\x40\x50\xfe\xca\x4e\x79\x00\x9b\x47\x6e\xd0\x78\x32\x04\xca\x16\x8f\xb1\xcf\xa9\xad\xab\x25\x67\x03\x58\xfd\x45\xf8\x2a\xfe\x27\x4d\x20\x39\x74\xac\x2f\xc3\x1b\x4d\xa2\xb8\xc5\xfc\x37\x5c\x29\xee\xa7\x2d\x8d\x57\x7c\x1a\x5a\xce\x76\xd9\x2c\xca\x7d\x48\xca\x5d\x70\xe5\x36\x7a\x4f\x29\x35\x58\x64\x25\x97\xca\x55\x95\xd5\xa8\x2e\x90\xce\x78\x2f\x78\x19\xbc\x1e\x7e\x0a\x4d\xa5\x26\x38\x7a\x9e\x0a\xed\x6d\xbd\x85\x7d\x3c\xa4\xea\xf6\x92\xda\xdd\x7d\xeb\x3b\x00\x00\xff\xff\xf0\x97\x58\x88\x62\x02\x00\x00")

func companyViewsNewcompanyHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsNewcompanyHtml,
		"company/views/newcompany.html",
	)
}

func companyViewsNewcompanyHtml() (*asset, error) {
	bytes, err := companyViewsNewcompanyHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/newcompany.html", size: 610, mode: os.FileMode(420), modTime: time.Unix(1457520841, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\x41\xae\xc2\x20\x10\x86\xf7\x9c\x82\x90\x26\x40\xf2\xd2\x0b\x34\x6f\x61\x3c\x80\x07\x30\x2e\x08\x62\xc5\xd0\xa1\x81\xa1\x89\x9a\xde\x5d\xda\x5a\x74\x51\x67\xc1\xe2\xff\xf3\x7d\xc3\x88\x4b\x02\x8d\xd6\x83\x90\xf4\x49\x68\x1e\x9e\xa2\xa1\x11\x83\xd5\xc8\x1b\x42\xe6\x4c\x41\x9b\x9c\x0a\x75\xe7\xcf\xc9\x19\xc1\x2c\xc6\xbb\x4f\x1e\x9c\x05\xb3\xeb\x7b\x26\x6b\xed\x01\x83\x77\xce\x04\xc1\x0e\xa1\x55\x60\x1f\x6a\xd2\xee\x4b\xce\xfe\xb6\x73\xb9\x2e\xd9\xae\xeb\xca\xc2\xcd\x68\xa4\xff\xf4\xc8\x2b\xe7\xf5\xdc\xf3\x53\xb3\x40\xeb\xf7\x7f\xd0\xa2\x10\xeb\x79\xd3\x0c\x2a\xd0\xa1\xcb\x46\xbc\xda\xf8\x16\xcd\x67\x66\xd5\xa0\xd0\x08\xf9\x15\x96\x0d\x9f\x36\xab\x4a\x3d\x92\xe5\x25\x64\x94\x13\xf7\x0a\x00\x00\xff\xff\xf8\x62\x45\xbb\x51\x01\x00\x00")

func organizationControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationControllerJs,
		"organization/controller.js",
	)
}

func organizationControllerJs() (*asset, error) {
	bytes, err := organizationControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/controller.js", size: 337, mode: os.FileMode(420), modTime: time.Unix(1457366128, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsNeworganizationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\xcf\x4e\xc3\x30\x0c\xc6\xef\x7b\x0a\xcb\xf7\x11\xc1\xb9\xed\x05\xce\x80\xc4\x13\xb8\xad\xb7\x45\x4a\x9c\x92\x38\xfb\xc3\xd3\x93\xb5\x15\x2d\x3b\xa0\xd1\x53\xda\xcf\xdf\xe7\x5f\xed\x54\xbd\x3d\x36\x1b\x28\x4f\xb5\x0b\xd1\x83\xa3\x4b\xc8\x5a\x63\x17\x5c\xf6\x82\x93\x34\xca\x87\xc7\xe6\x39\x32\x29\x03\x81\xf0\x09\x42\xdc\x93\xd8\x2f\x52\x1b\xa4\x32\x45\x5d\x4a\xdb\x68\x56\x6f\xbe\xdf\x5a\x19\xb2\x6e\xbb\x20\x4a\x56\x38\x2e\xe2\x58\xe0\xa8\x65\xd7\xbc\xad\xf2\x40\xc8\x73\x65\x26\xe1\x77\xf1\x18\x05\xb2\xdf\xfa\xd0\xb3\xab\xf1\xe8\x1f\xae\xc5\x08\xde\x8a\x63\xd9\xeb\xa1\xc6\x27\x84\xc8\x9f\xd9\x46\xee\x41\x2f\x03\xd7\xa8\x7c\x56\x04\xca\x1a\x76\xa1\xcb\xa9\xa9\xcc\x98\xb3\xa2\x34\x7f\x61\xde\xfb\x0f\xef\xd1\x7a\x8a\x17\x78\x79\xfd\xb8\x9b\x7e\x98\x3c\xc5\x82\x6b\xd8\x7f\x23\x96\x45\xfe\x6c\x2f\x86\x13\xde\x74\x2e\xde\x36\xab\x96\xd9\x4e\x4d\x52\x6e\xbd\x2d\x33\xe9\x1c\xa5\x54\x63\x91\x23\xd9\x54\x06\x56\x4e\x33\x12\xce\x0b\x1f\x1b\x4f\xe6\x9b\xd0\x34\x90\xc0\xce\xf1\xb9\xd0\x5e\xcf\x6b\xd8\xe5\x62\x99\xeb\xcd\x6a\x36\xf3\xa7\xef\x00\x00\x00\xff\xff\xc3\x59\x11\x29\x72\x02\x00\x00")

func organizationViewsNeworganizationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsNeworganizationHtml,
		"organization/views/neworganization.html",
	)
}

func organizationViewsNeworganizationHtml() (*asset, error) {
	bytes, err := organizationViewsNeworganizationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/neworganization.html", size: 626, mode: os.FileMode(420), modTime: time.Unix(1457520545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company/controller.js": companyControllerJs,
	"company/views/newcompany.html": companyViewsNewcompanyHtml,
	"organization/controller.js": organizationControllerJs,
	"organization/views/neworganization.html": organizationViewsNeworganizationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"company": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{companyControllerJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"newcompany.html": &bintree{companyViewsNewcompanyHtml, map[string]*bintree{}},
		}},
	}},
	"organization": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{organizationControllerJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"neworganization.html": &bintree{organizationViewsNeworganizationHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

