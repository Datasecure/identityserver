// Code generated by go-bindata.
// sources:
// api/companies.raml
// api/contracts.raml
// api/organizations.raml
// api/securitySchemes/oauth_2_0.raml
// api/userorganizations.raml
// api/users.raml
// DO NOT EDIT!

package specifications

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companiesRaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x56\x4b\x73\xdb\x36\x10\xbe\xf3\x57\x6c\xdc\xe9\xcd\xa6\x48\xd9\xc9\x78\x78\xaa\xe3\xa6\x89\x5a\x3b\xe9\xd8\xf5\xc1\x93\xf1\x44\x10\xb1\x92\xd0\x90\x00\x03\x80\xb2\x98\x34\xff\xbd\x4b\x82\x12\x1f\xa6\x62\xd9\x3d\x94\x33\x9e\xb1\xb0\x0f\x7c\xfb\xed\x03\xfb\xd3\xcf\x57\x67\x97\x17\x10\xfa\x81\x67\x85\x4d\x30\x82\x89\x35\xb7\x2a\xff\x20\x13\x21\xd1\x5b\xa1\x36\x42\xc9\x08\x02\x3f\xf4\x66\xcc\xe0\x8d\x16\x11\x8c\x3c\x83\x71\xae\x85\x2d\xae\xe3\x25\xa6\x68\x22\x0f\xe0\x08\x14\xcb\xed\xf2\xd3\xf8\x53\x10\xc1\x0b\x21\xe3\x24\xe7\x08\x3d\xc5\xd1\x56\xc7\xd7\x2c\x4d\x3c\x5b\x64\xce\xfa\x5c\xa5\x19\x93\x45\xf9\x2f\x40\xa6\x55\x86\xda\x0a\x27\x72\xdf\x22\x51\x33\x96\x08\xde\x9c\x94\x5f\x69\x1f\x81\xb1\x5a\xc8\x45\x47\x90\x0a\x79\x81\x72\x61\x97\x11\x1c\x77\x05\x6c\xbd\x11\x84\x2f\x83\xad\x28\xcb\x67\x89\x88\xff\xc0\xc2\xec\xbe\xe0\xe3\x5d\xdf\xd3\xc4\x62\x6a\x22\x18\x37\x7e\x70\x9d\x09\x8d\x43\x3e\x38\xb3\xd8\x39\xd6\xf8\x25\x27\x5d\x1e\xc1\x9c\x25\xa6\x91\x29\xbd\x60\x52\x7c\x65\x96\x88\x7f\x0e\x9a\x30\x08\xf6\xba\x47\xc8\xb9\xfa\x6f\xc1\xfe\xc8\xbb\x65\x6b\xa9\xf7\x4c\xd6\x90\x0f\x5c\xb3\x34\x4b\x70\xa0\x00\x60\x72\x21\x3e\xe3\x39\x93\xbc\x78\x34\x7d\x47\x10\x9e\x5e\xbf\x7d\x77\x7b\x2d\x4e\x7f\x3f\x5f\x9d\xad\xfe\xba\x79\x75\x9b\xae\xc2\x77\x57\x69\x9a\x9f\xbe\xba\xfc\x32\xbe\xcd\xbe\xf6\x73\x47\x11\x86\xa7\x47\x61\x70\xd4\x8a\xb4\xcf\xd5\x51\x75\xf2\x8b\x48\x08\x49\x5c\x22\xf1\x63\x95\xf6\x62\x87\xd7\x6f\xc2\xf1\xf1\x49\xfb\xcf\x23\x95\xd8\x55\xfa\x4a\xe0\x7d\xe3\xd1\x51\x53\x37\x81\xe7\xda\x0b\xf9\xeb\x22\x82\x8f\x4d\x5b\xc1\x9d\x37\x72\xd6\x75\x67\x64\xca\x58\xe7\x83\xa3\x89\xb5\xc8\x6c\xd5\xab\x57\xb8\x10\xc6\xa2\x06\x06\x12\xef\x37\x17\x56\x7a\x33\xc5\x8b\xe6\x56\x96\x65\xc4\x5a\x55\x68\xa3\xbf\x0d\x99\x0e\xa4\xeb\x7c\x6b\xbd\xc0\xcd\x65\xc2\x64\x09\x2b\xde\xb3\x94\xe4\x6f\xd1\xd6\x2a\x17\x74\xe9\x43\x30\xff\xb4\x7c\x92\x2e\x6c\x03\xf0\xe1\x8c\xe2\x52\xba\xae\x74\x48\x44\x2a\xac\x01\xa6\xd1\xe1\x42\x0e\x56\x55\xa5\x81\xc6\x52\xc5\x40\x6e\x50\xfb\x9e\xab\x17\x93\x51\x6f\x60\x27\xd9\xe3\x20\xe8\xe2\xef\xc6\xba\x4f\xc4\x0f\xa2\xae\x9a\x60\xf4\xcd\x95\xde\x84\x7f\x77\xea\x5b\x22\x00\xda\x89\x6a\x8d\xbf\x6f\x60\x62\x55\x4e\x36\x4a\xdf\x41\xcd\x7f\xa4\x91\xf1\x83\xc3\xe6\x37\xe3\x34\xa4\x0e\xe0\x0e\xbe\xc3\xa6\xd7\x3a\xcc\x95\x6c\xb5\x67\x41\x55\x72\xb5\xe2\x00\x03\xbd\xf8\x1f\x46\xff\x58\xec\xfd\x7c\xbb\xef\x24\x08\xdb\x8a\x1d\x84\x37\x92\xd5\x29\x44\xde\x32\x38\xd9\x69\xf0\x5e\x59\x98\xab\x5c\x3a\xed\x2c\x7f\x16\x8f\x8f\xf1\x76\x93\x95\xa3\x96\xba\x59\xb8\xba\xa9\xed\x7c\x27\x28\x4f\xa6\xd3\x4d\x46\xa7\x53\x10\x06\x24\xc1\x62\x49\xa2\xee\x91\xfb\xff\x03\xc1\xc7\xbb\x09\xde\x20\xde\xe0\x2d\xd1\xfe\xa6\xf4\x4c\x70\x8e\xf2\x45\x65\x36\x6a\xcf\xa6\xa7\xf0\x58\xda\x75\x69\x6c\x15\xf6\x8e\x26\x1b\x68\xb3\x61\x2e\xf6\xe5\xa4\xcf\x4e\x6b\x3a\xba\xe8\x56\xe5\xcc\xa7\x7c\x46\x43\x18\x69\x36\xe8\xe2\x4f\x46\xab\x04\xd2\xbc\xeb\x3f\x96\xea\x33\xee\x6c\xf0\xfa\x15\x72\x77\xc4\x4a\x5a\xcd\x62\x6b\x06\x2f\x79\x7a\x6d\xb6\x9a\xbc\x71\x5d\xb5\x7f\x87\xee\x81\x7e\xb7\x4b\x84\xad\x09\xdc\x2f\x91\xa6\x61\x79\xd6\x9d\x03\x06\x42\x50\xf3\x4a\x90\xb1\x6a\x4f\xf2\xe1\x83\xe6\x34\xf1\x4b\x87\x28\x79\x59\x32\xb3\xa2\x5a\x39\xfc\x7d\xc8\xaa\xb7\xb5\x37\xd5\x03\xc8\x87\xeb\x76\xa6\x54\x82\x4c\xf6\x64\x9d\x08\x26\xf5\xd2\x57\x02\x73\x8f\x29\x6f\xa2\x39\xac\x10\xe1\x9c\xe5\x09\xcd\x35\x99\x14\x95\x1a\x49\xc4\xaa\x1d\x73\x39\xff\x35\xda\x5c\xcb\xa6\x19\x37\xdf\xae\x5d\x83\x72\x64\x89\x87\x61\xdc\x42\x5a\x5c\xa0\xfe\x11\xee\xeb\xd2\x9a\x18\x9d\x1b\xb4\x87\xe5\x3b\x33\xcf\x13\x9a\x53\x9a\xd8\x5d\x10\x95\x3e\xfc\x5a\xc3\x26\xe6\xa7\xc1\x74\x7f\x58\xb4\x35\x3d\x1b\xd4\x25\x5b\x97\xf7\xd3\x0a\x4d\xe3\xf5\x51\x54\x2f\x9f\x02\xab\x86\x26\xd2\x3c\xa5\x6d\x87\xb6\xe0\x7f\x03\x00\x00\xff\xff\x33\x27\xb6\xc0\x06\x0c\x00\x00")

func companiesRamlBytes() ([]byte, error) {
	return bindataRead(
		_companiesRaml,
		"companies.raml",
	)
}

func companiesRaml() (*asset, error) {
	bytes, err := companiesRamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "companies.raml", size: 3078, mode: os.FileMode(420), modTime: time.Unix(1458298711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _contractsRaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x5d\x6f\xeb\x44\x10\x7d\xf7\xaf\x18\x2e\x42\x80\x54\x12\x27\xea\xbd\xba\xf2\x0b\x2a\xa1\x85\x88\x16\x50\x3f\x1e\x50\x55\x55\x9b\xf5\x24\x5e\xea\xec\x9a\xfd\x68\x63\x4a\xff\x3b\xb3\x6b\x7b\x6d\x27\x94\x0a\x90\xe8\x43\x15\x8f\x77\xe6\x9c\x39\x73\x76\xfc\xe9\x67\x97\x27\x17\xe7\x30\x9b\xa4\x89\x15\xb6\xc4\x0c\x96\xd6\xfc\xa2\xdc\x4f\xb2\x14\x12\x93\x47\xd4\x46\x28\x99\x41\x3a\x99\x25\x2b\x66\xf0\x46\x8b\x0c\xa6\x89\x41\xee\xb4\xb0\xf5\x15\x2f\x70\x8b\x26\x4b\x00\xbe\x02\xc5\x9c\x2d\xee\xe7\xf7\x69\x06\x9f\x08\xc9\x4b\x97\x23\xec\x1d\x9c\xc6\x33\x13\xcd\xb6\x65\x92\xd8\xba\x6a\xd2\xaf\xc4\x46\x32\xeb\x34\xfa\x07\x80\x4a\xab\x0a\xb5\x15\xcd\x4b\xff\x67\xe8\x00\xe6\xdf\xd4\x19\x18\xab\x85\xdc\xb4\xe1\x9c\x59\x22\xed\xff\xb7\x81\xca\xad\x4a\xc1\x7f\xc0\xba\x4b\x04\xf0\x20\x7b\x69\x94\x88\x86\x6b\x51\xd9\xd0\xde\x75\x81\x6d\x22\x3c\x60\x0d\xce\x60\x3e\x80\x1d\xf0\x3a\x28\x47\xd1\x85\x92\x56\x33\x6e\x5f\x63\x5e\xb1\xd1\xe3\xb8\xc0\xed\x5d\x0c\x6f\x85\x5c\x5a\xdc\x9a\x0c\xe6\x7d\x8c\xed\xba\x58\x1a\x83\x4e\x8a\xdf\x1c\xb6\x71\xab\x5d\xd7\x3a\x27\x22\x28\xed\x5e\xab\xbc\xa5\x77\xed\x51\xff\x5e\x13\x42\x3b\x47\xb9\xb1\x45\x06\xc7\xe9\x5f\x2b\x75\xa6\x11\x61\x2d\xb0\xcc\xc1\x2a\x58\x61\xd0\x0a\xd6\x4a\x83\x65\x1b\x03\xab\x1a\xac\xd7\x92\x5a\xae\x81\x6b\x64\x96\xea\x03\x8b\x24\xda\xa2\x42\x3e\xb2\x52\xf8\xa9\x99\xaf\xdf\xd6\x25\x6a\x30\x7b\x85\x54\x29\x8c\x05\xb5\x8e\x28\xcb\xfc\x73\x43\x3c\x84\x89\x91\x21\xe2\xa4\x2d\x82\x3b\x52\x2b\xff\xdf\x08\x18\x60\xb2\xc1\xf4\x57\x0a\x5c\xa5\x64\x24\x52\x09\x4d\x06\x19\xda\xb8\xaf\xf4\x4f\x7c\xfc\x47\x0c\x43\xf0\x74\x5f\xc5\xe3\xfb\xc9\x14\xcc\x14\x9e\x69\x37\x25\x32\xe6\x51\x78\x68\xcd\xd3\x3f\x74\x9e\x39\x02\x22\x9e\x87\x70\x20\xca\x3c\x54\xa0\x3a\x19\xa2\x29\xe0\xac\xe4\xae\xa4\x78\x04\xa2\x62\xec\xa1\x79\xfc\xd5\x50\x92\xc6\x8a\xfa\x24\x94\xa6\x46\x4b\x23\x4a\xf4\x24\x6c\xa1\x9c\x0d\x41\x91\x07\xd4\x78\xfd\x3c\x4b\x2d\xb6\xe1\x9d\xc4\x27\xbf\x9d\x0c\x90\xeb\x4c\xc5\x38\xfd\xfa\x02\x77\x1c\x2b\x2a\x51\xa0\xf4\x67\x6a\x60\x55\x85\x4c\xd3\xdc\x43\x0a\x0d\xdf\xa1\xf9\x32\xd4\x44\xc9\x15\xad\x26\x7a\x03\xce\xae\x3f\x0e\xbb\x38\xd3\x6a\xdb\xcc\x8d\x10\x5d\x69\xdb\x06\x18\x5c\x7d\x7f\x32\x7f\xff\x81\x7c\x5e\x96\xea\x89\x0c\x4f\x3e\x67\x70\xb9\xfc\xf9\xf4\xe2\xdb\xd9\x87\xf4\x88\x28\xed\x2c\xf8\x05\xf9\xfe\xe3\xa2\x40\xfe\x70\xda\x60\x78\xe8\xa6\x52\x68\x8e\x72\xd2\x5d\x9a\xd2\x8e\xc0\xb5\xd8\x4d\x92\xfd\x1d\x43\x16\x88\x7b\x90\xfc\xd7\xac\xd9\x66\xe9\xdd\xf6\xeb\x15\xee\x92\x69\xa7\x59\xd8\x2a\x95\x32\xed\xf2\x19\x99\x61\xe1\xaf\x9f\x27\x4f\x7a\x45\x91\x9b\x6e\x09\x8a\xec\x67\xfa\xa5\x34\x4f\x67\xbd\xcf\x56\x2a\x1f\x6c\x4f\xf0\x52\xd2\x66\x0c\x33\x9b\xfa\x39\x0e\xdf\x75\xae\x5c\x8c\x2f\xf8\xf1\xb0\xde\x88\xd5\x8d\xf4\x7d\x28\x2d\x7e\xa7\x1d\x4b\x47\xa6\xcf\xbd\x49\x5f\x9a\x9c\x0d\xda\xb8\xf5\x07\x0a\x0c\xbe\x2f\xcf\x60\xb8\xf2\x5f\x0e\xd2\xe5\x5d\x97\x9f\x51\xbf\xf9\x3b\xb8\x83\x17\xe8\xee\xee\x08\xf9\x3b\xb4\x87\x9b\xe8\x40\x09\xaf\x45\x3a\xec\x70\x5f\x8d\xb7\xf4\x78\x45\x11\xaf\xc9\xf1\xf0\xe4\x88\xdb\x8f\xca\x92\xb9\x9c\xec\x3e\x3b\xd3\x81\x27\x62\x4e\x3f\xe7\x7f\x21\x4e\xb8\xec\x5c\x54\x4c\xda\xb1\x46\x07\x5c\xbc\x05\x0f\x85\xfa\x2f\x52\x44\x53\x27\x7f\x06\x00\x00\xff\xff\xa9\xd0\x6d\x47\x70\x08\x00\x00")

func contractsRamlBytes() ([]byte, error) {
	return bindataRead(
		_contractsRaml,
		"contracts.raml",
	)
}

func contractsRaml() (*asset, error) {
	bytes, err := contractsRamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "contracts.raml", size: 2160, mode: os.FileMode(420), modTime: time.Unix(1458298225, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationsRaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xdf\x73\xd3\x38\x10\x7e\xcf\x5f\xb1\xc7\xcd\xbd\xb5\x8e\x53\x02\x5c\xf3\xd6\x03\x86\xe9\x5c\x5b\x18\x0a\x74\x0e\x86\xa1\xb2\xad\x24\x02\x5b\x32\x92\xdc\x26\x70\xfd\xdf\x6f\x25\xd9\xf1\x6f\x27\xfd\x71\x2f\xe4\x25\x63\x5b\xab\x5d\x7d\xdf\xee\xa7\x95\x7e\xff\xe3\xed\xd1\xe9\x09\x4c\x3c\x7f\xa4\x99\x8e\xe9\x0c\x8e\xb5\xfa\x47\x64\xaf\x79\xcc\x38\x1d\x5d\x51\xa9\x98\xe0\x33\xf0\xbd\xc9\x28\x20\x8a\xbe\x97\x6c\x06\xe3\x91\xa2\x61\x26\x99\x5e\x9f\x87\x4b\x9a\x50\x35\x1b\x01\xec\x83\x20\x99\x5e\x7e\x39\xf8\xe2\xcf\xe0\x37\xc6\xc3\x38\x8b\x28\x34\x06\x8e\x37\x63\x3c\x49\x92\x78\x34\xd2\xeb\xd4\x99\xbf\x96\x0b\xc2\xd9\x0f\xa2\x8d\x3b\x7c\x06\x48\xa5\x48\xa9\xd4\xcc\x7d\x37\xbf\x45\x2c\x02\x12\xb3\xa8\x78\x06\x30\xe6\x33\x50\x5a\x32\xbe\xd8\xbc\x4c\x18\x3f\xa1\x7c\xa1\x97\x33\x78\x5c\xbe\x24\xab\xe2\xe5\xe4\x89\x9f\xbf\x4e\xb3\x20\x66\xe1\xdf\x74\xad\xba\xa7\xfc\xf4\xb9\x6a\x7f\xac\x69\xa2\x66\x70\x50\x58\x47\xfc\x36\x66\x13\xdf\xdf\xbc\x8d\xa8\x0a\x25\x4b\xed\x5a\xe1\x84\x29\x0d\x62\x0e\xa2\x82\x00\xbc\x38\x3b\xf7\xf2\xe1\xe2\x9a\x23\x0b\x77\x09\xb0\xc7\x51\xa6\x70\x3e\xb8\x34\x7f\x9c\x20\x29\x97\x85\xa7\x84\x26\xc1\x6d\x5d\x6d\x5b\x95\x73\x76\xbd\x14\x40\x24\xcd\x3d\x00\xe3\xa0\x97\x4c\xd5\x96\x5c\x04\x91\x67\xce\x83\x40\xeb\x12\xe6\x38\x32\x81\xa8\x2c\xa8\xf9\x53\x23\x6b\x43\x57\x24\x49\x31\xef\x9b\x29\x06\x0b\x49\x29\x67\xda\xbc\xa0\x03\xe9\xb2\x0f\x93\xa3\xc3\x8b\x8b\xe5\x53\x76\xf4\x72\xfa\xf6\xe3\xab\xb3\x67\x64\xb5\x7e\xba\xfa\x18\x64\x17\xd9\xc9\x37\xfe\xfd\xe2\x44\x7e\xe8\xca\x97\xfd\x9a\x03\x2f\x14\x49\x0f\xdd\xfb\x16\xc2\x49\xe3\xf9\xa0\xf1\xfc\xb8\x8f\x42\xf7\x79\xda\x0b\xee\x3e\x90\x08\x0b\xc6\x6b\x45\x33\x2a\x26\xeb\xab\xc6\x22\x7f\xb6\x54\x63\x8d\x90\xf7\x8a\x46\x98\x0c\x94\x03\x51\x8a\x2d\x38\x0e\x04\x52\x64\x85\xc6\x1c\xe1\x8d\x9c\xe8\xe2\x68\xe3\x18\x02\x11\x98\x11\xc7\xfc\x8a\xe9\x41\xe5\x70\x46\xad\xd8\xa4\x88\x2b\xe1\xf7\x2c\x00\xfd\xf3\x2c\x99\xc1\x27\xcb\xcc\x5e\x1e\x6d\x99\x87\xa1\xa4\x44\x53\xcc\x98\x08\xff\x7a\x03\x76\xc1\x56\xdc\x3a\xa2\x47\x8d\x39\xce\x33\xbe\x07\xfe\x53\x38\x13\x57\x30\x39\x3c\x9c\x82\xff\xe7\x6c\x7a\x38\x7b\xfc\x0c\x5e\x9d\xbe\x1b\x39\xdd\xa5\xd1\x5f\x6b\x0c\xa7\xd4\x5b\xf8\x3c\x1a\xd7\x52\xdb\x38\x4e\x85\xd2\x2e\x80\x1a\x03\xcf\xad\x27\x04\x9d\xd3\xeb\x3a\xd6\x30\xb1\x81\x82\x5a\x8a\x2c\x8e\x20\xa0\xae\x4c\x69\x9e\x91\x10\x63\x45\x7b\xf0\xc1\x54\x87\xd3\x28\x2c\x60\x84\x79\x2e\x64\x82\xa4\x22\x79\x28\xf1\xe1\x37\x60\x73\x6b\x54\x17\x7e\x20\x71\x2c\xae\x15\xd6\x2c\x27\x0b\x7c\xe6\xa8\x0d\xb9\x06\x18\x9f\xae\xf6\x03\x11\xad\x0b\xc8\x48\x9a\x62\xa9\x59\x3f\xe3\xaf\xaa\x20\xb6\xe4\xa8\xba\x5d\xd8\x4f\x92\xaa\x14\x57\x5e\x52\x7e\xe0\x4f\x4a\xa3\xea\xd4\xc3\xd3\x0f\xb8\x00\x98\x56\xe7\xac\x27\x36\x37\x64\x08\xc9\x7e\xd0\x08\x47\x2c\x68\x17\xf6\xff\xe6\xb6\xaf\xa8\xae\x4b\x91\x07\x47\xb9\xb5\x43\x36\x66\x09\xd3\xca\x2a\xa6\x8d\xd4\xe1\x2b\xe9\xf7\x8c\x2a\x6d\x6a\xa6\x04\xad\x63\xdd\xfe\xc3\xad\x1b\xe5\x16\x47\x8c\x7f\x16\xb2\x78\xe3\x0c\x36\xcb\x03\xa8\x66\x64\xa5\x01\xf8\x09\x2a\x14\x66\x6b\xc7\x3c\x7d\x54\x5d\xeb\x0c\xf3\x2f\x7a\xb4\xd7\x78\x69\x35\xe8\x11\x7c\x86\x1b\x28\x0a\xab\x86\x5c\x13\x31\x4c\xcd\xb9\x28\xaa\xa9\x89\x40\x03\x83\x36\x0a\xdb\x70\x18\xc8\x80\x46\x0e\x0c\x67\x41\x61\x30\xed\x35\x38\x13\x1a\xe6\x22\xe3\x6e\x74\x9a\xdd\x1d\xd6\x6d\x08\xbe\x4f\x8d\x3c\xf5\x82\x58\x87\x68\x08\x9e\x5e\x68\x7e\x0d\x1e\xec\x88\x71\x63\x1b\x2d\xb5\xf4\xa1\xb8\x69\xf8\x3f\xb2\xbb\x61\x6d\x2b\xec\xea\x8d\xee\x56\xd0\x6e\xce\x72\xd3\x6b\xf3\xd4\x50\xcb\x56\x78\xa7\x2e\x2a\xb7\x67\xa3\x18\xa9\x2c\x0c\xa9\x52\xf3\x2c\x8e\xd7\x35\xab\x36\xc3\xdb\x39\xee\x09\xb3\xc5\xf0\x2e\x1c\xb7\x58\x1e\xe6\xd9\x48\x5b\xd1\x4d\xdc\x54\x95\x3d\xa6\xba\xd6\x18\x3c\x0c\xe5\x8d\x60\xde\xd2\x44\x5c\xd1\x92\xf4\xb9\x14\x49\x8d\xf6\x8a\x61\x27\x69\x86\xb6\x69\x13\xce\x2e\xe2\xdc\x82\x06\x78\x6b\x41\xbd\x1b\xd8\x1d\x70\x37\x0c\xdf\x61\x2b\x60\xbb\x0a\x21\x5d\x2f\x51\xd5\x9f\x48\x50\x05\x1c\x29\xa1\x2b\xd3\x5b\x34\x26\x3e\xdc\x6d\x62\x12\x9b\x1d\x65\x6d\xba\x91\x02\xc9\xbc\x6d\x1c\xd7\x5b\xe9\xff\xbd\x88\x6d\x1b\x6a\xf8\xb4\x71\x61\x09\x07\x14\x1b\xe9\xbc\x7f\x32\x47\x90\x56\x77\x5b\x4c\x73\x57\x61\xdc\xa5\xb2\x3b\x6a\xbb\x3b\xee\xbc\x07\xed\x4f\x92\xee\xf2\xde\xa5\xc0\x7b\x4b\xfc\x97\xc9\x3c\xee\x58\xf6\x06\x75\xa5\x4b\x59\x1e\x4e\x5b\x7a\xd4\x25\x8f\x6c\x50\x5d\x7a\x53\xa7\x53\x61\x1a\x8e\x5e\xdb\xe9\xa5\x75\x37\x98\x3d\x1d\x54\xef\x4a\x76\x27\xdd\xfd\xda\xee\xca\x3f\x14\x5c\x4b\x12\x6a\x75\xcf\xa6\xaa\xd9\xac\x96\xf3\xda\x5e\xb6\x46\x44\xa5\x33\xc6\xf0\x98\x4a\x63\xb2\x3e\xb3\x67\x55\x6c\x61\x9f\x17\x86\xdd\xfa\x61\x9a\x5c\x93\xa9\x9b\xf9\xcd\x49\x19\x8f\x00\xad\xec\xc5\x84\x9b\x18\x3d\x31\x1f\x52\x62\x0f\xba\x1e\x36\x49\x91\x55\x7a\x15\x52\x1e\x99\x33\x42\xb0\xb6\x27\xd2\x32\xb9\xf1\xf4\x20\xd7\x6f\x88\xc4\x70\x74\xed\x8e\x60\x73\x2f\xf0\x72\x95\x32\x04\xa8\x5b\x6c\x02\x81\xc7\x56\xc2\x87\x95\xc4\xdd\xfa\x99\xc0\xa8\x9b\xab\x5c\xcd\x9e\x8d\x88\xce\x49\x16\x9b\xd3\x5f\xbc\xb6\xc3\xf0\x0b\xbb\xaa\xae\xd9\x1c\x7a\x24\xd5\x99\xc4\x46\xc3\x6b\x38\x33\x27\x20\x1b\x20\xcc\x49\xac\x68\x75\x83\xd6\x88\x43\x77\xdc\x8c\x6b\xba\x68\xa8\x4e\x23\xee\x73\x63\x8d\x88\xce\x15\xd5\x7b\xa6\xb8\x31\x7d\x31\x97\x24\xa2\xbb\x40\x28\x3d\x78\x91\x87\x8d\xc8\x5f\xfa\x97\xbb\x87\x95\x90\xd5\x9d\x83\x3a\x25\x2b\xe3\x1f\x8f\xd2\x58\x0e\x5b\xa3\x7a\x72\x9b\xb0\xf2\xd0\x58\x62\xee\x35\x0e\x9e\xf8\x79\xc1\xb0\xcd\x3d\xca\x7d\x4b\x66\xf7\x9a\x78\xe3\xb2\xb5\xbc\xc2\xd9\x52\x1c\x71\x7e\xaf\x98\xe6\x59\x5e\x89\xd9\x62\xe3\xee\x1b\x71\xf3\xfd\x2a\x86\x6e\x19\x07\x36\x4b\xbf\xc9\xd8\x7d\x77\xbd\x72\x6d\xee\x38\x6d\xb1\xde\xad\xef\x6c\xe0\xe5\x34\xbd\x05\x59\xff\x26\xf0\x9c\xf0\x90\xc6\xd8\x92\xb4\xe1\xf2\x76\xd3\xff\x9e\x1d\xa0\xab\x85\x70\xe2\x14\x5a\x97\x31\x0a\xf8\x7f\x01\x00\x00\xff\xff\x6e\x5a\x2c\xd2\x5c\x18\x00\x00")

func organizationsRamlBytes() ([]byte, error) {
	return bindataRead(
		_organizationsRaml,
		"organizations.raml",
	)
}

func organizationsRaml() (*asset, error) {
	bytes, err := organizationsRamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organizations.raml", size: 6236, mode: os.FileMode(420), modTime: time.Unix(1458298084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _securityschemesOauth_2_0Raml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x52\xb1\x8e\xd4\x40\x0c\xed\xf3\x15\x56\x1a\x2a\x92\xe3\x74\x55\xba\x43\x48\x94\x50\xb0\x15\x42\x68\x98\x31\x9b\x11\xd9\xf1\x60\x3b\x7b\x04\xf1\xf1\x78\x92\xcd\x6a\xb3\xda\x95\xa8\x48\x15\x3d\xfb\x3d\x3f\xbf\x71\x40\xf1\x1c\xb3\x46\x4a\x1d\xfc\xa9\x00\x3e\x3c\x8f\xda\x3f\x42\x14\x70\x90\x99\x94\x3c\x0d\xa0\xbd\x53\x18\x50\x05\xf0\x97\x22\x27\x37\x80\xcb\x59\x80\xf1\xe7\x88\xa2\xe0\x8c\x43\x1c\x7f\xbb\xa2\x03\x4a\xc6\x8c\x47\xa7\x68\x7a\x01\xd5\xc5\x41\x20\x26\x13\x1c\x05\xf9\x95\x29\x7b\x4f\x63\x52\x78\x89\x46\x1b\x15\xf6\xa8\x1a\xd3\xde\xc6\x60\x64\xc8\x4e\xe4\x85\x38\x34\x95\x4e\x19\xbb\xc5\x11\x3c\x36\x0f\xd5\x62\xf6\x1b\x86\xb7\x53\x67\xd2\x3d\xba\x80\x2c\xe5\x17\xe0\xf9\xd2\xc2\x02\x95\xe1\x57\xdb\x2d\xdf\x4e\x30\x14\x97\x82\x29\x98\xab\xa3\x1b\x62\x58\xc7\x14\x73\x28\x62\xe5\x1f\x98\x1a\x78\x47\x90\x48\x8b\x71\x43\xcc\x67\x8f\x3c\xdb\x3e\x6b\x19\x02\xf5\xc2\xf9\x3a\x73\x6a\xb0\x4c\x78\x02\x51\x2e\x3b\x65\xc7\xee\x80\x16\x5a\x63\x94\xb9\xf2\x71\x45\x4e\xce\x2f\xc9\xff\xdb\xf8\x26\xb5\xfa\x94\xa8\xb5\x30\x4a\xa6\x24\x78\xb2\xf8\xf4\xf0\x74\xd3\xd9\x2e\xad\x2f\x8f\xa1\x92\xe5\x15\x67\xca\xe6\x20\x76\x1c\x3b\xe8\x55\xb3\x74\x6d\x1b\x55\x26\x1a\x1b\x4a\x43\x4c\xd8\x1e\xdf\xb4\x54\x7a\xdb\xb3\x4e\xb5\x06\xf2\xa9\xec\xf1\x4f\xd4\x8b\xfc\xae\x47\xbf\x67\x97\x54\x3a\xf8\x0c\x9e\x02\xc2\x17\xab\x8b\xa7\xbc\xee\xf5\x1a\xea\x72\x92\x9d\x0b\x87\x98\xea\x0d\x14\xd3\x77\x3a\x23\xc4\x7b\x97\xd6\xdb\xda\x36\x6f\x4a\x6c\xf9\xdd\xae\xdc\x97\xf3\x94\x94\x9d\x37\x97\x1b\xb6\xa7\x43\x76\x69\xba\x9a\xb6\xa2\x37\x5b\x37\x33\x56\xf0\xae\xfc\x02\xdf\x41\xed\x6a\x35\xfa\x68\x0a\x5a\x57\x7f\x03\x00\x00\xff\xff\xbf\x97\x5e\xde\x24\x04\x00\x00")

func securityschemesOauth_2_0RamlBytes() ([]byte, error) {
	return bindataRead(
		_securityschemesOauth_2_0Raml,
		"securitySchemes/oauth_2_0.raml",
	)
}

func securityschemesOauth_2_0Raml() (*asset, error) {
	bytes, err := securityschemesOauth_2_0RamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "securitySchemes/oauth_2_0.raml", size: 1060, mode: os.FileMode(420), modTime: time.Unix(1458298636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _userorganizationsRaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x41\x6f\xdb\x30\x0c\x85\xef\xfa\x15\x5c\x87\xdd\x36\xdb\x29\x76\xf2\xad\xbb\x0c\x1d\x36\x14\x68\xb1\xc3\x50\x04\x85\x22\xb3\x09\x0b\x59\x12\x44\xb9\x83\x97\xe5\xbf\x4f\xb2\x93\x46\xce\xdc\x6c\xbc\x38\x08\xa9\xf7\xf8\x3e\xe9\xed\xbb\xdb\xab\x6f\x5f\x61\x51\x54\x22\x50\xd0\x58\xc3\x75\xe0\x1f\xb6\xbb\x31\x9a\x0c\x8a\x67\xf4\x4c\xd6\xd4\x50\x15\x0b\xb1\x92\x8c\xdf\x3d\xd5\x50\x0a\x46\xd5\x79\x0a\xfd\x9d\xda\x60\x8b\x5c\x0b\x80\x0f\x60\x65\x17\x36\x0f\x97\x0f\x55\x0d\x6f\xc8\x28\xdd\x35\x08\x27\x83\xe5\xcb\x4c\xe1\x65\xab\x45\xe8\x5d\x3a\x1d\x8f\xa7\xfa\x62\xc9\xdc\xf8\xb5\x34\xf4\x4b\x86\x68\x7b\x6d\x9e\x29\x0c\xbf\xea\xfd\x04\x80\xf3\xd6\xa1\x0f\x34\x9a\x1e\xcb\x66\xe7\x6a\xe0\xe0\xc9\xac\x27\x03\x1d\xa3\x9f\x6d\x78\x1b\x63\x4f\xfe\x49\x95\x36\x9b\x1d\x4f\x85\xa6\x6b\x6b\xb8\xb7\x3f\x0d\xfa\xf7\xd0\x62\xbb\x42\xbf\x14\x23\x15\x6c\x3e\xf5\xb1\x77\xa4\x01\x4b\x51\x26\x73\x2e\xb7\xe9\x63\x64\x8b\xbb\x32\x5f\x77\x48\x92\x9f\xcd\x40\x6e\x81\x95\x4d\x8c\xa2\xe2\xc5\x10\x41\x36\x2d\x99\x0b\x58\xc2\x2e\x0a\x03\xac\x31\x8c\xcb\x37\xc8\xca\x93\x1b\xf3\x7f\xc6\x00\x61\x83\xa0\x89\xc3\x04\x0d\x83\x1c\x48\x00\x31\x0c\xeb\xc7\xee\x3e\x00\xd8\xc7\x41\xc8\x23\xbb\x38\x78\x04\x7c\x59\x55\x47\x3e\x2b\xdb\xf4\x39\x2d\xe9\x9c\x26\x35\x68\x97\x4f\x9c\xdf\xd4\xb9\xdb\x82\xd1\xfc\x00\xf8\x7e\x79\xd2\x1d\x37\xca\xda\xb1\x5f\x6e\xd7\xda\xae\xa4\xa6\x66\x57\xa6\x3b\x8b\x3c\xd3\x67\x37\x2a\x3b\xcb\xe1\xe0\x31\x41\x71\xa5\x14\xba\xb0\x57\xe4\x0d\x39\x20\x33\x41\x22\xe6\x82\x9d\x8b\x35\x3e\x8d\xd7\x1f\xeb\x7e\xf4\x2f\x8e\x89\xe4\x22\x17\x3a\x65\xf9\x2f\x9a\xff\x69\xdd\xa0\xc6\x80\xb3\x30\x7e\xbf\xe8\xdd\xe2\x13\xaa\x13\x2c\x07\x95\x44\x48\x4e\x21\x15\xe7\x42\x7d\xcc\xd7\x7c\xc5\x2f\xd5\x5d\x17\xef\x82\x1f\x3b\xad\xfb\x28\x94\xfc\xb1\xc9\x6c\x0b\xf1\x27\x00\x00\xff\xff\x25\x7e\xc0\x7a\x8e\x04\x00\x00")

func userorganizationsRamlBytes() ([]byte, error) {
	return bindataRead(
		_userorganizationsRaml,
		"userorganizations.raml",
	)
}

func userorganizationsRaml() (*asset, error) {
	bytes, err := userorganizationsRamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "userorganizations.raml", size: 1166, mode: os.FileMode(420), modTime: time.Unix(1458297246, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _usersRaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x6f\x53\x1b\xbd\x11\x7f\xef\x4f\xa1\x87\xb6\xd3\x76\x02\xf6\xd9\x98\xa7\x4f\xfc\x26\x01\xf2\xa7\xa4\x90\x64\x02\x69\xa7\x43\x69\xd0\xdd\xc9\xb6\xca\x9d\x74\x95\x74\x36\x0e\x93\xef\xde\x95\x4e\x67\xeb\xfe\x81\x8d\x4d\x08\x99\x7a\x26\xc1\x3e\x49\xab\xdf\xae\x76\x7f\x5a\xed\xe9\x77\x7f\xf8\xb4\x7f\x72\x8c\xba\x6d\xaf\xa5\xa8\x8a\xc8\x00\x1d\x29\xf9\x4f\x9e\x7e\x60\x11\x65\xa4\x35\x21\x42\x52\xce\x06\xc8\x6b\x77\x5b\x3e\x96\xe4\xb3\xa0\x03\xd4\x69\x49\x12\xa4\x82\xaa\xd9\x69\x30\x26\x31\x91\x83\x16\x42\x3b\x88\xe3\x54\x8d\xbf\xf4\xbe\x78\x03\xf4\x0b\x65\x41\x94\x86\x04\x95\x3a\x76\xe6\x7d\xda\x02\xc7\x51\x4b\xcd\x92\x6c\xf4\x69\xc0\x13\xa2\xbf\x20\x14\x12\x19\x08\x9a\x28\x33\xef\x1b\x2e\x10\x66\x88\x5c\x27\x11\x66\x58\x3f\x43\xd8\xe7\xa9\x42\x52\x0f\x90\xd0\x16\x66\x5f\x63\x9c\x24\x94\x8d\xb6\x61\x46\x82\xc6\x4a\x25\x72\xd0\xe9\x8c\xa8\x1a\xa7\x7e\x3b\xe0\x71\x87\x2a\x39\xe3\x29\x37\x6a\x75\x68\x48\x18\xa8\x3b\x93\x44\x80\x86\x1d\x3f\xe2\x7e\x27\xc6\x52\xc1\xf7\x90\x07\x16\x65\xaf\x93\xcd\xd1\x8e\x43\x83\x2b\x11\xf0\x4b\x28\x9a\x01\xce\x3e\x29\x48\x60\x38\x06\xb3\x49\x25\x60\xfa\x79\xc3\x48\x60\xa6\x48\x78\xc6\x17\x7d\x11\xd2\xda\x56\x7a\x96\x14\x3e\x1b\x13\xc4\xc5\x08\x33\xfa\x35\x53\x57\x8d\xb1\x42\x54\xe6\x12\x91\x20\x38\x44\x38\x08\x88\x94\x48\x71\x24\x79\x0c\x03\x86\xd0\x8d\x18\x34\x7f\x94\x88\xb2\x21\x17\xb1\x19\x3d\x9f\x05\x87\xa1\x80\x11\x2f\x06\x4d\xf3\x9e\x64\xf6\xcb\x45\x45\xd8\x27\x91\xcc\x7f\xe5\x73\x73\x46\xcc\xa4\x4e\x0f\x55\xc6\x2b\xc8\x7f\x53\x02\xa6\x0c\xdb\xce\x54\x75\xb6\xd3\x9f\xad\xf3\x8b\xad\xe2\x93\x06\x2b\x25\xa9\x1f\xd1\xe0\x6f\x64\x06\x2a\xd8\xb6\xf3\x8b\x79\x2b\xac\x3e\x8d\x9e\xae\x6e\x63\x98\xfb\xc9\xa2\xf7\x31\xbb\x7a\xb2\xe0\x87\x38\x20\x3e\xe7\xa0\x00\x82\x3f\x11\xc1\x8b\x88\xc9\xb8\xa3\xa6\xc1\x85\x25\x9b\xc2\xdb\x71\xce\x92\x45\x8e\xa9\x54\xda\x00\x05\x31\x46\x5f\xab\xa2\x31\x97\xab\x7a\x00\x04\xa8\x59\x0d\xf8\x4b\xa0\x98\xc4\x3e\x90\xf2\x98\x26\x20\xa4\xdd\x82\x59\x0e\x60\x01\xf6\x83\x80\xa7\x4c\x0d\x1a\x89\x8a\xc2\x32\x2d\x41\x45\x31\xbe\x3e\x26\x6c\xa4\xc6\x03\xb4\xeb\x2d\x96\x98\x06\xab\x8d\xed\x2e\xc6\x1a\x5c\x62\xb6\xda\xf8\xbe\xa7\x15\xfb\xa8\xe3\x82\xa5\x5a\x5f\xab\x18\x56\x40\xd1\x60\xc3\x7f\xff\xeb\xd9\xb9\xb7\xf3\xfc\xe2\xd9\xef\x75\xbf\xfd\x8c\xdb\x9a\x95\x0f\x80\xea\x8b\xee\xd0\x00\xa1\xc9\x00\xd0\x91\x10\xb5\xba\x88\xbd\x85\x08\x26\x56\x1f\xee\x98\x91\x83\x83\x88\x17\x6b\x29\x51\xb3\x12\xcb\xc9\xe8\x2f\x64\x24\x5c\x2a\x1c\x05\x3c\x24\xab\x8b\xe9\x69\x31\x9f\xe5\x7c\x31\x6f\xdb\x4e\xd7\xd1\xd3\xb4\x50\x36\x9f\xb6\x66\x0f\xa9\xdb\x42\xae\x13\x2a\x80\x85\x51\x88\x15\xb9\x65\x63\x79\x00\xb6\x5f\x5d\xa4\x13\x19\xb7\xee\xf0\xab\x4b\xb6\xb1\xd4\xcc\xee\xab\x8b\x74\xf8\xa9\x86\x77\xd7\xf1\xc6\x9c\xa2\xef\x13\x97\xa6\x89\x5c\xe3\x38\x89\x48\x5d\x3e\xe7\x73\xbf\xce\x71\x0a\x12\x77\x50\xf7\xed\xdf\x4f\xff\xb2\xd7\xef\xab\xc9\x3f\x4e\x7a\x67\x27\xdd\xdd\xc9\xfb\xbf\xfe\x26\x7d\x8e\xe3\x77\x5f\x8f\x7f\x8d\xdf\xed\xfe\x5a\x72\x30\x1d\x06\xdd\xdf\x76\xba\xde\x4e\xcf\x2b\x7a\x59\x51\xf4\x94\x8b\x2b\x03\xe2\x25\x24\xaf\x09\x66\x33\x9d\xc4\x16\x7a\x8c\xb9\x85\xf9\xd2\x6a\x51\xe9\xb1\x15\x62\x16\x10\x04\x89\xb8\xbf\x95\xf5\xd4\xc9\xaf\x79\xa8\x9f\xb5\xf3\x71\xb0\xd9\x14\xbd\xd3\x85\xe2\xc3\x24\xcf\x76\x7b\xdd\xde\x6e\xdf\xfe\x73\x1a\xc9\x08\x1a\x41\xa1\x9a\x46\xec\x92\x72\x01\x73\xc9\x49\x2c\x3d\xa3\xd3\x44\xaf\xd8\x90\x92\x28\xac\xf4\xb0\xfc\x0b\xd9\x04\x65\xf6\x47\xa5\x0f\x10\x2c\xea\xef\x1d\x54\xa5\x5b\xda\x43\x67\x3c\xe6\x42\xf0\x29\x1c\x24\xaa\x33\x38\xc4\x86\xce\x76\x9e\xf7\xf7\xbc\xea\x72\x34\x00\x3f\xc4\x09\x85\xb1\xe8\x10\x7e\x35\x22\xcf\x3b\xdd\x02\xbe\xbb\x11\xe8\x5d\xcf\xf3\x0a\xd1\x5b\x84\x7d\xe5\x07\x55\x3d\x4c\x72\x80\xce\x8e\xf5\x1a\xee\x2d\xfe\xab\xf4\xd3\x79\x00\xda\x3f\x38\x7c\xf5\xfa\xcd\x92\x58\x5b\x59\x48\x4d\x28\x99\x6e\x84\xf5\x57\x3d\x06\xfc\x9f\xad\x7f\x0e\xb6\xce\x9f\x16\x73\xef\x85\x07\x40\x87\x77\x9c\xb2\x0f\x4e\xf3\x11\x9b\x40\xc4\x99\x9c\xbb\xd1\xf3\x5c\x71\x15\x14\xda\x2d\x2b\x0f\x05\x8f\x96\xcd\x4e\xf4\x92\x0f\xd0\x39\x9f\x32\x22\xb6\x6d\xde\x6e\x90\x1e\x72\x88\x14\x1c\xa8\x53\x3a\x62\x30\xe8\x53\x96\xf6\xdf\x92\xbe\xda\xfe\x47\x61\xd5\x3d\xb1\xd0\x14\x64\x9f\x66\x65\x19\x12\x1e\xc0\xa3\xf3\x45\x39\x06\x5d\xb4\x3a\x5a\x19\x23\x52\xb3\x45\x4d\x9d\xe5\x50\x10\xc8\x7b\x10\x46\x8c\x4c\x8d\xe6\xa6\x8b\xcf\x43\x27\x5f\x84\xa3\x1c\x04\x9f\x31\x56\xe7\x3f\x92\xb3\x3a\x3b\xe8\xfc\x4e\xeb\xd8\xb9\xc9\xa3\xfa\x5b\xd6\x6d\xb4\xc8\x9f\x5d\x94\x4e\xcd\xe8\xc6\xd6\x74\x34\xf6\x2d\x63\x7c\x1c\x42\x1e\xb7\x85\x2e\xd0\x37\x94\x07\x39\xb8\x7b\x02\x4b\x5f\xf6\xe7\x9e\xe7\x55\x69\xad\x88\xde\xfd\xdc\xae\x49\x83\x56\xc6\xde\xe9\x46\xb4\x28\x98\xfe\x73\x12\x1a\xd3\xeb\x2a\x17\xcd\x8e\x7f\x7a\x5c\x3b\x6b\xd0\x3f\x2f\x2f\x73\x63\x5e\x5e\xea\x52\x10\xe3\x0a\xe1\x28\xe2\x53\x38\x0d\x9b\x82\x91\x39\x34\x47\x70\x92\x8e\x40\x80\x34\x07\x46\xdd\xc7\x27\x28\x35\xc2\x43\x38\x5f\xc2\xb8\x29\x9e\x6d\x9b\x93\x26\xd3\xf5\xa1\xc8\x71\x36\x33\xe4\x4f\x11\xbd\x22\x36\x4c\x4d\x61\x2d\x8f\x7b\x5d\x6e\xd2\x84\xf0\xe7\x76\xf3\x2a\x94\x56\xa0\x6a\xfb\xbb\x6c\x5e\xb2\xb4\xfe\xf4\xbd\xdd\xc6\xc2\xc2\xdc\x38\xb9\x69\xb4\x61\xde\x70\xe1\xd3\x30\x24\xec\x97\xa2\x0b\x76\x74\x49\xec\xfe\x7e\xa8\x47\x97\x16\x90\xca\x24\xc2\xb3\xf7\x26\x55\x7c\x4b\x94\x86\x7d\x54\x29\xbb\x3d\x8e\xb3\xe6\x1b\x6e\xc9\x04\x13\x1c\x51\xed\x0b\x15\x33\x00\xfb\x88\xd9\x47\x2c\xa0\x97\xb2\x24\xe1\x88\xe4\x57\xa4\x66\xc6\x12\xe9\xb9\xf3\xd8\x9d\x2d\x57\xfa\xfe\x61\xe2\x40\xfc\xde\x86\x6c\xda\x36\x8b\x9f\xba\x4d\xb4\xce\x4c\xee\x2e\xbd\xa0\xdf\x7a\x02\xd6\xf4\x8b\x0b\xbb\xfa\x2a\x1c\xdc\x8c\xbb\x1e\x6b\x5d\x16\x51\x1b\xdb\xdd\xf5\x62\xfb\x2e\x8b\x36\x5b\xb2\x8c\xb0\xd6\xd3\x3a\x37\x86\x00\xbf\x3d\x59\x8f\xab\xf1\x93\xb4\xde\x4d\xec\x66\xc1\x05\x0a\xec\x8e\xed\x6c\x1b\xd6\x20\xed\x5a\xcf\x59\x0e\x4f\x15\x49\x48\x22\xa2\x48\x2d\x98\x57\xa6\x49\x43\xc0\xb5\x0b\x94\x2c\x12\xdf\x07\x66\x83\xb5\x77\x9f\x75\x3d\xb4\x9c\xe3\x2f\x13\xe7\x49\xe5\x5c\xf0\xf0\xb1\x5e\x3d\x8b\x3c\x44\xbc\xd7\xcd\xd5\xe4\x18\x0f\x10\xbc\x8f\xb5\xf3\x56\x9c\x20\x75\x20\x2d\x1f\xc6\x8e\x75\x16\x2f\x3b\xee\x1f\xcc\x65\x54\xc5\x80\x6e\x08\xe9\x92\x73\xba\x8b\xa7\x0f\x99\x6b\x87\xf3\x32\xf1\xa1\x27\xca\x53\xcf\xef\x16\x20\xd5\xf3\xef\x8f\xb8\x21\x96\x51\x3e\xaa\xf3\x6f\x36\x5b\x2a\xaa\x56\x71\xbc\x9f\x88\x2e\xca\x8b\x78\x4f\xba\xd0\x66\xb1\x51\xb2\x09\xba\x28\xa3\x5a\x8e\x2e\x9a\x57\x0d\x0e\xa2\x74\x68\x27\xde\x64\x16\x50\x42\x02\x87\xb0\xec\xfd\xb1\x7d\xbd\x5a\x98\xd6\x9c\x7a\x25\xe0\x14\x04\x25\x84\x85\xda\x6c\x74\x5e\x1f\x92\xda\xb0\x60\x1e\xc1\xe1\x8c\x24\x7f\xf0\x30\x42\x2e\xf0\xc1\x2d\x55\xaf\xc2\x1b\xe8\x5a\x5c\x99\xbe\x6b\xc8\xc8\x0b\x53\xb6\x82\x05\xa2\xea\x4b\x5b\x59\x81\xce\x75\x8a\x7c\xe4\x26\x1d\xa2\xd6\x1d\xe6\x13\xa1\xe9\x98\xc0\xea\xe7\xd7\x64\x74\xb5\xa0\x9b\xdf\x43\xd0\x55\x34\x30\x7b\x1b\x7d\x10\x21\x34\x69\x41\xd6\x49\xfc\x99\x79\x1f\x98\xc7\x55\xe3\x51\xd9\x5e\x77\x7a\x6d\xde\xf1\x84\x75\x85\xb1\xf2\x2d\x82\x0a\xe2\x23\x7b\x63\x4a\x03\xca\xde\x15\x85\x0b\xf4\xdb\x06\x09\x19\xe2\x34\x02\xef\x66\xd1\xcc\x74\x83\x16\x3a\x71\x75\xd4\xfe\x2d\x88\x4a\x05\x2b\xde\x93\x40\xe6\x6e\x81\x81\x86\x86\xb0\xe6\x8b\x17\x9c\x52\x81\xee\x75\x78\x29\x53\x64\xe4\xd4\x62\x2a\x78\x4f\xf5\x48\xb0\xe0\x50\x12\xb5\xad\x6d\x3a\x4c\x23\x34\x84\x48\x4a\xf0\x08\x4c\xd7\x06\x6e\xc8\xe0\x82\xa5\x2f\xbd\xcb\xe5\xe0\xc4\xf8\xfa\x5e\x60\x4e\xf0\xb5\x9e\x97\x20\x49\xbf\x92\x3b\xd1\xec\x2d\x0b\xc7\x42\xa2\xb1\xae\xe4\xf6\xb2\xb7\x86\xae\x1b\x5b\xf7\xfc\x6e\xa4\xa6\xc5\x72\x91\xdf\x0b\xc9\x04\x3f\xf2\x26\x66\x2e\xee\x19\x9e\xa8\x1a\xa6\x73\x33\xbf\x06\xb7\xd9\xfd\xba\x62\x24\x8c\x64\x42\x02\x4d\xf8\x45\x1b\xfd\x08\xc6\xb9\x7b\x17\xfd\x44\x62\x3e\xd1\xbb\xa8\xe9\xbf\x5d\xbc\x1b\xe5\xde\x04\x9a\xd2\x28\x82\x9d\x0d\x45\x9c\x41\x38\xa0\x31\xd6\xa3\xec\x55\xc0\xda\xfb\x7f\xed\xe5\x12\x0b\x3b\x73\xeb\x7f\x01\x00\x00\xff\xff\x9b\x7f\x3c\xb2\x0e\x2a\x00\x00")

func usersRamlBytes() ([]byte, error) {
	return bindataRead(
		_usersRaml,
		"users.raml",
	)
}

func usersRaml() (*asset, error) {
	bytes, err := usersRamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "users.raml", size: 10766, mode: os.FileMode(420), modTime: time.Unix(1458297611, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"companies.raml": companiesRaml,
	"contracts.raml": contractsRaml,
	"organizations.raml": organizationsRaml,
	"securitySchemes/oauth_2_0.raml": securityschemesOauth_2_0Raml,
	"userorganizations.raml": userorganizationsRaml,
	"users.raml": usersRaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"companies.raml": &bintree{companiesRaml, map[string]*bintree{}},
	"contracts.raml": &bintree{contractsRaml, map[string]*bintree{}},
	"organizations.raml": &bintree{organizationsRaml, map[string]*bintree{}},
	"securitySchemes": &bintree{nil, map[string]*bintree{
		"oauth_2_0.raml": &bintree{securityschemesOauth_2_0Raml, map[string]*bintree{}},
	}},
	"userorganizations.raml": &bintree{userorganizationsRaml, map[string]*bintree{}},
	"users.raml": &bintree{usersRaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

