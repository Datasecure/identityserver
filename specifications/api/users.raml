#%RAML 1.0
title: ItsYouOnline
version: 0.1
baseUri: /
securitySchemes:
  - oauth_2_0:
        !include securitySchemes/oauth_2_0.raml
types:
  Label:
    type: string
    maxLength: 50
    minLength: 2

  APIkey:
    description: User specific API key
    properties:
        username: string
        apikey: string
        applicationid: string
        scopes: string[]
        label: string

  Authorization:
    description: For an explanation about scopes and scopemapping, see https://github.com/itsyouonline/identityserver/blob/master/docs/oauth2/scopes.md
    properties:
        username: string
        grantedTo:
          type: string
          description: The organization that is granted read access to some of the user's information
        address?:
          description: Mapping of the labels of the granted ones to the labels the organization requested.
          properties:
            "[]":
              type: string
        publicKeys?: string[]
        email?:
          description: Mapping of the labels of the granted ones to the labels the organization requested.
          properties:
            "[]":
              type: string
        phone?:
          description: Mapping of the labels of the granted ones to the labels the organization requested.
          properties:
            "[]":
              type: string
        bank?:
          description: Mapping of the labels of the granted ones to the labels the organization requested.
          properties:
            "[]":
              type: string
        facebook?: boolean
        github?: boolean
        organizations:
          type: string[]
          description: List of organizations the requesting organization can see your membership of.

  BankAccount:
    properties:
        iban:
          type: string
          maxLength: 30
        bic:
          type: string
          maxLength: 10
        country:
          type: string
          maxLength: 40

  Phonenumber:
    pattern: ^\+?[0-9]+$

  Address:
    properties:
        city:
            type: string
            maxLength: 30
        street:
            type: string
            maxLength: 50
        nr:
            type: string
            maxLength: 10
        other?:
            type: string
            maxLength: 30
        country:
            type: string
            maxLength: 40
        postalcode:
            type: string
            maxLength: 20
  FacebookAccount:
    properties:
      id:
        type: integer
      name:
        type: string
      picture:
        type: string
      link:
        type: string

  GithubAccount:
    properties:
      login:
        type: string
      id:
        type: integer
      avatar_url:
        type: string
      html_url:
        type: string
      name:
        type: string

  User:
    properties:
        username:
            type: string
            maxLength: 30
            minLength: 2
        firstname: string
        lastname: string
        publicKeys: string[]
        expire?: date
        email?:
          properties:
            "[]":
              type: string
        phone?:
          properties:
            "[]":
              type: Phonenumber
        address?:
          properties:
            "[]":
              type: Address
        bank?:
          properties:
            "[]":
              type: BankAccount
        facebook?:
            type: FacebookAccount
        github?:
            type: GithubAccount

    example:
        username: bob
        publicKeys:
            - 1GVS7544tvWM2TM13vNH8sboamJzL6mJ36
        expire: 2018-10-20
        email:
            work: bob@company.com
            home: bob@example.com
            "dance club": bob@linedanceclub.example.org
        phone:
          be: +3212341234123
          eg: +2012341234123
        address:
            home:
                city: Springfield
                street: Main street
                nr: 45B
                country: Tomorrowland
                postalcode: T-9450
            work:
                city: Capital City
                street: Capital street
                nr: 1
                country: Tomorrowland
                postalcode: T-1000
        bank:
            kbc:
                iban: TL123451234512345
                bic: ABCDEF
                country: Tomorrowland

  userview:
    properties:
        username:
            type: string
        publicKeys?: string[]
        email?:
          properties:
            "[]":
              type: string
        phone?:
          properties:
            "[]":
              type: Phonenumber
        address?:
          properties:
            "[]":
              type: Address
        bank?:
          properties:
            "[]":
              type: BankAccount
        facebook?:
            type: FacebookAccount
        github?:
            type: GithubAccount
        organizations: string[]

  JoinOrganizationInvitation:
    properties:
        organization: string
        user: string
        role:
            type: string
            enum: [owner, member]

  ContractSigningRequest:
    properties:
        contractId: string
        party: string

securedBy: [ oauth_2_0 ]
/users:
  post:
    description: Create a new user
    body:
        application/json:
            type: User

  /{username}:
    get:
      securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
      responses:
            200:
                body:
                    application/json:
                        type: User
    /name:
      securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
      put:
        displayName: UpdateName
        description: Update the user his firstname and lastname
        body:
          application/json:
            properties:
              firstname: string
              lastname: string
        responses:
          204:
            description: Successfully updated firstname and lastname
          404:
            description: User not found

    /password:
      securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
      put:
          displayName: UpdatePassword
          description: Update the user his password
          body:
            application/json:
              properties:
                currentpassword: string
                newpassword: string
          responses:
              204:
                description: No response data
              422:
                  description: Invalid password format or invallid currentpassword
                  body:
                    application/json:
                      properties:
                        error: string
    /emailaddresses:
      securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
      post:
          displayName: RegisterNewEmailAddress
          description: Register a new email address
          body:
            application/json:
              properties:
                label: Label
                emailaddress: string
          responses:
              201:
                description: Registered a new email address
                body:
                  application/json:
                      properties:
                         label: Label
                         emailaddress: string
              409:
                  description: Label is already used.
      /{label}:
        put:
            displayName: UpdateEmailAddress
            description: Updates the label and/or value of an email address
            body:
              application/json:
                properties:
                  label: Label
                  emailaddress: string
            responses:
              201:
                  description: Updated
              409:
                  description: The new label is already used
        delete:
            displayName: DeleteEmailAddress
            description: Removes an email address
            responses:
                204:
                  description: Email address removed.
                409:
                  description: The last email address can not be removed.


    /apikeys:
      securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
      post:
          displayName: AddApiKey
          description: Adds an APIKey to the user
          body:
            application/json:
              properties:
                label: Label
          responses:
              201:
                description: Added a APIKey to the user
                body:
                  application/json:
                      type: APIKey
              409:
                  description: Label is already used.
      get:
          displayName: ListAPIKeys
          description: Lists the API keys
          responses:
              200:
                description: List of API keys
                body:
                  application/json:
                      type: APIKey[]
      /{label}:
        put:
            displayName: UpdateAPIkey
            description: Updates the label for the api key
            body:
              application/json:
                properties:
                  label: Label
            responses:
              201:
                  description: Updated
              409:
                  description: The new label is already used
        get:
            displayName: GetAPIkey
            description: Get an API key by label
            responses:
              200:
                  description: API key
                  body:
                    application/json:
                      type: APIKey

        delete:
            displayName: DeleteAPIkey
            description: Removes an API key
            responses:
                204:
                  description: API key removed.

    /github:
      delete:
        displayName: DeleteGithubAccount
        description: Unlink Github Account
        responses:
            204:
              description: Account unlinked

    /facebook:
      delete:
        securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
        displayName: DeleteFacebookAccount
        description: Delete the associated facebook account
        responses:
            204:
                description: Deleted facebook account

  /{username}/info:
    get:
      securedBy: [oauth_2_0: { scopes: [ "user:info", "user:admin" ] } ]
      displayName: GetUserInformation
      responses:
            200:
                body:
                    application/json:
                        type: userview
  /{username}/validate:
    get:
      queryParameters:
            token:
                type: string

  /{username}/addresses:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
      responses:
            200:
                body:
                    application/json:
                        properties:
                          "[]":
                            type: Address
    post:
      displayName: RegisterNewAddress
      description: Register a new address
      body:
        application/json:
            properties:
                label: Label
                address: Address
      responses:
        201:
          description: Registered a new address
          body:
            application/json:
                properties:
                  label: Label
                  address: Address
        409:
           description: Label is already used.
    /{label}:
      get:
        responses:
            200:
                body:
                    application/json:
                      type: Address
      put:
          displayName: UpdateAddress
          description: Update the label and/or value of an existing address.
          body:
            application/json:
              properties:
                label: Label
                phonenumber: Address
          responses:
            201:
                description: Updated
            409:
                description: The new label is already used
      delete:
          displayName: DeleteAddress
          description: Removes an address
          responses:
              204:
                description: Address removed.

  /{username}/phonenumbers:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
      responses:
        200:
          body:
            application/json:
                properties:
                  "[]":
                    type: Phonenumber
    post:
      displayName: RegisterNewPhonenumber
      description: Register a new phonenumber
      body:
        application/json:
          properties:
            label: Label
            phonenumber: Phonenumber
      responses:
          201:
            description: Registered a new phone number
            body:
              application/json:
                  properties:
                     label: Label
                     phonenumber: Phonenumber
          409:
              description: Label is already used.
    /{label}:
      get:
        responses:
            200:
                body:
                    application/json:
                        type: Phonenumber
      put:
        displayName: UpdatePhonenumber
        description: Update the label and/or value of an existing phonenumber.
        body:
          application/json:
            properties:
              label: Label
              phonenumber: Phonenumber
        responses:
          201:
              description: Updated
          409:
              description: The new label is already used
      delete:
        displayName: DeletePhonenumber
        description: Removes a phonenumber
        responses:
            204:
              description: Phone number removed.
       /activate:
         post:
         displayName: ValidatePhonenumber
         description: Sends validation text to phone numbers
         responses:
           204:
              description: Validation number send

  /{username}/banks:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    post:
      description: Create new bank account
      body:
        application/json:
            properties:
              "[]":
                type: BankAccount
      responses:
        201:
          body:
            application/json:
                properties:
                  "[]":
                    type: BankAccount
    get:
        responses:
            200:
                body:
                    application/json:
                        properties:
                          "[]":
                            type: BankAccount
  /{username}/banks/{label}:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
        responses:
            200:
                body:
                    application/json:
                        type: BankAccount
    put:
        description: Update an existing bankaccount and label.
        body:
            application/json:
                type: BankAccount
    delete:
        description: Delete a BankAccount
  /{username}/notifications:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
        description: Get the list of notifications, these are pending invitations or approvals
        responses:
            200:
                body:
                    application/json:
                        properties:
                            invitations: JoinOrganizationInvitation[]
                            approvals: JoinOrganizationInvitation[]
                            contractRequests: ContractSigningRequest[]

  /{username}/contracts:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
      description: Get the contracts where the user is 1 of the parties. Order descending by date.
      queryParameters:
        includeExpired:
            type: boolean
            description: Include the expired contracts, by default only the active contracts are returned.
            required: false
        start:
            type: integer
            description: Start offset, useful for paging. Default is `0`.
            required: false
        max:
            type: integer
            description: Max page size, useful for paging. Default is `50`.
            required: false
            maximum: 250

  /{username}/authorizations:
    securedBy: [oauth_2_0: { scopes: [ "user:admin" ] } ]
    get:
        displayName: GetAllAuthorizations
        description: Get the list of authorizations.
        responses:
            200:
                body:
                    application/json:
                        type: Authorization[]
    /{grantedTo}:
      get:
        displayName: GetAuthorization
        description: Get the authorization for a specific organization.
        responses:
            200:
                body:
                    application/json:
                        type: Authorization
      delete:
        displayName: DeleteAuthorization
        description: Remove the authorization for an organization, the granted organization will no longer have access the user's information.
      put:
        displayName: UpdateAuthorization
        description: Modify which information an organization is able to see.
        body:
            application/json:
                type: Authorization
