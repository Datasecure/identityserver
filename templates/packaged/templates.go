// Code generated by go-bindata.
// sources:
// templates/emailwithbutton.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _emailwithbuttonHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x56\x51\x6f\xdb\x36\x10\x7e\xef\xaf\xb8\x28\x18\xba\x01\x91\x25\xd9\x4e\x63\xcb\x76\x8a\x35\x69\xd0\x02\xdd\x1a\x14\x0e\xba\x3e\xd2\x12\x6d\x11\xa6\x48\x8d\xa4\xe3\x78\x85\xff\xfb\x8e\x94\x6c\xcb\xb6\x12\x77\x4f\x1b\x46\x03\x89\x2c\xdf\x1d\xef\xfb\xbe\xbb\x23\x87\x67\xb7\x9f\x6f\xc6\xdf\xee\xdf\x43\x66\x72\x0e\xf7\x0f\xef\x3e\x7d\xbc\x01\xcf\x0f\x82\xaf\x9d\x9b\x20\xb8\x1d\xdf\xc2\x1f\x1f\xc6\xbf\x7d\x82\xa8\x15\xc2\x58\x11\xa1\x99\x61\x52\x10\x1e\x04\xef\x7f\xf7\x5e\x41\xb5\xbc\xcc\x98\x22\x0e\x82\xe5\x72\xd9\x5a\x76\x5a\x52\xcd\x82\xf1\x97\xe0\xc9\xc6\x8c\x6c\x90\xea\xd1\x37\xb5\x08\xad\xd4\xa4\xde\xf5\xab\xa1\xdb\xf8\x29\xe7\x42\x8f\x1a\xc2\x44\xfd\x7e\xbf\xf4\x76\xb6\x94\xa4\xd7\x6e\xd7\x61\x4e\x0d\x01\x6b\xef\xd3\x3f\x17\xec\x71\xe4\xdd\x48\x61\xa8\x30\xfe\x78\x55\x50\x0f\x92\xf2\xdb\xc8\x33\xf4\xc9\x04\xd6\x7f\x00\x49\x46\x94\xa6\x66\xf4\x30\xbe\xf3\x7b\x5e\x50\x05\x32\xcc\x70\x7a\xfd\xfd\x7b\x6b\x6c\x1f\xd6\xeb\x61\x50\xbe\x29\x7f\xe5\x4c\xcc\x21\x53\x74\x5a\x26\xa7\x31\xbb\x29\x86\xd6\xad\x99\x94\x33\x4e\x49\xc1\x74\x2b\x91\x79\x90\x68\xfd\x76\x4a\x72\xc6\x57\xa3\xaf\x94\xf3\x29\xa7\xd4\xc4\xdd\x30\xf4\x40\x51\x3e\xf2\xb4\x59\x71\xaa\x33\x7c\xe9\x81\xc1\x04\xab\xbc\xd0\xcb\xc2\x0a\x4a\x5c\xc3\x89\x4c\x57\xe0\x4c\x47\x5e\x4e\xd4\x8c\x89\x38\x1c\x40\x41\xd2\x94\x89\x99\x7d\x5c\xb2\xd4\x64\x71\x14\x86\x3f\x0d\xac\x5f\xca\x1e\x8f\xcc\x77\xd6\x35\x63\x9b\xb2\x5f\xa6\x17\xbf\xfe\x55\x31\xc2\x5f\x5f\x68\x94\xc2\xd7\x54\xb1\xa9\x8d\xe5\xc0\xd6\xe2\xd5\x9c\x27\x24\x99\xcf\x94\x5c\x88\x34\x56\xb3\x09\xf9\xb9\xdb\xbb\x88\xba\x97\x17\x51\xef\xea\x22\x6c\xf5\xdb\xbf\x0c\x32\xca\x66\x99\x89\x7b\x61\xf1\x34\x28\x64\xa9\x6f\x8c\xb0\x89\x61\x8f\x74\x13\xbc\x79\x83\x37\xa1\x75\xaa\x99\x34\x9b\xc1\x65\xd7\xda\xc1\x96\x0b\x08\xa1\xd3\xe0\x79\xe8\xbd\x35\x6f\xa3\x31\xfa\xe0\xa7\xc9\xc5\xb9\x91\x03\x99\x99\xd1\x2b\xb9\x68\x49\x81\x25\x40\xbd\x46\x1f\x5c\xd5\x46\x56\x4d\x3f\xa5\x89\x54\xc4\xa1\x17\x52\xd0\xc1\x94\x4b\x62\x62\x4e\xa7\xa6\x14\x40\xb3\xbf\x68\xec\xd2\x4e\x24\x97\x2a\x3e\xbf\xbb\xbb\xdb\x93\x66\x5b\x39\x75\x71\x9c\xc1\xb2\xa4\x78\x22\x79\xfa\x1c\x00\xbb\x3e\x1a\xfd\x0d\x73\xfe\xec\x72\x1e\x06\xa4\x81\x9d\x00\xe9\x39\xa0\x7b\xff\x55\xed\x6b\xfd\xf1\xb8\xd6\x9c\x02\x40\x16\x46\xc2\xb6\x34\xe1\x48\xd0\x63\x31\x2b\x2d\xf7\xb5\x71\xb1\x8e\xc4\x19\x16\x1b\xd7\x92\x31\x38\x6f\xbb\x35\x80\x3a\x6d\xb0\x29\x69\xa8\xd1\x06\x3b\xca\x21\x7a\x63\x37\xac\x13\x09\x42\xaa\x9c\xe0\x4c\xb0\x44\xf9\x55\x01\x43\xbb\x6b\xed\x36\xf0\x6c\xb9\x44\xfb\xa9\x22\x4e\xa7\x34\xe1\x6c\x86\x16\x4e\xda\x06\x39\x3e\xa0\x8e\x12\x70\xa4\x3c\x60\x2e\x82\xe4\x38\x55\xce\x0e\x28\x2f\xfe\x17\x40\xed\xd4\x44\xb3\xf5\xfa\x04\xba\x17\x5a\xd2\xf5\xc3\xde\x66\x09\xce\x6d\xaa\x1a\x5b\x7b\xd3\xa3\x96\x5a\xc5\xd7\xeb\xc6\xb6\xac\x36\xaa\x8d\x2d\x38\xef\x46\xbd\x4e\xd2\x1d\x4c\xa4\x4a\xa9\xf2\x15\x49\xd9\x42\xc7\x9d\x5d\x27\x4e\xdd\x1a\xa4\x4c\x17\x9c\xac\x62\xe6\x1a\xc8\x9f\x70\x99\xcc\x4f\x0d\xcf\x1d\xfd\xd1\x15\x06\x3c\x6a\x57\x4e\x0d\xc2\xf1\x75\x41\x12\x8b\xbb\xd2\x63\x33\xaf\x5d\xff\x6c\x87\x76\xd4\x46\x4e\x9c\x38\x35\x42\x2a\x3e\x1a\x47\x4c\xd9\x51\x36\xc6\x19\xcb\x0b\xa9\x0c\x11\x8d\x42\x55\x62\xbd\x5b\x18\x23\x45\x29\xd9\xd1\x78\x68\x1a\x0d\x99\x6a\xa4\x33\xed\xdb\x4f\x45\x67\x99\x49\x45\x64\xf5\x4b\xce\xc4\xa6\xd8\x22\x44\x53\xa1\x8d\x4a\xc9\xdb\x6e\x44\x04\xa7\x3a\xe0\xca\xad\x7f\x40\x7f\xfb\x80\xfe\x8a\xea\x7a\xe5\x47\xfd\x5d\x36\xdb\xb2\xdf\x1d\x99\x35\xd6\x9f\x2b\xf9\x92\x42\x6c\x2b\x03\x4b\xa9\xe6\xe8\xf7\x16\xee\x89\x36\x14\x4c\x46\xb1\xf5\xb0\xf3\x97\xf8\x12\xdc\xc5\x81\x09\x1c\x8e\x78\x8a\x28\x98\x28\xb9\xc4\x84\xe3\x67\x30\xff\x9b\x20\x11\x46\xea\x4f\x14\x25\xf3\xd8\xfd\xc5\xdf\xf8\x8f\x75\xdf\xa1\x62\x55\x97\x1d\x56\x2a\x60\xd1\x50\x65\x33\xc4\xb0\x1b\xe7\x86\xf2\x3b\x39\x13\xff\x9b\x15\x81\x88\xbe\x50\xa2\xa5\xb0\xa0\x5e\x98\x7c\x9b\x71\x7b\xf9\xe2\x5d\x64\x87\xfa\xc7\x66\xa2\x5d\x7b\xc7\x7e\xc3\x91\x7f\x98\xd4\xa9\x03\x7f\xfb\xcf\x5e\x48\xdd\xfd\x14\xef\xcf\xd7\x7f\x07\x00\x00\xff\xff\x79\xc2\x06\xcc\x2c\x0c\x00\x00")

func emailwithbuttonHtmlBytes() ([]byte, error) {
	return bindataRead(
		_emailwithbuttonHtml,
		"emailwithbutton.html",
	)
}

func emailwithbuttonHtml() (*asset, error) {
	bytes, err := emailwithbuttonHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "emailwithbutton.html", size: 3116, mode: os.FileMode(436), modTime: time.Unix(1465802255, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"emailwithbutton.html": emailwithbuttonHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"emailwithbutton.html": &bintree{emailwithbuttonHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
