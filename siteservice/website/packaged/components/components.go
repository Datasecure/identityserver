// Code generated by go-bindata.
// sources:
// components/company/controller.js
// components/company/service.js
// components/company/views/detail.html
// components/company/views/new.html
// components/organization/controller.js
// components/organization/service.js
// components/organization/views/apisecretdialog.html
// components/organization/views/detail.html
// components/organization/views/dnsDialog.html
// components/organization/views/invitationdialog.html
// components/organization/views/new.html
// components/organization/views/treeItem.html
// components/user/authorizeController.js
// components/user/controller.js
// components/user/service.js
// components/user/views/addressdialog.html
// components/user/views/bankAccountDialog.html
// components/user/views/emailaddressdialog.html
// components/user/views/facebookDialog.html
// components/user/views/githubDialog.html
// components/user/views/home.html
// components/user/views/phonenumberdialog.html
// DO NOT EDIT!

package components

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// companyControllerJs reads file data from disk. It returns an error on failure.
func companyControllerJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/company/controller.js"
	name := "company/controller.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// companyServiceJs reads file data from disk. It returns an error on failure.
func companyServiceJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/company/service.js"
	name := "company/service.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// companyViewsDetailHtml reads file data from disk. It returns an error on failure.
func companyViewsDetailHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/company/views/detail.html"
	name := "company/views/detail.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// companyViewsNewHtml reads file data from disk. It returns an error on failure.
func companyViewsNewHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/company/views/new.html"
	name := "company/views/new.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationControllerJs reads file data from disk. It returns an error on failure.
func organizationControllerJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/controller.js"
	name := "organization/controller.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationServiceJs reads file data from disk. It returns an error on failure.
func organizationServiceJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/service.js"
	name := "organization/service.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsApisecretdialogHtml reads file data from disk. It returns an error on failure.
func organizationViewsApisecretdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/apisecretdialog.html"
	name := "organization/views/apisecretdialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsDetailHtml reads file data from disk. It returns an error on failure.
func organizationViewsDetailHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/detail.html"
	name := "organization/views/detail.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsDnsdialogHtml reads file data from disk. It returns an error on failure.
func organizationViewsDnsdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/dnsDialog.html"
	name := "organization/views/dnsDialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsInvitationdialogHtml reads file data from disk. It returns an error on failure.
func organizationViewsInvitationdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/invitationdialog.html"
	name := "organization/views/invitationdialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsNewHtml reads file data from disk. It returns an error on failure.
func organizationViewsNewHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/new.html"
	name := "organization/views/new.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// organizationViewsTreeitemHtml reads file data from disk. It returns an error on failure.
func organizationViewsTreeitemHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/organization/views/treeItem.html"
	name := "organization/views/treeItem.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userAuthorizecontrollerJs reads file data from disk. It returns an error on failure.
func userAuthorizecontrollerJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/authorizeController.js"
	name := "user/authorizeController.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userControllerJs reads file data from disk. It returns an error on failure.
func userControllerJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/controller.js"
	name := "user/controller.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userServiceJs reads file data from disk. It returns an error on failure.
func userServiceJs() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/service.js"
	name := "user/service.js"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsAddressdialogHtml reads file data from disk. It returns an error on failure.
func userViewsAddressdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/addressdialog.html"
	name := "user/views/addressdialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsBankaccountdialogHtml reads file data from disk. It returns an error on failure.
func userViewsBankaccountdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/bankAccountDialog.html"
	name := "user/views/bankAccountDialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsEmailaddressdialogHtml reads file data from disk. It returns an error on failure.
func userViewsEmailaddressdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/emailaddressdialog.html"
	name := "user/views/emailaddressdialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsFacebookdialogHtml reads file data from disk. It returns an error on failure.
func userViewsFacebookdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/facebookDialog.html"
	name := "user/views/facebookDialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsGithubdialogHtml reads file data from disk. It returns an error on failure.
func userViewsGithubdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/githubDialog.html"
	name := "user/views/githubDialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsHomeHtml reads file data from disk. It returns an error on failure.
func userViewsHomeHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/home.html"
	name := "user/views/home.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// userViewsPhonenumberdialogHtml reads file data from disk. It returns an error on failure.
func userViewsPhonenumberdialogHtml() (*asset, error) {
	path := "/home/lucas/go/src/github.com/itsyouonline/identityserver/siteservice/website/components/user/views/phonenumberdialog.html"
	name := "user/views/phonenumberdialog.html"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company/controller.js": companyControllerJs,
	"company/service.js": companyServiceJs,
	"company/views/detail.html": companyViewsDetailHtml,
	"company/views/new.html": companyViewsNewHtml,
	"organization/controller.js": organizationControllerJs,
	"organization/service.js": organizationServiceJs,
	"organization/views/apisecretdialog.html": organizationViewsApisecretdialogHtml,
	"organization/views/detail.html": organizationViewsDetailHtml,
	"organization/views/dnsDialog.html": organizationViewsDnsdialogHtml,
	"organization/views/invitationdialog.html": organizationViewsInvitationdialogHtml,
	"organization/views/new.html": organizationViewsNewHtml,
	"organization/views/treeItem.html": organizationViewsTreeitemHtml,
	"user/authorizeController.js": userAuthorizecontrollerJs,
	"user/controller.js": userControllerJs,
	"user/service.js": userServiceJs,
	"user/views/addressdialog.html": userViewsAddressdialogHtml,
	"user/views/bankAccountDialog.html": userViewsBankaccountdialogHtml,
	"user/views/emailaddressdialog.html": userViewsEmailaddressdialogHtml,
	"user/views/facebookDialog.html": userViewsFacebookdialogHtml,
	"user/views/githubDialog.html": userViewsGithubdialogHtml,
	"user/views/home.html": userViewsHomeHtml,
	"user/views/phonenumberdialog.html": userViewsPhonenumberdialogHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"company": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{companyControllerJs, map[string]*bintree{}},
		"service.js": &bintree{companyServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"detail.html": &bintree{companyViewsDetailHtml, map[string]*bintree{}},
			"new.html": &bintree{companyViewsNewHtml, map[string]*bintree{}},
		}},
	}},
	"organization": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{organizationControllerJs, map[string]*bintree{}},
		"service.js": &bintree{organizationServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"apisecretdialog.html": &bintree{organizationViewsApisecretdialogHtml, map[string]*bintree{}},
			"detail.html": &bintree{organizationViewsDetailHtml, map[string]*bintree{}},
			"dnsDialog.html": &bintree{organizationViewsDnsdialogHtml, map[string]*bintree{}},
			"invitationdialog.html": &bintree{organizationViewsInvitationdialogHtml, map[string]*bintree{}},
			"new.html": &bintree{organizationViewsNewHtml, map[string]*bintree{}},
			"treeItem.html": &bintree{organizationViewsTreeitemHtml, map[string]*bintree{}},
		}},
	}},
	"user": &bintree{nil, map[string]*bintree{
		"authorizeController.js": &bintree{userAuthorizecontrollerJs, map[string]*bintree{}},
		"controller.js": &bintree{userControllerJs, map[string]*bintree{}},
		"service.js": &bintree{userServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"addressdialog.html": &bintree{userViewsAddressdialogHtml, map[string]*bintree{}},
			"bankAccountDialog.html": &bintree{userViewsBankaccountdialogHtml, map[string]*bintree{}},
			"emailaddressdialog.html": &bintree{userViewsEmailaddressdialogHtml, map[string]*bintree{}},
			"facebookDialog.html": &bintree{userViewsFacebookdialogHtml, map[string]*bintree{}},
			"githubDialog.html": &bintree{userViewsGithubdialogHtml, map[string]*bintree{}},
			"home.html": &bintree{userViewsHomeHtml, map[string]*bintree{}},
			"phonenumberdialog.html": &bintree{userViewsPhonenumberdialogHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

