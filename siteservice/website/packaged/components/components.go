// Code generated by go-bindata.
// sources:
// components/company/controller.js
// components/company/service.js
// components/company/views/detail.html
// components/company/views/new.html
// components/notifications/controller.js
// components/organization/controller.js
// components/organization/service.js
// components/organization/views/detail.html
// components/organization/views/invitationdialog.html
// components/organization/views/new.html
// DO NOT EDIT!

package components

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companyControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x0e\xd3\x30\x10\x86\xf7\x3d\x85\x15\x55\xb2\x2d\x22\x97\x05\x1b\xa8\xba\x40\x3d\x02\x4b\xc4\xc2\x72\xa6\xc4\xc8\xb1\x23\x3f\x52\xaa\x2a\x77\x67\x92\xba\x69\x42\x1a\xc4\x6c\x5a\xfd\xf3\xf8\xbf\x99\x98\x5d\x92\x55\x51\x3b\xcb\x38\xb9\xef\x08\x06\x4d\x01\x48\x88\x5e\xab\x48\x8f\xbb\x51\x92\xf6\x67\x32\xd2\x8b\xc6\x55\xc9\x00\x2b\x74\x0c\x37\x97\x9c\x35\xda\xc2\xd7\xb6\x2d\xb8\x50\xce\x46\xef\x8c\x01\xcf\x8a\xb3\x6b\x5a\x69\x6f\xe7\x49\x2a\xca\x95\xc4\x71\xf2\x38\x7a\x95\x11\x7b\x6d\x7f\x81\x8a\xe4\x44\xbe\xd3\xbd\x71\x4a\x0e\x74\xb4\xa4\xb9\xf2\x1b\xf8\x4e\x2b\xa0\x25\xa1\xfb\xab\xb6\x95\xbb\xd2\x1f\x19\xf3\xb9\xca\x7a\x28\x9b\x06\x95\xcb\x31\x25\xc9\x43\x9e\xdb\x0f\xd1\x49\x4f\xba\x06\x01\x62\xad\xc3\xf1\x25\x37\x42\x79\x90\x11\x30\xf3\xf8\x93\x7d\x73\xb2\x93\x46\x57\xa3\x09\x78\xef\x7c\xc0\xb2\x7b\x3f\x2b\x91\x08\xd7\x61\x17\xe3\x33\x71\x62\x7e\x65\x91\x64\x4a\xf7\x6f\x2a\x1f\xde\x8c\xbf\x80\xff\x0d\x30\xaf\x5a\x6e\x9f\xf7\x61\xd8\x6b\x65\x03\x25\xfe\x46\xf9\xdb\x7a\xbe\xe8\x11\xb1\x06\xcb\x16\xd2\x9c\x87\xa1\xa5\xfc\x0b\xe6\x19\xd3\xd9\x45\x2b\x63\xcd\x8a\x83\x1a\xfd\x35\x84\x43\x41\x3e\x90\xec\xcb\x8f\xab\xe6\xbe\xdc\xf6\x43\xe6\xe0\xec\x86\xa3\xbe\x90\x5c\x20\x42\x94\x31\xe1\x11\x4e\xe4\xd3\xc7\xcf\xf3\xef\xbb\x8a\x8d\xdb\x55\xa9\x35\x1a\xf9\xe1\x0b\x89\x3e\x41\xbf\xc6\x1c\x51\xdf\xaa\x60\x02\x6c\x3b\xe6\x47\x27\xa6\xf3\xd4\x1e\x2e\x68\x59\x8c\xe6\xc3\x69\x16\x3b\xfc\xaf\xf1\x52\x99\x9d\xf5\x91\xc0\xc7\xb4\xeb\xf9\xf0\xfc\xfe\x04\x00\x00\xff\xff\x45\xe8\x9a\x08\xf6\x03\x00\x00")

func companyControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_companyControllerJs,
		"company/controller.js",
	)
}

func companyControllerJs() (*asset, error) {
	bytes, err := companyControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/controller.js", size: 1014, mode: os.FileMode(420), modTime: time.Unix(1457973973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyServiceJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\x3f\x6f\xeb\x20\x10\xdf\xfd\x29\x50\x64\x09\x90\x2c\xde\x1e\xeb\x0d\x4f\x6f\xed\xd4\xaa\x53\xd5\x81\x3a\xd7\x84\xca\x39\x08\x1c\x51\xa3\xc8\xdf\xbd\x18\x9b\x34\x4e\xab\xdc\x60\xe0\xee\xf7\x0f\x23\xde\x23\x76\x64\x2c\x0a\xc9\xce\x15\x4b\xc5\x63\x00\x16\xc8\x9b\x8e\x78\x5b\x55\xb9\xa7\x71\x1b\x7b\xed\xd5\xde\x6e\x62\x0f\x62\x65\x28\x9c\x6c\xb4\xd8\x1b\x84\x7f\xce\xad\xa4\x0a\xe0\x8f\xa6\x4b\xa3\xff\x76\xef\x34\x9e\x9e\xa6\xf3\xaa\x59\x9e\x65\x51\x5c\xb6\x55\x6d\xf0\x03\x3a\x62\x7f\xd9\x0b\xaf\x77\x44\x8e\x37\xbc\x3e\xf0\xd7\x76\x42\x97\x90\x37\x34\x91\xa1\x0d\xab\x0f\x25\xfc\x58\x47\xed\x99\x76\xe6\xf9\xf1\x21\xc9\x31\x9e\xb6\x7f\xba\x4c\x33\x10\xf8\x2c\x58\x70\x73\xec\x04\xfc\xe6\x8f\xd5\x79\xd0\x04\xeb\x79\xbd\x8c\x86\xcb\xce\x03\x45\x8f\x85\x7f\xa5\x7a\x89\x3a\x51\x05\xea\x3d\x34\x8c\xf4\x27\x7a\xb9\xf4\x18\xfd\xa3\xef\x93\xf7\x94\xb6\x5d\x4c\x67\x83\x7c\x43\xe5\x6c\x20\x91\xb0\x0d\x3b\x6f\x7b\xfb\xa6\x7b\xb3\x59\x67\xe1\xac\xbb\xce\xdf\x41\x2a\xda\x01\x8a\x85\xca\x75\x22\xe1\x21\x38\x8b\x01\xe4\xcd\x65\x6f\x2c\x0b\x4c\x6d\x34\xe9\xf6\x07\x72\x68\xee\x39\xe8\x60\x51\xde\x95\xaf\x0f\xca\xc3\xf8\xd8\x05\xfd\x8b\xc5\xa2\x73\x05\x18\xa6\xff\x9c\x96\x6a\x90\x22\x0d\xbe\x02\x00\x00\xff\xff\xb9\xae\x5f\xb5\xbf\x02\x00\x00")

func companyServiceJsBytes() ([]byte, error) {
	return bindataRead(
		_companyServiceJs,
		"company/service.js",
	)
}

func companyServiceJs() (*asset, error) {
	bytes, err := companyServiceJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/service.js", size: 703, mode: os.FileMode(420), modTime: time.Unix(1457973973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsDetailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x49\xc9\x2c\xb3\xe3\x52\x00\x02\x9b\x0c\x43\x3b\xe7\xfc\xdc\x82\xc4\xbc\x4a\x85\x94\xd4\x92\xc4\xcc\x9c\x62\x1b\x7d\xa0\x18\x97\x8d\x3e\x58\x0d\x20\x00\x00\xff\xff\xd8\x55\xeb\x9c\x2a\x00\x00\x00")

func companyViewsDetailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsDetailHtml,
		"company/views/detail.html",
	)
}

func companyViewsDetailHtml() (*asset, error) {
	bytes, err := companyViewsDetailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/detail.html", size: 42, mode: os.FileMode(420), modTime: time.Unix(1457973973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _companyViewsNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x4b\x92\xa3\x30\x0c\x86\xf7\x39\x85\xca\xab\x99\x05\x43\x4d\xcd\x16\xd8\xe4\x0a\xb9\x80\xc0\x22\xb8\xc6\x0f\xda\x8f\x04\x6e\xdf\xb2\x49\xe7\xd5\x5d\xdd\x61\x83\x91\xe5\x4f\x3f\xbf\xe4\x46\xaa\x53\xb7\x03\x7e\x9a\xd1\x79\x03\x1a\x57\x97\x62\x2b\x06\xa7\x93\xb1\x02\xec\xb1\x0a\xa9\x37\x8a\x43\x27\xf3\x67\xf0\x84\x91\x7e\xfd\x16\xdb\x91\x72\x6c\xfa\xdb\xed\x4b\x18\x10\x2c\x9d\x61\x70\x66\x46\xbb\x36\x35\x6f\xdc\xb2\x7a\x5f\xdf\x7d\x19\x59\x29\x3b\xa7\x58\x0d\xce\x46\x54\x96\xfc\x6d\xb3\x24\x68\xec\x49\x77\xfb\x0d\x05\x16\x0d\x35\xf5\x16\x7b\xcc\x2b\x94\x2c\xd2\x38\x49\xba\x68\xcc\xc9\x02\x8c\xb2\x9a\xec\x31\x4e\xad\xf8\x27\xc0\xd3\x5b\x52\x9e\x24\xc4\x75\xa6\x56\x44\x5a\xa2\x00\x4c\xd1\x8d\x6e\x48\xa1\x6b\xea\xc2\x79\x62\xb3\x33\x85\x4c\x21\xe0\x91\x42\x81\x9f\x50\x2b\x89\x51\x39\x96\xec\x9d\x0f\x5c\x48\x56\x19\x54\x4d\x4a\x32\x79\x44\x1d\x48\x3c\x82\xbe\x80\xb5\x42\xa6\x59\xab\x81\x5d\x13\xdd\x61\x52\xa1\xfc\x22\xf0\x1b\x35\x7b\x29\x57\x88\xf8\x9f\x6c\x53\x5f\xbb\x73\x05\x3d\x86\x9a\xfa\x3b\x2b\x5f\xf5\xf9\x80\x0b\xd8\x64\x7a\xf2\x2f\xbb\x1c\x71\xb1\x5e\xdc\xfb\xf9\xd9\xc5\x1f\xc4\x65\x4b\x3e\xc6\xcd\xbb\xf3\x93\x6b\x59\x7b\x9f\x62\x74\xf6\x52\x64\x1b\x43\x01\x83\xc6\xc0\xcd\xe0\x6d\x8f\x2a\x70\x4f\x79\x35\x7b\x65\xd0\xaf\xe2\x32\x89\xa5\xf0\x76\xf8\x09\x1a\x78\x9e\x60\xd4\xb4\xb0\xda\xbc\xbe\x17\x7b\xbb\x09\x75\xbe\x0a\xdd\xee\x12\x7a\x0f\x00\x00\xff\xff\x44\xaf\xf1\xa6\x23\x03\x00\x00")

func companyViewsNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_companyViewsNewHtml,
		"company/views/new.html",
	)
}

func companyViewsNewHtml() (*asset, error) {
	bytes, err := companyViewsNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company/views/new.html", size: 803, mode: os.FileMode(420), modTime: time.Unix(1457973973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _notificationsControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x8f\xc1\x8a\xc3\x20\x10\x86\xef\x3e\x85\x48\x40\x85\x25\x2f\x10\xf6\xb0\xec\x7d\x5f\x60\xe9\x41\xac\x69\xa7\x18\x27\xe8\x18\x28\x25\xef\x5e\x93\x34\xb6\x97\xcc\xc1\xc3\x7c\xfe\xdf\xf0\xab\x3e\x07\x4b\x80\x41\x69\xfe\x60\xbc\x8c\xcc\xc9\xf1\x44\x11\x2c\xc9\x8e\xb1\x75\x67\xc2\x25\x7b\x13\xdb\x01\xcf\xd9\x3b\x25\x80\xd2\x1d\x33\x06\x0f\xc1\xfd\x8c\xa3\xd0\xad\xc5\x40\x11\xbd\x77\x51\x89\x3f\x24\xe8\xc1\x9a\x45\x9b\x7e\x2b\x10\x5f\x07\x40\xef\x67\x0e\x78\xdb\x40\xb8\x39\x4b\xfc\x9b\xff\xcb\xc6\xe3\xf6\x41\x9e\xba\x2d\xb5\x37\x38\x8a\xab\x1a\xd9\x2b\x2e\x33\x99\xc8\xa7\xa1\x28\xe9\x0a\xe9\x65\x5a\xab\x16\xd7\x64\xc8\x29\xfd\xb1\xac\x27\xde\xb4\xa8\x2a\x9e\xd9\xf6\x32\x36\xeb\x25\xf7\x0c\x00\x00\xff\xff\x48\x43\x47\x15\x55\x01\x00\x00")

func notificationsControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_notificationsControllerJs,
		"notifications/controller.js",
	)
}

func notificationsControllerJs() (*asset, error) {
	bytes, err := notificationsControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "notifications/controller.js", size: 341, mode: os.FileMode(420), modTime: time.Unix(1457973973, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationControllerJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x3b\x8f\xe3\x36\x10\xee\xfd\x2b\x08\xc1\x80\x28\xc4\xd0\xa6\xb8\x26\x32\xae\x08\xf2\x00\x52\x04\x09\x70\x48\x75\xb8\x82\x27\xd1\x16\x03\x8a\x34\x48\x4a\x9b\x64\x4f\xff\x3d\x43\xbd\x29\x91\xb2\x77\x2f\x61\x45\x73\x46\x33\xdf\xbc\x3e\x0f\xbe\xd4\x22\x37\x4c\x0a\x9c\xa0\x97\x03\x82\x13\xd7\x9a\x22\x6d\x14\xcb\x4d\x7c\x3e\x1c\xba\x37\x22\xae\x35\x27\xaa\xbb\xdb\x93\x56\xb2\xa8\x39\xc5\x11\x33\xfa\x6f\x59\x4b\xc1\x99\xa0\xdf\xdf\x6e\x51\x32\xab\xe4\x52\x18\x25\x39\xa7\x0a\x47\xbf\xa9\x2b\x11\xec\x1f\x62\x1d\xfd\x30\xbd\x47\x27\xe4\x17\x3c\x60\xe5\x47\x6a\x08\xe3\x41\x5b\x6b\x71\xc0\xe2\x2f\xa2\x61\xa6\xff\x80\x11\x2e\xaf\x8e\xbd\xb0\x30\x19\xf3\xe2\x87\x9f\x1e\x99\xf8\x93\xe6\x06\xbd\x47\x1f\xe3\x23\x97\x79\x27\x8f\x4f\xf1\x52\xfd\x03\x55\x0d\xcb\x29\xbc\x1e\x9f\x99\x28\xe4\x73\xfc\xe9\xbc\xb1\xb9\x0e\x23\x64\x19\xc5\x47\x25\x6b\x43\x7f\x27\x8a\x54\xba\xfb\x3d\x18\x85\xab\xd7\x2b\x68\x54\x45\x1f\xd7\xf0\xe3\x57\x5a\x30\x62\x41\x74\x28\xc6\xb6\x08\x84\x88\x27\xe7\x6e\xde\x07\xfb\x27\x34\xf8\x1f\x9b\xca\x9e\x86\x28\xd4\x54\x00\xdd\x94\x4c\x9f\xe7\xe7\x2a\xcd\x15\x25\x86\x82\xa4\xbf\x0c\x10\x06\x61\x43\x38\x2b\x3a\xe3\x54\x29\xa9\x34\xa8\xbd\xb4\x0b\x15\x02\x38\x1b\xf8\x0a\x27\x8b\xc7\x09\xfe\x2c\x05\x24\x93\xb8\xf5\x68\xf6\xbe\x71\x32\x03\x1e\x41\x17\xc2\x3a\xfd\xf8\xe9\xe0\x48\xd8\x05\x61\x80\x07\xc2\x65\x90\xe3\x81\xe7\xf4\x56\xeb\x72\x54\x71\x14\x5a\xd7\xd2\x03\x41\xae\x1b\x63\xc8\xf3\xc6\xed\x90\x4a\xeb\x55\x90\x0a\xea\x00\xbe\x4f\x28\x52\xf2\x73\x94\x6c\x95\x4d\x49\x05\xde\x3c\x2f\xb3\x82\x01\x14\x49\xb6\xe1\x8d\x67\x6a\x83\xf4\x46\x4c\x89\xa3\x27\xb9\x00\xa9\x9f\x22\xf4\x0d\x1a\xa0\x24\x67\xaf\x91\xf6\xb4\xef\x1f\xc2\xd1\x52\xec\x20\xb0\x65\xe8\x95\x52\x0d\xd3\x5a\x43\xea\xde\xa3\x77\xdf\x7e\xe7\x2b\x8a\x73\x02\x59\x2f\xea\x1b\x67\x10\x13\xcd\x90\x51\x35\x6d\xfd\xb0\x3b\xe8\x41\x09\xe5\x9a\xee\x7b\x1f\xc6\x23\x9d\xd2\x57\x2a\x7a\x01\xf7\x51\x07\xc4\xa6\xcd\x89\xe9\xb5\x20\xb6\xaf\x8b\xf4\xf7\xc2\x76\x67\xce\xd7\xb4\xb3\x9c\xf6\x25\xd1\x4c\x63\x1e\x22\x81\x91\x62\xba\x6b\x47\x30\x41\x42\x70\xfb\xe0\xca\xe5\x67\x5b\x1c\x10\x2e\x1d\xa6\xe3\xbb\x43\x1f\x6c\x22\xea\x7e\x4e\x1d\xe1\xb2\x21\xd7\x53\x05\x62\x5d\xca\xe7\x35\xd1\x83\x9a\xef\xf9\x6d\x9c\xb3\x8c\xea\x42\x4d\x5e\x62\xa7\x14\xdb\xaf\x07\xa5\x97\xd7\xcf\xfe\x95\x1a\x3c\x26\xe8\x2b\xa6\x7d\x67\x70\xb6\xf9\xb4\x5f\x7c\xd5\x64\xef\x78\xfb\x4f\x86\xe4\xce\x28\x78\x0a\xe0\xab\x3d\xa6\xcd\x1a\xa9\xed\x5e\x58\x95\x7e\xae\x39\xff\x00\xac\x4b\x6d\x36\xf0\xd8\xe6\x38\xd6\x55\x9c\xa0\x2f\x5f\xd0\xfc\xf2\x97\x8e\x13\xb7\x2c\xd3\x7c\x74\x6d\x88\xb7\x99\x98\x77\x95\x6c\x67\x1d\xd9\x26\xda\xd0\xea\xc6\xa1\x03\xff\x50\x3c\x43\x71\x2e\xab\x1b\x50\x9c\x30\xda\xa1\xe7\xa7\x86\xd1\x67\xfd\x34\x4f\x4f\xd1\x63\x29\x4d\xc5\x63\x8f\x4d\xa2\xa0\xc1\x7e\x6a\xc0\x4e\x86\x68\xb3\x55\xb8\x40\x26\x74\x97\x89\xcc\x4d\xcc\x56\xd5\x56\x94\xeb\xcc\x5b\xb0\x70\x3f\x78\x86\x20\xf3\x12\x4f\xd0\x82\xd3\xbc\xd9\xba\x9d\x27\x76\x09\x1b\x18\x5a\x32\x1b\x2f\x0f\xb4\x5c\xeb\xd6\x3c\x30\x86\xd3\x58\xcc\xe5\x08\x8d\x86\xcb\x78\xfd\x96\xb1\xf8\x6a\x3b\x06\xed\x5d\xf2\x0f\xf7\x16\x3e\xea\x5c\xde\x5c\x2e\x5f\xe6\xec\xfe\xfa\x37\xb9\xee\x2d\xa5\x60\xd7\xae\x7a\x51\x45\xab\xcf\xb0\x67\x9f\x37\x0a\x39\x11\x39\xe5\x76\x1b\xec\x2e\xe7\xb5\xbc\x8b\xd5\x9a\xe8\x2f\x1b\xb9\x77\x97\xf2\x0d\x7a\x6f\x7f\x4d\xb5\xf3\x50\x8e\xf2\x7d\xbe\xee\x51\x60\xe8\x78\xd5\xaf\x5c\x36\xc0\xb5\xcd\x1d\x64\xe7\x7b\x44\x3f\x04\x8c\xdd\xb4\xaf\xfc\xdd\x6b\xab\x9d\x3d\x6e\x0e\xb8\x64\x05\xed\x35\x3d\x4d\xe4\x1b\xf8\x47\x96\xb4\xe0\x82\xb6\x43\xfc\xfe\x74\xa5\xd3\x6e\x66\x77\x06\x58\xce\x1e\x65\x7c\x7b\xec\x4e\x16\xc2\xf2\xee\x0d\x58\x84\xd4\x75\x5e\xda\x2a\xbc\x11\xcc\x2b\xc9\xef\x7f\xfa\x33\x74\x5f\x96\xeb\xcc\xc4\x14\x87\x43\x9b\xd8\x21\xf8\x37\x00\x00\xff\xff\x71\x32\x78\x00\x2b\x10\x00\x00")

func organizationControllerJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationControllerJs,
		"organization/controller.js",
	)
}

func organizationControllerJs() (*asset, error) {
	bytes, err := organizationControllerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/controller.js", size: 4139, mode: os.FileMode(420), modTime: time.Unix(1458139337, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationServiceJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x54\x4d\x8f\xdb\x20\x10\xbd\xe7\x57\x8c\x22\x4b\x80\x8a\xbc\x77\x47\x3d\xf4\x5e\xa9\x52\xab\x9e\x56\x7b\x60\x9d\x69\x96\xca\x01\x07\x70\xaa\x76\xe5\xff\x5e\xc0\x26\xc1\x1f\x8a\xfb\x03\xca\xc1\xde\x9d\x8f\xf7\x66\xde\x0b\xa6\x3f\x3a\x55\x3b\xa9\x15\x65\xf0\xbe\x03\x7f\x48\x67\x11\xac\x33\xb2\x76\xe4\xb0\xdb\xc5\x98\x50\xa7\xae\x11\xa6\x3c\xeb\x63\xd7\x20\xdd\x4b\x67\x7f\xeb\x4e\xab\x46\x2a\xfc\xd4\xb6\x7b\x56\x5a\x34\x57\x59\xfb\xd4\x17\x73\x12\x4a\xfe\x11\x01\xf3\xdb\x10\xdc\x73\x58\x89\xb2\x04\xbe\x92\x2b\x0b\xa9\x7e\x62\xed\xe0\x23\x3c\x93\xe2\xcd\xb9\x96\x70\x52\x5c\xc8\xcb\x61\x68\x49\x43\xaf\xf5\xd2\x58\xcf\xa1\xb8\xa4\x8d\xc2\xb9\x0a\x03\xa2\x95\xdf\xbf\x7e\xf6\x98\x40\xfc\x9f\x4f\x3a\xeb\xb5\x64\x44\x4e\xb5\xe3\x3e\xbe\xf8\x8e\x11\x4e\x6d\x50\x38\xac\xc6\x37\x9f\xe4\x4e\xe8\xaa\xf0\x98\x46\xa5\xba\xca\xd0\x31\xbc\x6f\xa9\xfe\xce\x67\xd0\x75\x46\x25\xca\x6c\x90\xdb\x9a\x03\x1b\x55\xe2\x8c\x1c\x8e\xca\x72\xd0\xbf\x14\x1a\x36\x9d\x2d\xcc\xdd\x99\xc6\xcf\x3c\x6c\x7a\x98\x64\x47\x96\xa8\x4e\xd9\x6a\xeb\xa8\xaf\xe5\xf0\x7e\x6a\xf4\xab\x68\xe4\xb1\x8a\xe8\x1e\xbc\x0a\x04\x11\xdf\x56\xcf\xf1\xfd\xd2\xb3\xd2\xbd\xa1\xa2\x13\xc0\x7c\x42\x6a\xd0\xb6\x5e\x46\x64\x33\xbd\x66\xec\xa9\xac\x3c\x0a\x27\x0e\x8b\xca\x9e\x3f\x62\x10\x56\x2b\xf6\x10\xbe\xb8\x94\x06\xc3\x0f\x27\x55\xaf\x50\x4c\x22\x59\x41\xbf\xa2\xbb\x37\x93\x26\x7d\xe6\x9b\xcd\xd5\x86\x0f\x40\x9e\x88\x7f\xa6\x86\xcc\xc8\x7c\xc4\xa0\xff\x62\xaa\x32\x30\x79\x34\xb6\xcc\xac\x0b\x3f\x93\xe6\xb1\xf8\x19\xfd\x86\x01\x51\x88\xa5\x09\x33\xb6\x28\xed\x36\xd7\x3f\xb8\x11\xf9\x16\xd1\x0d\x57\x86\x9b\x74\x33\x86\xc3\x19\xcf\xaf\x68\x38\x18\xdd\x2c\x34\xd8\xb4\xe9\x16\x08\xdd\xe1\x9f\xc9\xb7\x20\x5f\x67\xdd\xb9\xec\x2a\xf9\x2f\xa7\x09\xb7\xa8\x1a\x27\xea\xff\xdb\x19\xce\xc4\xce\xe1\xd9\x33\xea\xa3\x7f\x03\x00\x00\xff\xff\x52\xdb\xe4\x10\x7d\x06\x00\x00")

func organizationServiceJsBytes() ([]byte, error) {
	return bindataRead(
		_organizationServiceJs,
		"organization/service.js",
	)
}

func organizationServiceJs() (*asset, error) {
	bytes, err := organizationServiceJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/service.js", size: 1661, mode: os.FileMode(420), modTime: time.Unix(1458135582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsDetailHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\xcd\x4e\xdb\x40\x10\xbe\xf3\x14\x23\xab\xaa\xda\x83\x71\x8b\x38\x54\xaa\x63\x09\x95\x0b\x87\xaa\x48\x7d\x82\xb5\x3d\xb1\xb7\xac\x77\x2c\xef\x3a\x90\x46\xbc\x7b\xc7\x76\x08\x1b\xbc\x09\x06\xda\xf2\x77\x21\x99\xbf\xcc\x7c\x33\xf3\xed\x6e\x9c\xcb\x45\x72\x00\xfc\x17\x57\x79\x98\x91\xb6\xa8\xed\x20\xe8\x85\xac\x06\x25\x96\xd4\x3a\xc2\x8d\x62\xae\xf0\x6a\x16\x7c\xf9\x14\x6c\xeb\x7a\x7d\x9d\xfc\x68\x0a\xa1\xe5\x6f\x61\x25\xe9\x38\xaa\x3d\x36\xe5\xe7\x64\xb5\x82\x45\x75\x48\x8e\xe9\x61\xa1\x28\x15\x4a\xe6\x70\x7d\x1d\x47\x6c\xb2\xfd\xbb\xd1\x26\xe1\x51\x2a\xc9\xc1\x3e\xd3\xbb\x5f\xc7\x71\x18\x00\x2b\x52\x03\xfc\x3f\x5f\x6a\x51\xc9\x2c\x2c\x51\x16\xa5\xf5\xa4\x3e\xd8\x8e\x15\x8e\x32\x54\x22\x45\x95\xc4\x12\x32\x25\x8c\x99\x05\x73\x01\x73\x11\xb6\x06\x9b\x20\x89\x23\x99\xbc\xd7\xa9\xa9\xbf\x9e\x23\xd5\x0a\xe3\x68\xcb\x69\x6f\xdc\x94\xf2\xe5\xba\x29\xb3\xa0\xa1\x4b\x0f\xfc\xae\x8b\x92\xc6\x53\x81\xcf\x2a\x94\x16\xab\x9b\x6c\x59\x76\xc4\x52\x8d\x7b\xc2\x6f\x02\x74\x2d\xb8\xf5\xdb\xc4\x0a\x2d\x5e\xd9\x09\xfe\x7d\x0c\x9e\x98\x4b\x8d\x8d\xf1\xce\x8a\xd7\xa3\x3c\x06\x5d\x84\x0d\xd6\x28\x18\x09\xea\xbc\x41\xea\xd1\x40\xf5\x0a\x13\x24\xc0\xc3\x36\x18\xf5\x93\x75\x3c\xa1\xae\xf1\xb4\x8d\x4d\xdc\x82\x5f\x07\xce\xdf\xb1\x4a\x9f\x00\x74\xd5\xbb\xfb\x90\x1e\x34\x0c\x35\x23\xbd\xb6\x7a\x06\xa8\x37\x76\xfb\xf7\x22\x6d\xad\x25\xed\xc0\x59\x37\xb2\x12\xcd\x32\xe8\x6a\xcd\x94\xcc\x2e\x66\x01\x17\x68\x4a\xba\x3c\xd3\x0b\x69\xfb\x12\x4f\xa5\x50\x54\x7c\x78\x87\x0b\xe6\xc9\x8f\xf7\x40\xee\x5b\xfd\xb0\x56\xad\x19\xf6\x1f\xfa\xb0\x08\x86\x2a\x24\x8d\xf7\x8e\x8e\x25\x52\x56\xd6\x43\x7a\x24\x2e\x92\x6d\x7f\xb0\x04\xbf\x88\xbb\xb2\x5a\xed\xa2\xd4\xae\x19\xb7\x81\xee\x41\x70\xc0\x67\x07\x15\x45\x0e\x17\x79\xe8\x31\xda\xc5\x8f\x4f\x20\xce\xb9\x54\xd8\x0f\x7a\x48\x2e\x7f\x7e\xe3\x33\xab\x11\x99\x35\x0f\xa5\xd0\x97\x53\x59\xd6\xa6\x68\xdc\x9a\x7e\xda\xa6\xcd\x6c\xdb\x3c\xf8\x58\x78\x41\x35\x51\xb1\x55\x11\x5a\x2b\x75\xf1\x88\x26\xbd\x91\xb3\xed\x94\x2a\xc1\xbb\xc9\xd7\x0a\x7c\x34\xf1\xe6\xda\xf8\x58\x97\xc5\xc3\xe1\xd6\xe9\x9f\x97\x6f\x1f\x47\xb8\x0f\x63\x51\x87\x40\x4f\xf2\x1c\xf2\x5b\x60\xa7\x32\x68\xd2\xf9\x09\xd7\xb3\xbf\x17\xe4\x90\x2e\xff\x36\x79\xbe\x89\xe9\xdd\xf5\x08\xd8\xeb\x54\xaf\x9f\x07\x52\x4b\xcb\x87\x66\x90\x9c\x9c\x9f\xc1\x49\x96\xa1\x31\x60\x30\x6b\x90\x19\xdb\x6d\xc9\x48\x0b\xa2\x41\xd0\x88\x39\x37\x86\x8f\x36\x31\x28\x6d\x89\x70\x66\x0d\x27\x73\x48\xba\x03\x01\x44\x2d\xa1\x35\x4c\x2e\x40\xa2\xb5\xe5\xd1\x56\x97\x26\xaf\x5a\x9f\xb3\xa9\x85\x1e\x9e\x12\x71\xd4\x7d\x9e\x88\xcf\xb0\x4a\xbb\x7b\x7d\xc7\x70\xbf\xc9\x6b\xd8\xb9\xae\x59\xc2\x6d\xd6\xf4\xcd\xfb\x37\x6d\xfe\xcf\x37\x99\x1b\xa9\xf1\x3e\x2f\x7b\xed\xe6\x29\xbd\x56\xfc\x09\x00\x00\xff\xff\xed\xb7\x28\x96\x69\x0f\x00\x00")

func organizationViewsDetailHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsDetailHtml,
		"organization/views/detail.html",
	)
}

func organizationViewsDetailHtml() (*asset, error) {
	bytes, err := organizationViewsDetailHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/detail.html", size: 3945, mode: os.FileMode(420), modTime: time.Unix(1458138711, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsInvitationdialogHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\xcd\x6e\xdb\x38\x10\xbe\xe7\x29\x08\x9e\x12\x60\x1d\x2d\x9c\xdd\xcb\xae\x25\xa0\xc8\xa9\x87\xa2\x40\x91\x9e\x03\x8a\x1a\x4b\x6c\x28\x52\x25\x47\x8e\xdd\xa7\xef\x90\x54\x62\x4a\xb1\x9d\xf4\x24\x8a\x33\xf3\x71\xe6\x9b\xbf\x4d\xdf\xac\x1a\x25\xb4\x6d\x99\x69\x57\x52\x5b\xf1\x54\x5d\x31\xb6\xd9\x5a\xd7\x87\x03\x1d\x49\x03\xad\xd5\xb5\x70\xe9\x22\x5e\x36\x6a\xc7\xa4\x16\xde\x97\xfc\x28\x8f\x5f\xcf\x8f\x6a\xa4\xd8\xad\xab\xcf\x66\xa7\x10\x98\xb7\x3d\x58\x03\x9b\x82\xae\x72\x0d\x3f\x08\xc3\xb6\x1a\xf6\xd5\xa6\x08\xe7\x99\x90\xc0\xeb\x11\xd1\x9a\xec\x35\x25\xad\x99\x6e\x79\xf2\x5a\xc9\xa7\x92\x4b\x61\x24\xe8\xeb\x9b\xd9\xfb\x09\x22\x58\x30\xfa\xfa\x5d\xbb\xf2\x4e\x96\x9c\xa0\x00\x7d\xa1\xfa\xb6\x50\xf2\x91\xc2\xf6\xf0\xb8\xfe\x67\xd8\xdf\x92\x06\x67\xc2\x29\xb1\xd2\xa2\x06\x5d\xf2\xfb\x20\x63\x89\x22\x4e\x1e\x4e\x68\x33\x27\x8b\x57\x2f\x33\x86\x0a\xa2\x68\x62\xb0\x58\x52\x78\x64\x7d\x45\x58\x08\x06\x5f\x0c\x17\xc4\xce\x95\x38\xd3\xe2\x60\x47\xa4\x58\xad\x1e\x7b\xb3\x8c\x34\xd8\x26\x8d\xb9\xe0\x95\x06\x33\x8c\x18\xc1\x84\x32\xe0\xde\x2a\x45\xc5\x18\x78\xf5\xcd\x6a\x4a\x55\x3a\x9f\xd6\x0b\x7c\x82\x06\x89\x21\x07\xbd\x6d\x02\x5b\x8e\xac\xf8\x69\xfd\x17\x1b\x3b\xa0\xa2\x6c\xec\x84\x1e\xa1\xe4\xf6\x99\x1c\xe1\xd5\xd7\xf0\x89\x3c\x25\xf1\x9f\x40\xf4\xd0\xd7\x01\xe3\x4b\xfc\xbe\x0b\x12\x15\x92\xe3\x27\x58\x2a\x3e\x42\xd3\xb1\x64\x4b\xfe\x2f\x3f\x51\xb6\x47\x57\x17\x58\xa9\xce\x2f\xf1\xfe\xdd\x83\x33\xa2\x7f\x87\xfb\x08\x9b\xf1\x3e\x92\x15\x5a\x15\x1b\x8d\xb3\x5e\x19\x0d\xa6\xc5\xae\xe4\x6b\xce\x1c\xfc\x1c\x95\x83\x86\xe1\x61\x20\xba\x10\xf6\x54\x48\x62\x44\xbb\xb5\x72\xf4\x67\x1e\x08\xa5\x14\xe0\xc1\x7b\xd1\x02\x15\x23\x91\xad\x1a\x11\x68\x05\xe7\xac\xf3\x3c\xf4\x53\x40\x59\x75\xaa\x21\xd8\xad\xd0\xfe\x62\xea\xe7\x88\x25\x6f\xc6\x81\xfa\x56\x90\xbf\xd5\x43\xa7\x3c\x0b\x21\x30\xa1\x1d\x88\xe6\xc0\x7e\x50\x2c\xd0\x64\x3d\xf4\x21\x48\x63\xfd\x28\xbb\x00\x94\x63\x36\x16\x3c\x33\x16\x19\xec\x95\xc7\x0b\x98\x67\x44\xef\xd7\xc4\xc2\x70\xf9\x1b\xdc\xf4\x78\xd0\xa1\x56\x85\x6b\x95\x59\x39\xd5\x76\xf8\xdf\xfa\xef\x61\xff\xff\x74\xa3\x61\x3b\x5d\x2c\x9b\xba\xbb\xab\x3e\xc5\x1c\x82\x47\x86\x36\x52\xc3\x30\x44\x67\x5d\x2b\x8c\xfa\x15\x93\xc2\x9e\x95\xd6\xac\xa6\x29\x4b\x73\xe2\x96\x66\xec\x5d\x15\x2c\x1f\x3a\x48\x24\x18\x80\xc6\x07\x73\x21\x25\x0c\x98\x00\x62\xbd\x24\xf3\x1a\x68\xe2\x03\x49\x71\x14\x5a\x1f\xe8\x5f\x5a\x2a\xa3\x96\x0d\xc2\x21\xb3\xdb\xb7\x2f\xa6\x47\xce\xce\xbb\x53\xe3\x2d\x1b\x7b\xf4\x10\x61\xf8\xd7\x81\xe6\xec\x73\x16\xf8\x85\x9d\x90\x6d\x84\x8b\xa3\xff\x3e\x5e\x5d\xcd\x92\xf8\x66\x46\x9f\xda\x2e\x83\x53\x94\x93\x03\x9f\xda\xc5\x8f\x75\xaf\x30\xdf\x33\xa9\xcb\xae\xf3\x96\xfb\x2b\xcc\xbd\x1b\x7e\x3e\xcb\x99\x63\x69\x1b\x9e\x77\x2c\x67\x6f\x62\x29\x6e\xe4\x22\xad\xe4\x4c\x5c\x5d\xfd\x0e\x00\x00\xff\xff\xfc\xa8\x30\xc6\xbe\x07\x00\x00")

func organizationViewsInvitationdialogHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsInvitationdialogHtml,
		"organization/views/invitationdialog.html",
	)
}

func organizationViewsInvitationdialogHtml() (*asset, error) {
	bytes, err := organizationViewsInvitationdialogHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/invitationdialog.html", size: 1982, mode: os.FileMode(420), modTime: time.Unix(1458136425, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _organizationViewsNewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\x4b\x72\xdb\x30\x0c\x86\xf7\x3e\x05\x86\xab\x76\xa1\x6a\x3a\xdd\x4a\xda\xb4\xeb\xb6\x33\xc9\x05\x20\x11\x92\x38\xe1\x43\xe1\xc3\xb6\x72\xfa\x40\x94\x63\xcb\x4e\x26\xb1\x37\xa6\x00\xf0\xe3\xcf\x1f\x60\x25\xd5\xbe\xd9\x01\xff\xaa\xde\x79\x03\x1a\x67\x97\x62\x2d\x3a\xa7\x93\xb1\x02\xec\x50\x84\xd4\x1a\xc5\xa1\xbd\xf9\xd1\x79\xc2\x48\xdf\xbe\x8b\x75\x4b\xde\x36\xfe\x6c\x7e\xe7\x30\x20\x58\x3a\x80\xf3\x03\x5a\xf5\x82\x51\x39\x5b\x95\x9c\xbd\x94\xb6\xbe\xdc\x7c\x19\x59\x28\x3b\xa5\x58\x74\xce\x46\x54\x96\xfc\x25\x99\x0b\x34\xb6\xa4\x9b\x7f\x1b\x1e\x58\x34\x54\x95\x6b\xe2\xba\x38\xa3\x16\xb9\xc6\x49\xd2\x59\xed\x52\x2c\xc0\x28\xab\xc9\x0e\x71\xac\xc5\x2f\x01\x9e\x9e\x93\xf2\x24\x21\xce\x13\xd5\x22\xd2\x31\x0a\xc0\x14\x5d\xef\xba\x14\x9a\xaa\xcc\x9c\x1b\x36\x7b\x94\xc9\x14\x02\x0e\x14\x32\x7c\x8f\x5a\xc9\x2c\x8a\xbc\x77\x3e\xf0\x41\xb2\x58\x40\xc5\xa8\x24\x93\x7b\xd4\x81\xc4\x35\xe8\x03\x58\x2d\x64\x9a\xb4\xea\xd8\x3f\xd1\x3c\x8e\x2a\xe4\x2b\x02\xff\xa3\x66\x57\xe5\x0c\x11\x9f\x88\x8d\x3c\xf7\xe9\x0c\xba\x0e\x55\xe5\x67\x7e\xde\x6b\xf6\x7f\xaf\x0c\xfa\x19\xfe\xfc\x7d\xb8\xdb\x66\x69\xf9\xf2\x1b\x3b\xdf\x9b\xf8\x85\xb6\xc5\x91\xb7\xb9\xf3\xee\x70\x63\xda\x22\xbd\x4d\x31\x72\xf7\xd7\x43\xd6\x79\x14\xd0\x69\x0c\xdc\x0b\x4e\x7b\x54\x81\x5b\xca\xab\x69\xd5\x2f\x4e\x23\x99\x0f\x5e\x37\xdf\x40\xc3\x84\x16\x7a\x4d\x47\x56\xbb\xac\xb7\x62\x2f\x4f\xa2\x5c\xde\x44\xb3\x3b\x85\x5e\x03\x00\x00\xff\xff\xee\xf8\x78\xf7\x2c\x03\x00\x00")

func organizationViewsNewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_organizationViewsNewHtml,
		"organization/views/new.html",
	)
}

func organizationViewsNewHtml() (*asset, error) {
	bytes, err := organizationViewsNewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "organization/views/new.html", size: 812, mode: os.FileMode(420), modTime: time.Unix(1458122089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company/controller.js": companyControllerJs,
	"company/service.js": companyServiceJs,
	"company/views/detail.html": companyViewsDetailHtml,
	"company/views/new.html": companyViewsNewHtml,
	"notifications/controller.js": notificationsControllerJs,
	"organization/controller.js": organizationControllerJs,
	"organization/service.js": organizationServiceJs,
	"organization/views/detail.html": organizationViewsDetailHtml,
	"organization/views/invitationdialog.html": organizationViewsInvitationdialogHtml,
	"organization/views/new.html": organizationViewsNewHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"company": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{companyControllerJs, map[string]*bintree{}},
		"service.js": &bintree{companyServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"detail.html": &bintree{companyViewsDetailHtml, map[string]*bintree{}},
			"new.html": &bintree{companyViewsNewHtml, map[string]*bintree{}},
		}},
	}},
	"notifications": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{notificationsControllerJs, map[string]*bintree{}},
	}},
	"organization": &bintree{nil, map[string]*bintree{
		"controller.js": &bintree{organizationControllerJs, map[string]*bintree{}},
		"service.js": &bintree{organizationServiceJs, map[string]*bintree{}},
		"views": &bintree{nil, map[string]*bintree{
			"detail.html": &bintree{organizationViewsDetailHtml, map[string]*bintree{}},
			"invitationdialog.html": &bintree{organizationViewsInvitationdialogHtml, map[string]*bintree{}},
			"new.html": &bintree{organizationViewsNewHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

