// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// login.html
// base.html
// error.html
// apidocumentation.html
// smsconfirmation.html
// emailconfirmation.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xdd\x6e\xdb\x36\x14\xbe\x2f\xd0\x77\x38\x55\x2f\x7c\x13\x49\xad\x93\xfd\xa0\xb5\x3c\x04\x49\x51\x04\x18\xd0\xa2\x0e\x50\xf4\x2a\xa0\xa5\x23\x91\x88\x44\xaa\x24\x65\xc7\x18\x06\xf4\x41\xb6\x97\xeb\x93\xec\x90\x94\x62\xd9\x4e\x56\xaf\xdb\x50\x14\x26\xc5\xf3\xfb\x7d\xe7\x1c\x32\xb3\x67\x97\xef\x2e\xae\x3f\xbd\x7f\x03\xdc\x36\xf5\xfc\xe9\x93\x99\xfb\x85\x9a\xc9\x2a\x8b\x50\x46\xfe\x0b\xb2\x82\x7e\x01\x66\x0d\x5a\x46\x82\xb6\x8d\xf1\x73\x27\x56\x59\x74\xa1\xa4\x45\x69\xe3\xeb\x4d\x8b\x11\xe4\x61\x97\x45\x16\xef\x6c\xea\x0c\xbd\x86\x9c\x33\x6d\xd0\x66\x9d\x2d\xe3\x9f\x23\x48\x47\x86\x24\x6b\x30\x8b\x56\x02\xd7\xad\xd2\x76\xa4\xbe\x16\x85\xe5\x59\x81\x2b\x91\x63\xec\x37\x27\x20\xa4\xb0\x82\xd5\xb1\xc9\x59\x8d\xd9\xcb\xe4\x45\x14\x2c\x59\x61\x6b\x9c\x5f\xd9\x89\x81\x4f\xaa\x83\x77\xb2\x16\x12\x67\x69\xf8\xec\x25\xe8\xc3\x2d\x68\xac\xb3\xc8\xd8\x4d\x8d\x86\x23\x92\x33\xae\xb1\xcc\x22\x66\x28\x36\x93\xe6\xc6\xa4\xfe\x30\xa1\x55\x94\xfe\x23\xbd\x92\xa2\x8e\xd9\x1a\x8d\x6a\x30\x69\x84\x3c\x30\xe1\x35\x26\x0e\x35\xf3\x2a\xf5\xe2\x26\xa9\x94\xaa\x6a\x64\xad\x30\x49\xae\x1a\x67\xe7\x97\x92\x35\xa2\xde\x64\x1f\xb1\xae\xcb\x9a\x5c\xbd\x3a\x7b\xf1\x62\xe2\xfd\x4f\xb6\xfe\x27\x60\x09\xe9\x6c\xe2\x01\x26\xad\x49\xf0\xe3\x05\xfc\x92\x4f\xe1\x37\x70\xa7\xb1\xe1\xac\x50\xeb\x57\x30\x6d\xef\xfc\xff\xe7\xa7\x17\xee\xdf\x6b\xf8\xfd\xe9\x13\xaf\x94\x0e\x5a\xb3\xb4\x67\x78\xb6\x54\xc5\x66\x60\x1c\x35\x88\x22\x8b\xc2\xb2\x07\xbb\x10\x2b\xc8\x6b\x4a\x3e\x8b\x7a\xb2\xc2\x41\x7f\xe4\xe4\x6b\x55\xa9\x68\x3e\x63\x3d\x50\xcf\xa3\x39\x5c\x59\x43\xd4\x24\x81\x1a\xf2\xcb\xe6\xb3\x94\xc4\xc7\x9a\xbd\x51\x23\x2a\x19\xaf\x35\x6b\x07\xb3\x74\x3c\x58\xd2\x58\x09\x63\x5d\x28\x33\x31\xc8\x97\x0c\x4a\x16\x77\x06\x75\xdc\xd6\x9d\xa1\xa3\x54\xcc\x3f\xf4\x82\xce\xd1\x81\x15\x0a\x4f\xc8\x43\x13\xde\xb1\x3f\x20\x03\x0b\xda\x50\xbd\x6d\xf5\xb7\xe1\x0e\xab\x00\x19\xea\xb9\xc3\x72\xf6\x2c\x8e\x61\xf1\xeb\xd5\xe5\x9b\x05\x2c\xae\xcf\x3f\x5c\x43\x1c\x3b\x99\x01\x12\x53\x8b\x02\x5f\x7e\x1b\x42\x3e\x9d\x13\x4e\x1a\x54\x00\x8a\x94\x24\x95\xf1\x86\x7c\x4d\x47\x22\x42\xc2\xc6\x4b\xad\x25\x70\x26\x0b\x73\x7f\xbe\x0d\xae\xff\xdd\x09\x60\xfa\x78\x00\xf0\x00\x15\x9f\x3b\x65\xd1\xdc\x38\x11\x46\xd1\xe8\x11\x23\xfc\x74\x57\x28\x9a\xf7\xd4\xb6\x1a\x0d\xca\x1c\xa1\x41\x26\x0d\x41\x48\x2c\xb0\xdc\x0a\x25\x13\xb8\x50\x4d\xcb\xa4\x40\x03\x12\xb1\x08\x29\x0c\x19\xc2\x9a\x8b\x9c\xbb\x6f\xbd\x09\x4b\xba\x50\x88\xb2\x44\xed\x36\x6b\xb6\x31\x27\x50\x60\x8b\xb2\x10\xb2\x22\x80\xc0\x72\xa4\x79\xe1\x4c\x6e\x4e\xa0\x45\x6d\xe8\x9b\xd2\x61\x84\xdc\xd9\x84\x30\x39\xfd\x1b\xf2\x1e\xc2\xe7\x87\x63\x09\x72\x7e\x9b\x4e\x8a\x9c\x59\x04\xb5\xa2\x3e\x59\x31\x2d\x54\x67\xdc\xac\x93\x12\x6b\x03\x44\xcb\x21\x6b\xdb\x7c\xfa\x28\x0d\x2c\x3b\xca\xd4\x8d\x2e\x56\xbb\x1c\x1d\x02\x47\xb2\xf9\xe3\xff\xc8\xe6\xd7\x2f\x7f\x5c\x73\x0c\x18\xbf\xd5\x42\x12\x35\x96\xab\xae\xe2\x16\x54\x09\x6e\xce\x59\xee\x68\xa0\x63\x9a\x31\x72\x62\x61\x89\xa5\xd2\xf8\x0c\x3e\x72\x46\x09\x95\x70\xc1\x35\xb5\x60\xc3\x88\x35\x12\xea\x95\x89\x41\x85\x86\xc4\x07\xd7\xe0\x90\x44\x28\xb5\x6a\x80\x81\xb1\x64\x22\x39\x34\x91\x24\x89\x23\x98\xb3\xd6\x2f\x43\x69\x31\xa8\x85\xa5\x09\x0f\x4b\x61\xa1\x71\xbe\xbf\x7e\xf9\x73\x44\x3a\xe5\x25\x9a\x0a\x8c\xce\xef\x67\x35\xed\xd3\x42\xc7\x06\x3b\x63\x92\x56\x56\x11\x81\x4e\x8d\x4e\x23\x01\x4b\xdb\x0f\xec\x00\xc8\xd9\x00\x08\xeb\x28\x74\x7d\xe3\xee\xa9\x9b\x4a\xb3\x4d\x34\xbf\xd4\x09\x2c\x9c\x05\xa2\x87\x9f\x6d\x75\x96\x3a\x7d\x64\x73\x08\xef\xb9\x1c\x17\x3e\xe1\xbc\xad\x27\x87\xaa\xa0\x0e\x51\x16\xd8\x52\x51\x71\xf8\x32\x0f\x55\xe5\xca\xdb\x6d\x5b\xad\x56\xa4\xaf\x4f\xfa\xca\xf1\x72\x6b\xae\x7c\xfb\x30\x4d\x70\xb3\xfa\xd6\x19\xb2\xca\x75\x51\x68\xad\x7f\xd1\x17\xa7\x47\xf5\xc5\x82\x3b\xd7\x5d\xeb\xbc\x16\xae\x31\x84\xa4\x92\x68\x98\x6b\xfe\xbd\x56\x70\x45\x4f\x23\x6e\x03\xcc\x40\xd3\x51\x70\xcc\x17\x3e\x75\xb9\xb4\x47\x56\xff\xd9\x71\xf7\xd1\xf7\x14\xff\xa5\x0a\x05\x0d\xac\xd4\x4c\x14\x2e\x1f\xc3\xd5\x3a\x0c\xac\x92\xd1\x70\xa3\x91\xd3\xf8\x52\x0d\x39\x3b\x4e\x46\xc9\x86\x54\x84\xe1\x41\xd3\x4b\x28\x57\xde\xa8\xdd\x73\xe6\x9e\x3e\x37\x23\x9c\x1b\xd3\x91\x44\x18\xe8\x64\x49\xef\x98\xa2\x52\x30\xac\xc4\xe3\x58\x1b\xdd\xc1\x1e\xa3\x9f\x1e\x82\x62\x0f\xa5\xfd\x63\xa2\xc6\x2a\x19\xe7\xe8\x26\x77\x78\x46\x84\xf5\x58\x61\x57\xa5\x50\xf9\xee\xa1\xbf\x6c\x2d\xd3\x15\x3d\xfa\xa2\x9b\x25\xbd\x24\x6f\x87\x57\xd3\xf0\x06\xaa\x44\x95\x54\xc2\x2e\x95\xba\x35\x89\x50\xa9\xb0\x86\x10\x08\xd7\x5e\xda\x87\x98\xee\x5b\x05\xb8\x54\x79\xd7\xd0\x91\x07\x67\xcf\xe5\xe8\xae\xdf\x85\xe9\x91\x98\x69\x16\xe5\xd3\xa3\x03\xa7\x87\x5a\x31\x76\x7e\x18\xdb\xf9\xfb\xab\xff\x3c\xbe\xd3\xef\x00\xd6\xf2\x6e\xe9\x9f\x94\x63\x4c\x0f\xc3\x9d\x19\xba\x39\x07\x77\x41\x2b\x76\x8f\xd5\x43\x49\x80\x05\x15\x67\xee\x6e\xdb\x02\xdd\xcd\xfb\xd6\x4b\x1f\x18\x4c\x9d\xc5\xfd\x78\xbf\x91\xf5\xce\x33\xf0\xf1\x71\x94\x0e\xcf\xd2\xb4\xff\x1b\xe5\xaf\x00\x00\x00\xff\xff\xa6\x1b\x2d\xfa\xb5\x0c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3253, mode: os.FileMode(493), modTime: time.Unix(1467039295, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x51\x6f\xd3\x30\x10\x7e\xdf\xaf\x30\x7e\xc9\xcb\x1c\x0f\x09\xd0\xe8\x9a\x22\x34\x40\xe2\x69\x68\x0c\xa1\x09\xd0\xe4\x25\x97\xd4\x9d\x63\x67\xf6\xb5\x5b\x84\xf8\xef\x9c\x93\x66\x74\x15\x9b\x5a\xe8\xf2\x92\xdc\xf9\xfb\xbe\xf3\x5d\x2e\xe7\x8c\x9f\xbd\x3b\x39\x3e\x3b\xff\xf4\x9e\x4d\xb1\x36\x93\xbd\x71\xbc\x31\xa3\x6c\x95\x71\xb0\x3c\x3a\x40\x15\x93\x3d\x46\xd7\xb8\x06\x54\x84\xc3\x46\xc0\xf5\x5c\x2f\x32\x7e\xec\x2c\x82\x45\x71\xd6\x36\xc0\x59\xde\x5b\x19\x47\xb8\x45\x19\x85\x8e\x58\x3e\x55\x3e\x00\x66\x73\x2c\xc5\x21\x97\xab\x42\x56\xd5\x90\xf1\x85\x86\x9b\xc6\x79\x5c\xa1\xdf\xe8\x02\xa7\x59\x01\x0b\x9d\x83\xe8\x8c\x7d\xa6\xad\x46\xad\x8c\x08\xb9\x32\x90\x3d\x4f\x0f\xf8\x52\x0a\x35\x1a\x98\x9c\x42\xa5\x03\x7a\x85\xda\x59\x26\xd8\x47\x4c\x02\x3b\x77\x73\x76\x62\x8d\xb6\x30\x96\x3d\xaa\x67\x90\xe7\x8a\x79\x30\x59\x12\xb0\x35\x10\xa6\x00\xc8\x1a\x0f\x25\x60\x3e\x4d\x3a\x4c\x7f\x4d\xc9\x97\x25\x31\xdf\x30\x92\x52\xcd\xd4\x6d\x5a\x39\x57\x19\x50\x8d\x0e\x69\xee\xea\xce\x27\x8d\xbe\x0c\x92\x0a\x36\x37\xca\x5f\xd4\x0a\xc1\xd3\x46\x25\x6d\x31\x7d\x3d\xb8\xc5\xe0\x4e\x6b\x6d\xd3\x3c\x84\x64\x7d\x2f\xfc\xcf\x5e\x78\x1f\x98\xab\x40\x85\x0b\x92\xd0\xb2\x5b\x8c\xbc\xbb\x0a\x6e\x48\x2c\xa9\xa6\x42\xdd\x40\x70\x35\x0c\xb1\xef\x6b\xdc\x4f\x32\xe2\xc3\x7a\x96\xc4\x79\x53\xaa\x5a\x9b\x36\xfb\x0a\xc6\x94\x86\x62\x8d\x5e\x1c\x1c\x24\xeb\x55\x4c\x18\x52\x23\x64\x49\xf7\xfe\x57\xb2\xec\x10\x93\xbb\xca\x7e\xb3\xd5\xf7\x51\x6e\x9c\xba\xfa\xb1\x1f\x0d\x31\x3c\xa7\xc3\x33\xfb\xb9\xf2\x1a\x18\x2b\x74\x68\x8c\x6a\x47\xcc\x3a\x0b\x47\x77\x4b\xbf\x7a\x75\xb9\x94\x1f\xcb\xbe\x55\xf7\xc6\x97\xae\x68\x19\x69\xa9\xa6\xc9\xb8\xc6\xd0\xba\xb9\xeb\x1a\x21\xf5\x2b\x7d\xc2\x23\x84\x0c\x9d\xa3\x28\x74\xe4\x11\x54\x10\x56\xf4\x60\x11\xe5\xc0\xb3\x9e\x03\x7e\x32\x96\x7f\x05\x44\x66\xa1\x17\x2c\x37\x54\xf8\x8c\x97\x73\x63\x42\xee\x01\x6c\xe9\x7c\xdd\x05\x89\x3d\x4e\x6c\x02\x45\x2c\x2d\xea\x06\x59\xf0\xf9\x96\xcd\x35\x0b\xd4\x55\x2f\xd3\x57\x83\x9d\xce\xa8\xc2\x94\x7e\xa7\x37\xd9\xa1\xb0\x50\x56\xc7\x8e\xed\x3a\xe6\xc9\x82\xd4\x10\x82\xaa\x20\x3c\x6d\x14\xef\xe6\x4f\x9d\x88\xa2\x2f\x7b\xa7\x11\x36\x9a\x22\x0f\x07\xe3\x38\xd5\xbe\x68\x94\xc7\x76\x39\x0a\xae\x7d\xee\x0a\x10\x15\x58\xa0\xde\x77\x5e\xce\x06\x1f\xc9\xf0\x1d\xc8\x5c\x7c\x39\xfb\x70\xb8\x95\xd6\x90\x53\xcf\x5f\x33\x1f\x53\xa2\x8a\x35\x34\x06\x68\x4e\xc9\x40\x87\x0b\x14\xcb\xdb\x76\x1c\x3a\x6c\x4a\x5d\x7d\x06\x1f\x0f\x99\xed\xa8\x85\xf6\x90\xa3\x5e\x40\x90\xfd\x00\xf8\x67\xfa\x42\x19\x5d\x74\xb3\x68\x43\x89\xd5\xf1\x75\xcf\x78\xdb\x34\xff\x2b\xb1\x5d\x2d\x1e\x94\x89\xbf\x04\xde\x19\xb3\x71\x59\x1e\xde\x50\x1d\x76\x27\x76\x0a\x01\x6c\xf1\xa8\xa4\x8c\xc7\x46\x77\x8c\x74\x7f\x42\xbf\x03\x00\x00\xff\xff\xc4\xf0\x5f\x91\x1a\x09\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 2330, mode: os.FileMode(420), modTime: time.Unix(1467104693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x61\x4f\xdb\x3c\x10\xfe\xde\x5f\xe1\xd7\x5f\xfa\x85\xc4\xbc\xd2\xfb\x4e\x5b\x69\x32\x21\xd8\x24\xa4\x49\xa0\x0d\x34\xa1\x6d\x9a\x8c\x73\x4d\x5c\x9c\x38\xb3\x2f\x2d\xdd\xb4\xff\xbe\x73\xd2\x40\xe9\x06\x2b\x05\xf2\x01\xe2\xbb\x7b\x9e\xbb\x7b\x72\xb6\x3b\xfe\xe7\xf0\xf8\xe0\xf4\xfc\xe4\x0d\x2b\xb0\x34\xe9\x60\x1c\xfe\x31\x23\xab\x3c\xe1\x50\x71\xa6\x8c\xf4\x3e\xe1\x17\x39\x0f\x3e\x90\x59\x3a\x60\xf4\x8c\x4b\x40\x49\x10\xac\x23\xf8\xd6\xe8\x59\xc2\x0f\x6c\x85\x50\x61\x74\xba\xa8\x81\x60\xdd\x2a\xe1\x08\x57\x28\x02\xe7\x1e\x53\x85\x74\x1e\x30\x69\x70\x12\xbd\xe4\x62\x95\xa8\x92\x25\x24\x7c\xa6\x61\x5e\x5b\x87\x2b\xf0\xb9\xce\xb0\x48\x32\x98\x69\x05\x51\xbb\xd8\x61\xba\xd2\xa8\xa5\x89\xbc\x92\x06\x92\x7f\xe3\x5d\xbe\xa4\x42\x8d\x06\xd2\x77\x36\xa7\x10\x16\xb1\x23\x1c\x7a\x76\x6e\x1b\x76\x5c\x19\x5d\xc1\x58\x74\xfe\x41\x17\x4c\xa6\x4b\xe6\xc0\x24\x43\x8f\x0b\x03\xbe\x00\x40\x56\x3b\x98\x00\xaa\x62\xd8\xc6\x74\x4f\x41\xb6\x64\x18\x5a\xf5\x23\x21\xe4\x54\x5e\xc5\xb9\xb5\xb9\x01\x59\x6b\x1f\x2b\x5b\xb6\x36\x61\xf4\x85\x17\x24\x5b\x63\xa4\xfb\x5a\x4a\x04\x47\x35\x0a\xaa\x2e\x7e\xd5\x9b\xa3\xde\x1c\x97\xba\x8a\x95\xf7\xc3\x74\xad\x16\x7e\x53\x0b\xef\x12\x73\x92\x1f\xd0\x0b\x8a\x16\xad\x33\xe0\xae\xc5\xdb\x10\x38\x21\x39\x23\x39\x07\x6f\x4b\xe8\x73\xdf\xe6\xb8\xdd\x64\x88\xf7\xeb\x5d\x12\xe6\xf5\x44\x96\xda\x2c\x92\x8f\x60\xcc\xc4\x50\xae\xd1\x7f\xbb\xbb\xc3\x75\x15\x57\xc5\x43\x9a\x86\x64\xd8\x0e\xc1\x4a\xbf\x6d\x6c\x7a\x1d\xf6\xa9\xca\x3f\x8f\x94\xb1\xf2\xf2\xcb\x4e\x58\x44\xfd\x7b\xdc\xbf\xb3\x1f\x2b\x9c\x8c\x65\xda\xd7\x46\x2e\x46\xac\xb2\x15\xec\x5d\xbb\x7e\x76\xec\x62\x49\x3f\x16\xdd\xbc\x0e\xc6\x17\x36\x5b\x30\xe2\x92\x75\x9d\x70\x63\x73\x5d\xed\xd7\x35\x0f\x16\x8f\x4e\x2b\x8c\x32\x7d\x7b\xd0\x35\xfa\x68\x61\x9b\xc8\xb6\x93\x13\x05\x1e\x70\xac\x45\xa6\x63\xf1\x47\x6f\xc8\x93\xe9\x59\x20\x0d\x73\xdc\xf3\xcd\x1d\x25\x05\xc7\x09\x46\xde\xb4\x8b\x59\xfa\xea\xc6\x17\x37\x8e\x35\xd6\x89\xb5\x34\x2c\xbf\x67\x5b\xda\x29\x9b\x57\x4e\xd7\xc8\xbc\x53\x0f\x1c\xcf\xa9\xa7\xb9\xfc\x3f\x7e\xd1\xaf\xe3\x29\x7d\x19\x92\xad\xe5\x4b\x9f\x90\x38\x92\x95\x0e\x33\xdf\xce\xdc\xdd\x49\xf8\xe3\x92\x38\xdb\x50\x8a\xa9\xe7\xcf\xd3\x43\x09\xde\xcb\x1c\xfc\x5f\x9a\x78\xac\x52\x74\x2e\x3c\xaf\x4c\x5e\x86\x73\xf3\x7b\xff\x31\x9e\x46\xad\x8d\x4e\xba\x7b\x5a\xc2\x42\xbb\xac\x96\x0e\x17\xcb\xe3\xea\xec\xfd\xd1\x3d\xc5\x71\x2a\xa2\xa6\x3d\x4f\xc7\x93\xf0\x74\x9d\x40\x46\x9b\xc7\x81\x42\x3d\x03\x2f\xba\x8d\xb8\x35\xbc\xdb\x59\x5b\xc3\x67\xd2\xe8\x4c\xa2\xb6\xf7\xa9\xbb\x4a\xd1\x78\x70\xe2\x8c\xfe\x1c\x92\x50\x36\xff\x00\x2e\xdc\x72\x1b\x82\xdb\xb3\x48\xf4\x67\xd9\xc3\x41\xe1\xba\x76\xd6\x98\x8d\x1b\x5e\xc1\x6e\x53\x29\xce\xed\x5b\xa9\xd0\xba\xfd\x06\x0b\xb2\x6b\xd5\x4a\xb5\x65\x19\x13\xeb\x72\x8b\x27\x34\x33\x73\xeb\xb2\x2d\x49\xe8\xcb\xd9\x19\xb8\x7d\xa5\x6c\x53\xe1\xdd\x24\x22\x5c\x1f\xed\x75\xd2\xfe\x42\xfa\x15\x00\x00\xff\xff\x62\x46\x28\xcd\x32\x09\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 2354, mode: os.FileMode(420), modTime: time.Unix(1467104693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\xb8\xbc\xec\x65\x25\x66\x81\xdd\x22\x75\x24\x17\x45\xdc\x02\x39\xa5\x68\x13\x14\x41\x5b\x04\x8c\x34\x96\xe8\x50\xa2\xc2\xa1\x9c\x28\x45\xff\xbd\x23\x4a\x72\xed\x34\x0d\xac\x20\xd6\xc1\x12\x67\xe6\xbd\x37\x1c\x0e\x69\x46\x7f\xcd\x4f\x8f\xcf\x2e\x3e\xbc\x63\xb9\x2b\xf4\x6c\x12\xb5\x2f\xa6\x65\x99\xc5\x1c\x4a\xce\xca\x2c\x90\x55\x15\x73\xe5\xb0\x31\xb5\x29\xb5\x2a\xe1\x6d\x55\x79\x47\xa2\x8d\xbc\x66\x89\x96\x88\x31\xbf\xca\x78\x8b\x06\x99\xce\x26\x8c\x9e\xa8\x00\x27\x89\xd4\x55\x01\xdc\xd4\x6a\x15\xf3\x63\x53\x3a\x28\x5d\x70\xd6\x54\xc0\x59\xd2\x8d\x62\xee\xe0\xce\x89\x56\xf5\x88\x25\xb9\xb4\x08\x2e\xae\xdd\x22\x38\xe4\xa2\x27\x72\xca\x69\x60\x95\xcc\xc0\x7f\xcd\x4e\xdc\xdf\xc8\x2e\x4c\xcd\x4e\x7d\x36\x91\xe8\xcc\x5d\x30\x59\xae\x99\x05\x1d\x73\x74\x8d\x06\xcc\x01\x1c\xab\x2c\x2c\xc0\x25\x39\xf7\x31\xdd\x93\x93\x2d\xe6\x6d\x7e\x38\x15\x42\x2e\xe5\x5d\x98\x19\x93\x69\x90\x95\xc2\x30\x31\x85\xb7\x09\xad\xae\x50\x50\x35\x6a\x2d\xed\x65\x21\x1d\x58\x25\xb5\xf8\x37\x3c\x08\x5f\x0f\xe6\x60\x30\x87\x85\x2a\xc3\x04\x91\x3f\x91\x0b\xef\x85\xa9\x66\xe0\x50\x50\xb4\xf0\x4e\x8f\x13\xe3\x80\x0b\x2a\x61\x20\x6f\x01\x4d\x01\x6b\xed\x2d\x8e\xed\x49\xb6\xf1\xf8\x70\x96\x84\x79\xb3\x90\x85\xd2\x4d\xfc\x19\xb4\x5e\x68\xd2\x9a\xfe\x77\x70\xc0\x7f\x4b\x60\xa3\x78\x8e\x96\xb0\x5f\xb9\x8d\xf9\xfa\xd8\xd9\x3a\xec\x4b\x99\x7d\x9d\xfa\x1e\xf9\xf6\x4f\x3b\x08\x86\xef\x70\xdd\x3b\xdf\x37\x38\x19\x4b\x15\x56\x5a\x36\x53\x56\x9a\x12\x8e\xd6\xae\x1f\x1d\xbb\xe8\xe9\x23\xd1\x35\xd9\x24\xba\x32\x69\xb3\xd5\x7e\x93\x88\xda\x34\xa0\x3e\x0d\xba\x46\x0d\xda\x48\xb0\xb3\x48\x3c\x6e\x27\x40\xaa\x56\x6d\x2b\xaf\x14\xdc\x0e\x54\xb7\x96\x3a\x1e\x2c\x27\x18\x79\x67\x5d\x4c\xef\xab\x6a\xcc\x7f\x39\x1e\xb0\x2e\x8c\x71\x8f\xa9\xf5\x76\x52\xc3\xc4\xaa\xca\x31\xb4\xc9\xc8\xd6\x5b\x22\xf5\xdc\xff\xe1\xab\x61\x1c\x2e\xb1\x4d\xa3\xe3\x9b\xbd\x20\x71\x60\x4d\xed\x60\x7f\xf4\x05\x20\xd2\x4e\x46\xdf\xaf\x7b\x53\x91\xa5\x6a\x37\xe5\x9e\x45\x68\xcf\xef\x57\x21\x31\xe6\x5a\xed\xbb\x56\x48\xc5\x72\xea\xfe\x65\x8b\xb5\xd3\x51\xf9\x84\x18\x91\x56\x74\x08\xd0\x79\x25\x90\xfe\x14\x20\xa5\x1d\x67\x21\x71\x6a\x05\x28\xba\xdd\xfb\x6c\x78\xb7\x1d\x9f\x0d\x5f\x49\xad\x52\xe9\x94\x79\x72\x02\x2e\x57\x36\xad\xa4\x75\x4d\x7f\x60\x9f\x7f\x3c\x19\x15\x7f\x63\x13\x93\x42\x90\x41\x09\x56\x3a\x63\xc5\x72\xb0\xbd\x10\xcd\xe5\xf9\xd9\xfb\xc3\x51\x5c\xc3\x22\x76\xf8\x07\xc3\x71\xf5\xec\x5e\xe3\x30\x74\x63\x58\xa8\xec\x13\xd8\x95\x4a\x76\x95\xa3\x93\x7c\xc7\xc8\x1a\xc1\x6e\x2e\xb3\xac\x5d\x6e\xac\xba\xf7\x2b\x3d\xa7\xbb\x8c\xd2\x38\x1f\xdc\x63\x38\xcf\xe9\x67\x4e\x2d\x6f\x46\xa6\xee\xc1\x43\x16\xd0\x5e\x9e\xac\xd1\x7a\xe7\xc6\xf5\xf0\xe4\x59\x28\x1c\x95\xa7\xb1\x19\x9d\x20\x5d\x9d\xc6\x0b\x6e\xa1\xc7\x09\xb7\x9f\xb2\x6c\xc6\x6b\x0e\xc0\x3f\xc8\x89\xf6\x5e\xe1\xef\x19\xfe\x46\xfc\x33\x00\x00\xff\xff\x62\x71\xe5\x96\x22\x0b\x00\x00")

func baseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseHtml,
		"base.html",
	)
}

func baseHtml() (*asset, error) {
	bytes, err := baseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.html", size: 2850, mode: os.FileMode(420), modTime: time.Unix(1467104693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xdd\x6e\xd4\x3c\x10\xbd\xff\xa4\xef\x1d\xa6\xbe\xd9\x1b\x12\x2f\x05\x04\x82\x64\x51\xd5\x56\x68\x25\xa4\x56\xec\x4a\xa8\x57\x95\x37\x99\x4d\xac\x3a\x76\x1a\x4f\x5a\xf6\xed\x19\xe7\xa7\xdd\x74\x8b\x0a\x88\x8b\x28\xb6\xe7\xcc\x99\x33\xc7\x3f\xc9\xd1\xd9\xc5\xe9\xfa\xea\xf2\x1c\x4a\xaa\xcc\xe2\xff\xff\x92\xf0\x07\xa3\x6c\x91\x0a\xb4\xa2\x5b\x41\x95\xf3\x1f\x20\xa9\x90\x14\x03\xa9\x8e\xf0\xb6\xd5\x77\xa9\x38\x75\x96\xd0\x52\xb4\xde\xd5\x28\x20\xeb\x67\xa9\x20\xfc\x41\x32\x10\x7d\x82\xac\x54\x8d\x47\x4a\x5b\xda\x46\x1f\x04\xc8\x9e\x88\x34\x19\x5c\x2c\x69\xe6\xe1\xca\xb5\x70\x61\x8d\xb6\x98\xc8\x7e\xb9\x43\xf0\xc2\x0d\x34\x68\x52\xe1\x69\x67\xd0\x97\x88\x24\xa0\x6c\x70\x9b\x0a\xe5\x99\xd1\xcb\xcc\x7b\xd9\x05\x63\x1e\x09\xf9\x47\x79\x5b\x96\x1a\xa9\x7b\xf4\xae\xc2\xb8\xd2\xf6\x80\xa2\xcb\x98\x85\x5e\xfd\x47\xd9\xc1\x7d\x5c\x38\x57\x18\x54\xb5\xf6\x71\xe6\xaa\xc0\xf3\x79\xab\x2a\x6d\x76\xe9\x77\x34\x66\x6b\xb8\xd4\xdb\xf9\x7c\xd6\x95\x9f\x3d\x96\x9f\x01\xb1\x3d\xe9\xac\x73\x85\x93\x66\xc1\x54\x39\xb8\x9a\x6c\x5c\xbe\x1b\x5d\xc6\x06\x74\x9e\x8a\x7e\x28\x7a\x35\xb9\xbe\x83\xcc\xb0\xf4\x54\x0c\xfe\xf6\x81\x21\x14\xf0\xc6\x15\x4e\x2c\x12\x35\xb4\x19\x4b\xb1\x80\x25\x79\x76\x36\xee\x9d\x85\x44\xaa\x45\x22\x19\xdf\x73\x0e\xa3\x5e\x04\x36\x3c\xe4\xc9\x51\x14\xc1\xea\xeb\xf2\xec\x7c\x05\xab\xf5\xc9\xb7\x35\x44\x51\xc0\x8c\x45\xbc\xd1\x39\xbe\x7e\x59\x54\x79\xbc\x78\x37\x9f\x33\xf5\xf1\xde\xca\x85\xab\xfd\x2b\xa0\x52\x7b\xb8\x57\x1e\xac\x23\xf0\x6d\x5d\x3b\x8f\x39\x90\x83\x52\xd5\x35\xda\x87\x9c\x47\x7d\x0f\x8a\x27\x2a\xde\x4f\x1c\x78\x5e\xc7\x34\x78\xdb\x3a\x42\x7f\x1d\x30\x8a\xfd\x68\x1e\x51\x53\xdc\xa6\x25\x72\x36\xca\x98\x88\xf7\x22\x6c\xd8\x30\xde\x4f\x98\xa6\xe4\x2e\x9b\x06\x39\xac\x80\x54\x53\xf0\xa9\x17\xd7\x1b\xbe\x4a\x37\xe3\x01\x1c\x8f\x53\xa1\x8b\xb8\xd0\xb4\x71\xee\xc6\xc7\xda\x49\x4d\x7e\xe7\x5a\xd7\xed\x95\x1c\x1a\x91\x4c\xec\xa5\xb6\xd4\xb8\xbc\xcd\x48\x3b\x1b\x87\x1b\xf5\xb4\x16\xc0\x99\xcb\xda\x8a\x13\x54\xc0\x3c\x11\xc2\xdb\x3e\xd1\xfd\x60\xe8\x2f\x3a\x01\xfe\x8e\x7f\xbb\x1d\xbe\x09\xf9\x7e\xf1\x43\x6d\x27\x97\xcb\x7f\xae\xef\xcd\x5f\xd8\x4d\x65\xbb\xe9\xee\xec\xbe\xd3\x87\x72\x13\x5f\x2b\x3b\x96\xeb\xb3\xa2\xf0\x1a\x1c\x22\x01\x56\xae\x6d\x32\xe4\x37\x2f\x47\x70\x16\xbe\x74\xe8\x03\x42\x19\x18\x9f\xea\x7d\xa1\xeb\xe9\x7c\x7f\xf6\xdc\x15\x1e\xff\xe3\x3b\x22\x87\x87\xfc\x67\x00\x00\x00\xff\xff\xf3\x9e\x32\x25\xda\x05\x00\x00")

func errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorHtml,
		"error.html",
	)
}

func errorHtml() (*asset, error) {
	bytes, err := errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.html", size: 1498, mode: os.FileMode(420), modTime: time.Unix(1467104685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apidocumentationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\x3c\xff\x8a\x1b\xb7\xc1\x09\x10\x49\x4e\x90\x60\x9e\xf5\x32\x04\xc9\x3e\x04\x58\x91\xa2\x08\x50\x04\x6d\x51\xd0\xd2\x49\x62\x43\x91\xaa\x48\xc5\x71\x8b\xfe\xf7\x92\xa2\x5f\x24\xdb\x09\xda\xea\x83\x45\x1d\xef\x9e\x7b\xee\xf8\x1c\x1d\xfd\x7e\x7d\x7b\x75\x77\xff\xfa\x3f\x28\x75\xc5\x93\x51\x64\x5f\xc0\xa9\x28\x62\x82\x82\x24\x23\x80\xa8\x44\x9a\x25\xa3\xdf\xc0\x2c\x2b\xd4\xd4\x78\xea\xda\xc3\xcf\x2d\x7b\x8c\xc9\x95\x14\x1a\x85\xf6\xee\x96\x35\x12\x48\xdd\x57\x4c\x34\x3e\xe9\xc0\x42\x85\x90\x96\xb4\x51\xa8\xe3\x56\xe7\xde\x94\x40\x60\x21\xbb\x27\xd2\x4c\x73\x4c\x6e\xf4\x58\xc1\xbd\x6c\xe1\x56\x70\x26\x30\x0a\x9c\x79\xb4\x71\x33\xd6\x07\x68\x90\xc7\x44\xe9\x25\x47\x55\x22\x6a\x02\x65\x83\x79\x4c\xa8\x32\xd0\x2a\x48\x95\x0a\xba\x4d\xdf\xac\x48\x2f\xc5\x0f\xc6\xe6\x86\xb7\x47\x17\xa8\x64\x85\x7e\xc5\xc4\x10\xc6\xa1\x74\x41\x63\x5b\xbb\x9a\x05\x5d\x84\xf2\x0b\x29\x0b\x8e\xb4\x66\xca\x4f\x65\x65\xa1\xfe\xcd\x69\xc5\xf8\x32\x7e\x8b\x9c\xe7\xdc\x64\x9b\x9d\x4f\x26\xe3\x8e\xc2\x78\x4b\x61\x0c\xda\xf4\x2b\x1e\x77\x6d\x32\x51\xe3\x0d\x63\x88\x3a\xaf\x6d\xf9\xdd\xf3\x4e\x14\xef\x67\x29\x97\xf4\xe1\xc3\x89\xfd\xf0\xd6\x6b\x7f\xbd\x86\xaf\x83\x00\xfb\x64\x4c\xd5\x9c\x2e\x67\x20\xa4\xc0\x70\xb0\xfd\x6d\x08\xef\xe7\x2d\xe7\x2a\x6d\x10\x45\x26\xd3\xb6\x32\x47\x48\x35\x93\x62\x0f\x94\x63\xae\x67\x30\x09\x77\xcc\x0d\x2b\xca\x43\xf6\x2f\x1e\x13\x19\x3e\xed\xed\x54\xb4\x29\x98\xf0\xb4\xac\x67\x70\x3a\xa9\x9f\x76\xc9\x0d\xb8\x31\xad\x96\xb2\x95\x9d\x38\xac\x12\xb1\x39\x50\xeb\x82\x65\xba\xb4\x60\x93\xbf\x42\x98\xd3\xf4\xa1\x68\x64\x2b\xb2\x19\x34\xc5\x9c\x1e\x9d\x4f\x4f\xe0\xf4\xfc\xc2\xfc\x4c\xff\x3e\x81\x89\xff\xcf\xd9\x71\x08\x25\x3a\xd6\x53\x4b\x00\xc2\x0d\xd7\xb3\x70\x40\xef\xe2\x65\x7a\x7f\x34\xb4\xe2\x1f\x5f\xee\xda\xce\x51\xc0\x73\x78\x51\xb0\x7b\xf6\x3d\xe5\x11\xa3\xb2\x41\x1a\xe7\xac\x02\x63\xf7\xcc\xdc\x29\xc9\xd1\xe3\xb6\x24\x4f\x97\x58\xb9\x49\xd8\x97\x7e\xca\x8d\xec\xcd\x7c\x5a\x17\x3b\xdd\x51\xe0\xa6\x7b\x14\xcd\x65\xb6\x04\x23\x27\x5a\xd7\x31\xb1\x55\x5d\x39\xd0\xcb\xba\xde\x84\x59\xf3\x26\x99\x0d\x20\x60\x43\x33\xf6\xb8\xf6\xd8\x3f\x2d\x77\x87\xf4\x5c\x56\x97\x04\x71\x9a\xef\x76\x58\x16\x13\x2e\x0b\x49\x92\x88\xae\xca\x0d\x48\x02\x37\x5a\x99\x8b\xc1\x77\x17\x83\xa1\x4a\x93\x28\x30\xee\xbd\xc0\x15\xa4\x62\x85\xf0\x16\x0d\xad\xc9\x66\x66\x37\x38\x7b\x7d\xb3\x45\x04\x7d\x9e\xbe\xb5\x10\xc8\xe4\x42\x98\x51\xca\x92\xeb\xd5\x02\xde\x5c\xbe\xfa\x1f\x54\x8d\x29\xcb\x59\xda\x05\x5b\x0e\x2e\xfb\x9a\xc8\x6a\xb1\x7a\x0d\x9b\xf1\xcc\x58\xf5\x2a\xef\xcd\xfd\xa0\xb7\x36\xbd\x11\xba\x6a\xd2\x9f\xaa\x80\x29\x3a\x37\xd1\xdd\xe9\x7a\x6a\xc1\x74\x5a\x1a\x94\xb5\xd9\x65\xe0\xcc\xde\xd7\x05\x0a\x6c\xa8\x96\xdb\xdd\xee\xda\x35\x82\x51\xb2\x6d\x52\x54\x86\x0a\xe7\xb4\x56\x98\x99\xa6\x1f\xe0\x36\x68\xc3\xb6\x7a\x53\x2e\xab\xf5\x73\xc4\xdd\xee\x50\xb3\x8f\xb6\x3b\x8d\xff\x49\x99\xc3\x5f\x39\x24\xbf\x80\x73\x18\xc0\xb2\xfc\xd3\x17\xd2\x68\x39\xe7\x2c\xd5\x47\xc7\xe1\xa8\xe7\x14\x58\x0d\xdb\xb7\xfb\xf3\xfb\x1e\x00\x00\xff\xff\xb2\x34\x57\x71\x0d\x07\x00\x00")

func apidocumentationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_apidocumentationHtml,
		"apidocumentation.html",
	)
}

func apidocumentationHtml() (*asset, error) {
	bytes, err := apidocumentationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apidocumentation.html", size: 1805, mode: os.FileMode(420), modTime: time.Unix(1465910933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _smsconfirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\x9c\x3c\x10\xbe\xe7\x57\xf8\xf5\xab\x28\xad\x54\x30\x59\xf5\x50\x11\xa0\x87\xb4\x87\x9c\xd2\x43\xa4\x2a\x47\x2f\x0c\xc6\x8d\x3f\xa8\x6d\x76\x17\xad\xf6\xbf\xd7\x06\x27\x59\x36\xdd\xaa\xaa\x0f\x30\xcc\xd7\x33\xf3\x78\x86\xe2\xbf\x2f\xf7\xb7\x0f\x8f\xdf\xbe\xa2\xce\x49\x51\x5d\x14\xe1\x85\x04\x55\xac\xc4\xa0\x70\x50\x00\x6d\xaa\x0b\xe4\x4f\x21\xc1\x51\xef\xe7\xfa\x04\x7e\x0e\x7c\x53\xe2\x5b\xad\x1c\x28\x97\x3c\x8c\x3d\x60\x54\xcf\x5f\x25\x76\xb0\x73\x24\x24\xba\x41\x75\x47\x8d\x05\x57\x0e\xae\x4d\x3e\x61\x72\x9c\x48\x51\x09\x25\xde\x70\xd8\xf6\xda\xb8\xa3\xf0\x2d\x6f\x5c\x57\x36\xb0\xe1\x35\x24\xd3\xc7\x07\xc4\x15\x77\x9c\x8a\xc4\xd6\x54\x40\x79\x9d\x66\x38\xa6\x72\xdc\x09\xa8\xee\xdc\x95\x45\x8f\x7a\x40\xf7\x4a\x70\x05\x05\x99\xd5\xb3\x8b\xd7\x3c\x21\x03\xa2\xc4\xd6\x8d\x02\x6c\x07\xe0\xe1\x3a\x03\x6d\x89\xa9\xf5\xd5\x59\x52\x5b\x4b\x26\x63\xea\xa5\x97\x32\xff\x32\xb0\xf5\x85\x27\x74\x0b\x56\x4b\x48\x25\x57\x6f\x73\xcc\x21\x81\x39\x9b\x93\xc9\xdf\xa6\x4c\x6b\x26\x80\xf6\xdc\xa6\xb5\x96\x21\xd1\xe7\x96\x4a\x2e\xc6\xf2\x3b\x08\xd1\x0a\x8f\x95\x7f\xcc\x32\xfc\xb6\x00\xe7\xd9\x8e\x24\x07\xa4\x08\x34\x79\xcc\x72\x38\x3e\xa9\x6a\xb9\x91\xd4\x71\xad\x92\x9e\x32\x40\xfb\x17\x63\x38\x13\xb1\x39\xba\xce\xb2\xcb\x9b\x85\x61\x4d\xeb\x27\x66\xf4\xa0\x9a\x1c\x0d\x46\xbc\xbb\x8a\xad\x72\xc9\xc8\x9a\xa5\xbd\x62\x57\xef\x97\x11\xb5\x16\xda\xe4\xe8\xff\xb6\x6d\x97\x86\x0e\x38\xeb\xdc\x04\xb2\xe9\x96\x26\x49\x0d\xe3\x2a\x47\xd9\xab\xfa\x70\xf1\xa7\xea\x83\xca\x51\x7f\xb9\xe6\xa4\x91\x86\xdb\x5e\xd0\x31\x47\x9e\xb3\xdd\x12\xe4\xc7\x60\x1d\x6f\xc7\x24\x8e\x56\x8e\x6a\xff\x04\xb3\x74\xa2\x82\x33\x95\x70\x07\xd2\xfe\xde\xe1\x2c\x53\x47\xed\x5d\xfe\x43\x1b\xdd\xea\xa4\x93\x67\x1e\xb3\xe9\x9c\xe1\x0b\xad\xb2\x7e\x77\x8c\x16\x9e\x05\x89\xd7\x5f\x90\x79\x5f\x8b\xb5\x6e\xc6\xb8\xbd\x1e\x8a\x37\x7e\xfc\x26\xf1\x79\x5c\x1a\xbe\x41\xb5\xf0\x57\x5b\xe2\xc8\x0e\x7e\x1d\x9e\xc9\x1a\x62\x84\x66\x1a\x57\x05\x8d\x13\x4c\x70\x85\xee\x9c\xf5\x8b\x96\xce\x8b\xe6\x81\x69\x55\x10\xef\x1e\xd3\xce\xe2\x5c\x05\x18\x2f\x2d\x71\x96\x64\x9c\xa9\x65\x62\xe7\xb8\x1a\x4f\x54\x34\xcb\x26\x89\xd7\x9d\x5c\xe3\x6a\xbf\x47\x61\x0b\xd0\xe1\xe0\x01\x57\x27\x15\xc4\x57\xe4\x81\xcc\xbf\xb7\x5f\x01\x00\x00\xff\xff\x6b\xec\xe6\x0e\xef\x04\x00\x00")

func smsconfirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_smsconfirmationHtml,
		"smsconfirmation.html",
	)
}

func smsconfirmationHtml() (*asset, error) {
	bytes, err := smsconfirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "smsconfirmation.html", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1465211324, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailconfirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\x9c\x3c\x10\xbe\xe7\x57\xf8\xf5\xab\x28\xad\x54\x30\x59\xf5\x50\x11\xa0\x87\xb4\x87\x9c\xd2\x43\xa4\x2a\x47\x2f\x0c\xc6\x8d\x3f\xa8\x6d\x76\x17\xad\xf6\xbf\xd7\x06\x27\x59\x36\xdd\xaa\xaa\x0f\x30\xcc\xd7\x33\xf3\x78\x86\xe2\xbf\x2f\xf7\xb7\x0f\x8f\xdf\xbe\xa2\xce\x49\x51\x5d\x14\xe1\x85\x04\x55\xac\xc4\xa0\x70\x50\x00\x6d\xaa\x0b\xe4\x4f\x21\xc1\x51\xef\xe7\xfa\x04\x7e\x0e\x7c\x53\xe2\x5b\xad\x1c\x28\x97\x3c\x8c\x3d\x60\x54\xcf\x5f\x25\x76\xb0\x73\x24\x24\xba\x41\x75\x47\x8d\x05\x57\x0e\xae\x4d\x3e\x61\x72\x9c\x48\x51\x09\x25\xde\x70\xd8\xf6\xda\xb8\xa3\xf0\x2d\x6f\x5c\x57\x36\xb0\xe1\x35\x24\xd3\xc7\x07\xc4\x15\x77\x9c\x8a\xc4\xd6\x54\x40\x79\x9d\x66\x38\xa6\x72\xdc\x09\xa8\xee\xdc\x95\x45\x8f\x7a\x40\xf7\x4a\x70\x05\x05\x99\xd5\xb3\x8b\xd7\x3c\x21\x03\xa2\xc4\xd6\x8d\x02\x6c\x07\xe0\xe1\x3a\x03\x6d\x89\xa9\xf5\xd5\x59\x52\x5b\x4b\x26\x63\xea\xa5\x97\x32\xff\x32\xb0\xf5\x85\x27\x74\x0b\x56\x4b\x48\x25\x57\x6f\x73\xcc\x21\x81\x39\x9b\x93\xc9\xdf\xa6\x4c\x6b\x26\x80\xf6\xdc\xa6\xb5\x96\x21\xd1\xe7\x96\x4a\x2e\xc6\xf2\x3b\x08\xd1\x0a\x8f\x95\x7f\xcc\x32\xfc\xb6\x00\xe7\xd9\x8e\x24\x07\xa4\x08\x34\x79\xcc\x72\x38\x3e\xa9\x6a\xb9\x91\xd4\x71\xad\x92\x9e\x32\x40\xfb\x17\x63\x38\x13\xb1\x39\xba\xce\xb2\xcb\x9b\x85\x61\x4d\xeb\x27\x66\xf4\xa0\x9a\x1c\x0d\x46\xbc\xbb\x8a\xad\x72\xc9\xc8\x9a\xa5\xbd\x62\x57\xef\x97\x11\xb5\x16\xda\xe4\xe8\xff\xb6\x6d\x97\x86\x0e\x38\xeb\xdc\x04\xb2\xe9\x96\x26\x49\x0d\xe3\x2a\x47\xd9\xab\xfa\x70\xf1\xa7\xea\x83\xca\x51\x7f\xb9\xe6\xa4\x91\x86\xdb\x5e\xd0\x31\x47\x9e\xb3\xdd\x12\xe4\xc7\x60\x1d\x6f\xc7\x24\x8e\x56\x8e\x6a\xff\x04\xb3\x74\xa2\x82\x33\x95\x70\x07\xd2\xfe\xde\xe1\x2c\x53\x47\xed\x5d\xfe\x43\x1b\xdd\xea\xa4\x93\x67\x1e\xb3\xe9\x9c\xe1\x0b\xad\xb2\x7e\x77\x8c\x16\x9e\x05\x89\xd7\x5f\x90\x79\x5f\x8b\xb5\x6e\xc6\xb8\xbd\x1e\x8a\x37\x7e\xfc\x26\xf1\x79\x5c\x1a\xbe\x41\xb5\xf0\x57\x5b\xe2\xc8\x0e\x7e\x1d\x9e\xc9\x1a\x62\x84\x66\x1a\x57\x05\x8d\x13\x4c\x70\x85\xee\x9c\xf5\x8b\x96\xce\x8b\xe6\x81\x69\x55\x10\xef\x1e\xd3\xce\xe2\x5c\x05\x18\x2f\x2d\x71\x96\x64\x9c\xa9\x65\x62\xe7\xb8\x1a\x4f\x54\x34\xcb\x26\x89\xd7\x9d\x5c\xe3\x6a\xbf\x47\x61\x0b\xd0\xe1\xe0\x01\x57\x27\x15\xc4\x57\xe4\x81\xcc\xbf\xb7\x5f\x01\x00\x00\xff\xff\x6b\xec\xe6\x0e\xef\x04\x00\x00")

func emailconfirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_emailconfirmationHtml,
		"emailconfirmation.html",
	)
}

func emailconfirmationHtml() (*asset, error) {
	bytes, err := emailconfirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "emailconfirmation.html", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1465910933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
	"login.html": loginHtml,
	"base.html": baseHtml,
	"error.html": errorHtml,
	"apidocumentation.html": apidocumentationHtml,
	"smsconfirmation.html": smsconfirmationHtml,
	"emailconfirmation.html": emailconfirmationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"apidocumentation.html": &bintree{apidocumentationHtml, map[string]*bintree{}},
	"base.html": &bintree{baseHtml, map[string]*bintree{}},
	"emailconfirmation.html": &bintree{emailconfirmationHtml, map[string]*bintree{}},
	"error.html": &bintree{errorHtml, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
	"smsconfirmation.html": &bintree{smsconfirmationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

