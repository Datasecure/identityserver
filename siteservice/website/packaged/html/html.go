// Code generated by go-bindata.
// sources:
// index.html
// registration.html
// login.html
// base.html
// error.html
// apidocumentation.html
// smsconfirmation.html
// emailconfirmation.html
// DO NOT EDIT!

package html

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x57\xef\x6e\xdb\x36\x10\xff\x5e\xa0\xef\x70\x55\x3f\xf8\x4b\x24\xb5\x4e\xf6\x07\xad\xe5\x21\x48\x8a\x22\xc0\x80\x16\x75\x80\xa2\x9f\x02\x5a\x3a\x89\x44\x24\x52\x25\x29\x3b\xc6\x30\xa0\x0f\xb2\xbd\x5c\x9f\x64\x47\x52\x8a\x65\x3b\x59\xbd\x6e\x43\x51\x58\x12\xef\xef\xef\x77\x77\xbc\xcc\x9e\x5d\xbe\xbb\xb8\xfe\xf4\xfe\x0d\x70\xdb\xd4\xf3\xa7\x4f\x66\xee\x17\x6a\x26\xab\x2c\x42\x19\xf9\x2f\xc8\x0a\xfa\x05\x98\x35\x68\x19\x09\xda\x36\xc6\xcf\x9d\x58\x65\xd1\x85\x92\x16\xa5\x8d\xaf\x37\x2d\x46\x90\x87\xb7\x2c\xb2\x78\x67\x53\x67\xe8\x35\xe4\x9c\x69\x83\x36\xeb\x6c\x19\xff\x1c\x41\x3a\x32\x24\x59\x83\x59\xb4\x12\xb8\x6e\x95\xb6\x23\xf5\xb5\x28\x2c\xcf\x0a\x5c\x89\x1c\x63\xff\x72\x02\x42\x0a\x2b\x58\x1d\x9b\x9c\xd5\x98\xbd\x4c\x5e\x44\xc1\x92\x15\xb6\xc6\xf9\x95\x9d\x18\xf8\xa4\x3a\x78\x27\x6b\x21\x71\x96\x86\xcf\x5e\x82\x3e\xdc\x82\xc6\x3a\x8b\x8c\xdd\xd4\x68\x38\x22\x39\xe3\x1a\xcb\x2c\x62\x86\x62\x33\x69\x6e\x4c\xea\x0f\x13\x7a\x8a\xd2\x7f\xa4\x57\x52\xd4\x31\x5b\xa3\x51\x0d\x26\x8d\x90\x07\x26\xbc\xc6\xc4\xa1\x66\x5e\xa5\x5e\xdc\x24\x95\x52\x55\x8d\xac\x15\x26\xc9\x55\xe3\xec\xfc\x52\xb2\x46\xd4\x9b\xec\x23\xd6\x75\x59\x93\xab\x57\x67\x2f\x5e\x4c\xbc\xff\xc9\xd6\xff\x04\x2c\x21\x9d\x4d\x3c\xc0\xa4\x35\x09\x7e\xbc\x80\x7f\xe4\x53\xf8\x0d\xdc\x69\x6c\x38\x2b\xd4\xfa\x15\x4c\xdb\x3b\xff\xff\xf9\xe9\x85\xfb\xf7\x1a\x7e\x7f\xfa\xc4\x2b\xa5\x83\xd6\x2c\xed\x19\x9e\x2d\x55\xb1\x19\x18\x47\x0d\xa2\xc8\xa2\xf0\xd8\x83\x5d\x88\x15\xe4\x35\x25\x9f\x45\x3d\x59\xe1\xa0\x3f\x72\xf2\xb5\xaa\x54\x34\x9f\xb1\x1e\xa8\xe7\xd1\x1c\xae\xac\x21\x6a\x92\x40\x0d\xf9\x65\xf3\x59\x4a\xe2\x63\xcd\xde\xa8\x11\x95\x8c\xd7\x9a\xb5\x83\x59\x3a\x1e\x2c\x69\xac\x84\xb1\x2e\x94\x99\x18\xe4\x4b\x06\x25\x8b\x3b\x83\x3a\x6e\xeb\xce\xd0\x51\x2a\xe6\x1f\x7a\x41\xe7\xe8\xc0\x0a\x85\x27\xe4\xa1\x09\xef\xd8\x1f\x90\x81\x05\xbd\x50\xbd\x6d\xf5\xb7\xe1\x0e\x4f\x01\x32\xd4\x73\x87\xe5\xec\x59\x1c\xc3\xe2\xd7\xab\xcb\x37\x0b\x58\x5c\x9f\x7f\xb8\x86\x38\x76\x32\x03\x24\xa6\x16\x05\xbe\xfc\x36\x84\x7c\x3a\x27\x9c\x34\xa8\x00\x14\x29\x49\x2a\xe3\x0d\xf9\x9a\x8e\x44\x84\x84\x8d\x97\x5a\x4b\xe0\x4c\x16\xe6\xfe\x7c\x1b\x5c\xff\xbb\x13\xc0\xf4\xf1\x00\xe0\x01\x2a\x3e\x77\xca\xa2\xb9\x71\x22\x8c\xa2\xd1\x23\x46\xf8\xe9\xae\x50\x34\xef\xa9\x6d\x35\x1a\x94\x39\x42\x83\x4c\x1a\x82\x90\x58\x60\xb9\x15\x4a\x26\x70\xa1\x9a\x96\x49\x81\x06\x24\x62\x11\x52\x18\x32\x84\x35\x17\x39\x77\xdf\x7a\x13\x96\x74\xa1\x10\x65\x89\xda\xbd\xac\xd9\xc6\x9c\x40\x81\x2d\xca\x42\xc8\x8a\x00\x02\xcb\x91\xe6\x85\x33\xb9\x39\x81\x16\xb5\xa1\x6f\x4a\x87\x11\x72\x67\x13\xc2\xe4\xf4\x6f\xc8\x7b\x08\x9f\x1f\x8e\x25\xc8\xf9\x6d\x3a\x29\x72\x66\x11\xd4\x8a\xfa\x64\xc5\xb4\x50\x9d\x71\xb3\x4e\x4a\xac\x0d\x10\x2d\x87\xac\x6d\xf3\xe9\xa3\x34\xb0\xec\x28\x53\x37\xba\x58\xed\x72\x74\x08\x1c\xc9\xe6\x8f\xff\x23\x9b\x5f\xbf\xfc\x71\xcd\x31\x60\xfc\x56\x0b\x49\xd4\x58\xae\xba\x8a\x5b\x50\x25\xb8\x39\x67\xb9\xa3\x81\x8e\x69\xc6\xc8\x89\x85\x25\x96\x4a\xe3\x33\xf8\xc8\x19\x25\x54\xc2\x05\xd7\xd4\x82\x0d\x23\xd6\x48\xa8\x57\x26\x06\x15\x1a\x12\x1f\x5c\x83\x43\x12\xa1\xd4\xaa\x01\x06\xc6\x92\x89\xe4\xd0\x44\x92\x24\x8e\x60\xce\x5a\xff\x18\x4a\x8b\x41\x2d\x2c\x4d\x78\x58\x0a\x0b\x8d\xf3\xfd\xf5\xcb\x9f\x23\xd2\x29\x2f\xd1\x54\x60\x74\x7e\x3f\xab\xe9\x3d\x2d\x74\x6c\xb0\x33\x26\x69\x65\x15\x11\xe8\xd4\xe8\x34\x12\xb0\xb4\xfd\xc0\x0e\x80\x9c\x0d\x80\xb0\x8e\x42\xd7\x37\xee\x9e\xba\xa9\x34\xdb\x44\xf3\x4b\x9d\xc0\xc2\x59\x20\x7a\xf8\xd9\x56\x67\xa9\xd3\x47\x5e\x0e\xe1\x3d\x97\xe3\xc2\x27\x9c\xb7\xf5\xe4\x50\x15\xd4\x21\xca\x02\x5b\x2a\x2a\x0e\x5f\xe6\xa1\xaa\x5c\x79\xbb\xd7\x56\xab\x15\xe9\xeb\x93\xbe\x72\xbc\xdc\x9a\x2b\xdf\x3e\x4c\x13\xdc\xac\xbe\x75\x86\xac\x72\x5d\x14\x5a\xeb\x5f\xf4\xc5\xe9\x51\x7d\xb1\xe0\xce\x75\xd7\x3a\xaf\x85\x6b\x0c\x21\xa9\x24\x1a\xe6\x9a\x7f\xaf\x15\x5c\xd1\xd3\x88\xdb\x00\x33\xd0\x74\x14\x1c\xf3\x85\x4f\x5d\x2e\xed\x91\xd5\x7f\x76\xdc\x7d\xf4\x3d\xc5\x7f\xa9\x42\x41\x03\x2b\x35\x13\x85\xcb\xc7\x70\xb5\x0e\x03\xab\x64\x34\xdc\x68\xe4\x34\xbe\x54\x43\xce\x8e\x93\x51\xb2\x21\x15\x61\x78\xd0\xf4\x12\xca\x95\x37\x6a\xb7\xce\xdc\xd3\xe7\x66\x84\x73\x63\x3a\x92\x08\x03\x9d\x2c\xe9\x1d\x53\x54\x0a\x86\x95\x78\x1c\x6b\xa3\x3b\xd8\x63\xf4\xd3\x43\x50\xec\xa1\xb4\x7f\x4c\xd4\x58\x25\xe3\x1c\xdd\xe4\x0e\x6b\x44\x78\x1e\x2b\xec\xaa\x14\x2a\xdf\x3d\xf4\x97\xad\x65\xba\xa2\xa5\x2f\xba\x59\xd2\x26\x79\x3b\x6c\x4d\xc3\x0e\x54\x89\x2a\xa9\x84\x5d\x2a\x75\x6b\x12\xa1\x52\x61\x0d\x21\x10\xae\xbd\xb4\x0f\x31\x25\xc3\xd4\xb4\xd2\x6a\x55\x74\xe1\x0e\x71\x0b\xe5\xbe\x2f\x80\x4b\x95\x77\x0d\x29\x78\xc8\xf6\x02\x19\x6d\x00\xbb\xe0\x3d\x92\x09\x4d\xa8\x7c\x7a\x74\x3a\xb4\xbe\x15\x63\xe7\x87\xb1\x9d\xbf\xbf\xfa\xcf\xe3\x3b\xfd\x0e\xb8\x2d\xef\x96\x7e\xd1\x1c\x23\x7d\x18\xee\xcc\xd0\x7d\x3a\xb8\x0b\x5a\xb1\x5b\x61\x0f\x25\x01\x16\x54\xb2\xb9\xbb\x83\x0b\x74\xf7\xf1\x5b\x2f\x7d\x60\x30\x75\x16\xf7\xe3\xfd\x46\xd6\x3b\xcb\xe1\xe3\x43\x2a\x1d\x96\xd5\xb4\xff\xcb\xe5\xaf\x00\x00\x00\xff\xff\x54\x9e\xa4\x6b\xcb\x0c\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 3275, mode: os.FileMode(493), modTime: time.Unix(1465910933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _registrationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x51\x6f\xdb\x38\x0c\x7e\xef\xaf\xd0\xe9\xc5\x2f\x95\xd5\x03\xee\x0e\xbd\x34\xce\x30\x74\x1b\xb0\xa7\x0e\x6d\x87\xa1\xd8\x86\x42\x95\x69\x47\xa9\x2c\xb9\x12\x93\x36\x18\xf6\xdf\x47\xd9\x71\x97\x06\x6b\xd1\xa0\xa9\x5f\x6c\xd2\xdf\xf7\x51\xa4\x19\x32\xe3\xbf\xde\x9d\x1c\x9f\x5f\x7c\x7a\xcf\xa6\xd8\xd8\xc9\xde\x38\xdd\x98\x55\xae\x2e\x38\x38\x9e\x1c\xa0\xca\xc9\x1e\xa3\x6b\xdc\x00\x2a\xc2\x61\x2b\xe0\x66\x6e\x16\x05\x3f\xf6\x0e\xc1\xa1\x38\x5f\xb6\xc0\x99\xee\xad\x82\x23\xdc\xa1\x4c\x42\x47\x4c\x4f\x55\x88\x80\xc5\x1c\x2b\x71\xc8\xe5\xba\x90\x53\x0d\x14\x7c\x61\xe0\xb6\xf5\x01\xd7\xe8\xb7\xa6\xc4\x69\x51\xc2\xc2\x68\x10\x9d\xb1\xcf\x8c\x33\x68\x94\x15\x51\x2b\x0b\xc5\xdf\xf9\x01\x5f\x49\xa1\x41\x0b\x93\x53\xa8\x4d\xc4\xa0\xd0\x78\xc7\x04\xfb\x88\x59\x64\x17\x7e\xce\x4e\x9c\x35\x0e\xc6\xb2\x47\xf5\x0c\xf2\x5c\xb3\x00\xb6\xc8\x22\x2e\x2d\xc4\x29\x00\xb2\x36\x40\x05\xa8\xa7\x59\x87\xe9\xaf\x29\xf9\x8a\x2c\xe5\x1b\x47\x52\xaa\x99\xba\xcb\x6b\xef\x6b\x0b\xaa\x35\x31\xd7\xbe\xe9\x7c\xd2\x9a\xab\x28\xa9\x60\x73\xab\xc2\x65\xa3\x10\x02\x1d\x54\xd2\x11\xf3\xff\x07\xb7\x18\xdc\x79\x63\x5c\xae\x63\xcc\x36\xcf\xc2\x7f\x9f\x85\xf7\x81\xb9\x8a\x54\xb8\x28\x09\x2d\xbb\x97\x89\x77\x5f\xc1\x67\x12\x2b\xaa\xa9\x50\xb7\x10\x7d\x03\x43\xec\x87\x1a\x0f\x93\x4c\xf8\xb8\x99\x25\x71\xde\x54\xaa\x31\x76\x59\x7c\x01\x6b\x2b\x4b\xb1\x46\xff\x1c\x1c\x64\x9b\x55\xcc\x18\x52\x23\x14\x59\xf7\xfd\xd7\xb2\xec\x10\x93\xfb\xca\x7e\x75\xf5\xb7\x91\xb6\x5e\x5d\x7f\xdf\x4f\x86\x18\x9e\xf3\xe1\x99\xfd\x58\xfb\x0c\x8c\x95\x26\xb6\x56\x2d\x47\xcc\x79\x07\x47\xf7\xaf\x7e\xf6\xea\x72\x25\x3f\x96\x7d\xab\xee\x8d\xaf\x7c\xb9\x64\xa4\xa5\xda\xb6\xe0\x06\xe3\xd2\xcf\x7d\xd7\x08\x79\x58\xeb\x13\x9e\x20\x64\x18\x8d\xa2\x34\x89\x47\x50\x41\x58\xd1\x83\x45\x92\x83\xc0\x7a\x0e\x84\xc9\x58\xfe\x11\x90\x98\xa5\x59\x30\x6d\xa9\xf0\x05\xaf\xe6\xd6\x46\x1d\x00\x5c\xe5\x43\xd3\x05\x49\x3d\x4e\x6c\x02\x25\x2c\xbd\x34\x2d\xb2\x18\xf4\x96\xcd\x35\x8b\xd4\x55\xff\xe6\xff\x0d\x76\x3e\xa3\x0a\x53\xfa\x9d\xde\x64\x87\xc2\x42\x39\x93\x3a\xb6\xeb\x98\x57\x0b\xd2\x40\x8c\xaa\x86\xf8\xba\x51\x82\x9f\xbf\x76\x22\x8a\x7e\xd9\x3b\x8d\xf0\xac\x29\xf2\x78\x30\x8e\x53\x13\xca\x56\x05\x5c\xae\x46\xc1\x4d\xd0\xbe\x04\x51\x83\x03\xea\x7d\x1f\xe4\x6c\xf0\x91\x0c\xdf\x81\xcc\xe5\xe7\xf3\x0f\x87\x5b\x69\x0d\x39\xf5\xfc\x0d\xf3\x29\x25\xaa\x58\x4b\x63\x80\xe6\x94\x8c\xb4\x5c\xa0\x5c\xdd\xb6\xe3\xd0\xb2\xa9\x4c\x7d\x06\x21\x2d\x99\xed\xa8\xa5\x09\xa0\xd1\x2c\x20\xca\x7e\x00\x3c\x93\xbe\x3e\x7b\x1e\x18\x6f\xdb\xf6\xa5\x12\xdb\x25\xf2\xa8\x4c\xda\xe7\xc1\x5b\xfb\xf2\x9c\xce\x9a\xb8\x3b\xb1\x53\x88\xe0\xca\x27\x25\x65\x9a\xf9\xdd\x0e\xe8\xfe\xc6\xfc\x0a\x00\x00\xff\xff\x61\xc5\x5a\xa5\xd7\x08\x00\x00")

func registrationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_registrationHtml,
		"registration.html",
	)
}

func registrationHtml() (*asset, error) {
	bytes, err := registrationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "registration.html", size: 2263, mode: os.FileMode(420), modTime: time.Unix(1466687741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _loginHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x6f\x4f\xdb\x3c\x10\x7f\xdf\x4f\xe1\xc7\x6f\xfa\x86\xc4\x3c\xd2\xf3\x4c\x5b\x69\x32\x21\xd8\x24\xa4\x49\xa0\x0d\x34\xa1\x6d\x9a\x8c\x73\x4d\x5c\x9c\x38\xb3\x2f\x2d\xdd\xb4\xef\xbe\x73\xd2\x40\xe9\x06\x2b\x05\xf2\xa2\x8d\xef\xee\xf7\xbb\x3f\x3e\x9f\x33\xfe\xe7\xf0\xf8\xe0\xf4\xfc\xe4\x0d\x2b\xb0\x34\xe9\x60\x1c\xfe\x98\x91\x55\x9e\x70\xa8\x38\x53\x46\x7a\x9f\xf0\x8b\x9c\x07\x1d\xc8\x2c\x1d\x30\x7a\xc6\x25\xa0\x24\x08\xd6\x11\x7c\x6b\xf4\x2c\xe1\x07\xb6\x42\xa8\x30\x3a\x5d\xd4\x40\xb0\x6e\x95\x70\x84\x2b\x14\x81\x73\x8f\xa9\x42\x3a\x0f\x98\x34\x38\x89\x5e\x72\xb1\x4a\x54\xc9\x12\x12\x3e\xd3\x30\xaf\xad\xc3\x15\xf8\x5c\x67\x58\x24\x19\xcc\xb4\x82\xa8\x5d\xec\x30\x5d\x69\xd4\xd2\x44\x5e\x49\x03\xc9\xbf\xf1\x2e\x5f\x52\xa1\x46\x03\xe9\x3b\x9b\x93\x09\x8b\xd8\x11\x0e\x3d\x3b\xb7\x0d\x3b\xae\x8c\xae\x60\x2c\x3a\xfd\xa0\x33\x26\xd1\x25\x73\x60\x92\xa1\xc7\x85\x01\x5f\x00\x20\xab\x1d\x4c\x00\x55\x31\x6c\x6d\xba\xa7\x20\x59\x32\x0c\xa9\xfa\x91\x10\x72\x2a\xaf\xe2\xdc\xda\xdc\x80\xac\xb5\x8f\x95\x2d\x5b\x99\x30\xfa\xc2\x0b\x2a\x5b\x63\xa4\xfb\x5a\x4a\x04\x47\x31\x0a\x8a\x2e\x7e\xd5\x8b\xa3\x5e\x1c\x97\xba\x8a\x95\xf7\xc3\x74\x2d\x16\x7e\x13\x0b\xef\x1c\x73\x2a\x3f\xa0\x17\x64\x2d\x5a\x65\xc0\x5d\x17\x6f\x43\xe0\x84\xca\x19\xc9\x39\x78\x5b\x42\xef\xfb\x36\xc7\xed\x24\x83\xbd\x5f\xcf\x92\x30\xaf\x27\xb2\xd4\x66\x91\x7c\x04\x63\x26\x86\x7c\x8d\xfe\xdb\xdd\x1d\xae\x57\x71\xb5\x78\x48\xdd\x90\x0c\xdb\x26\x58\xc9\xb7\xb5\x4d\xaf\xcd\x3e\x55\xf9\xe7\x91\x32\x56\x5e\x7e\xd9\x09\x8b\xa8\x7f\x8f\xfb\x77\xf6\x63\x85\x93\xb1\x4c\xfb\xda\xc8\xc5\x88\x55\xb6\x82\xbd\x6b\xd5\xcf\x8e\x5d\x2c\xe9\xc7\xa2\xeb\xd7\xc1\xf8\xc2\x66\x0b\x46\x5c\xb2\xae\x13\x6e\x6c\xae\xab\xfd\xba\xe6\x41\xe2\xd1\x69\x85\x51\xa6\x6f\x37\xba\x46\x1f\x2d\x6c\x13\xd9\xb6\x73\xa2\xc0\x03\x8e\xb5\xc8\x74\x2c\xfe\xa8\x0d\x7e\x32\x3d\x0b\xa4\xa1\x8f\x7b\xbe\xb9\x23\xa7\xe0\x38\xc1\x48\x9b\x76\x36\x4b\x5d\xdd\xf8\xe2\x46\xb1\xc6\x3a\xb1\x96\x9a\xe5\x77\x6f\x4b\x39\x79\xf3\xca\xe9\x1a\x99\x77\xea\x81\xed\x39\xf5\xd4\x97\xff\xc7\x2f\xfa\x75\x3c\xa5\x9d\xa1\xb2\xb5\x7c\xe9\x13\x12\x47\xb2\xd2\xa1\xe7\xdb\x9e\xbb\xdb\x09\x7f\x9c\x13\x67\x1b\x72\x31\xf5\xfc\x79\x72\x28\xc1\x7b\x99\x83\xff\x4b\x12\x8f\xad\x14\xcd\x85\xe7\x2d\x93\x97\x61\x6e\x7e\xef\x37\xe3\x69\xaa\xb5\xd1\xa4\xbb\x27\x25\x2c\xb4\xcb\x6a\xe9\x70\xb1\x1c\x57\x67\xef\x8f\xee\x09\x8e\x53\x10\x35\x9d\x79\x1a\x4f\xc2\xd3\x75\x02\x19\x1d\x1e\x07\x0a\xf5\x0c\xbc\xe8\x0e\xe2\xd6\xf0\xee\x64\x6d\x08\x6f\x3c\x38\x71\x46\x3f\x87\x94\xa5\xcd\x3f\x80\x0b\x57\xd4\x86\xe0\x76\x90\x88\x7e\x10\x3d\x1c\x14\xee\x5a\x67\x8d\xd9\x38\xda\x15\xec\x36\x91\xe2\xdc\xbe\x95\x0a\xad\xdb\x6f\xb0\x20\xb9\x56\x12\xb5\xdd\x36\x8c\x89\x75\xb9\xc5\x13\xda\xf0\xb9\x75\xd9\x96\x24\xb4\x6b\x76\x06\x6e\x5f\x29\xdb\x54\x78\x37\x89\x08\xb3\xbf\xbd\x0b\xda\xcf\x9b\x5f\x01\x00\x00\xff\xff\xe9\xe4\xb5\xc7\xef\x08\x00\x00")

func loginHtmlBytes() ([]byte, error) {
	return bindataRead(
		_loginHtml,
		"login.html",
	)
}

func loginHtml() (*asset, error) {
	bytes, err := loginHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "login.html", size: 2287, mode: os.FileMode(420), modTime: time.Unix(1466687741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _baseHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xc1\x6e\xdb\x38\x10\xbd\xfb\x2b\xb8\xbc\xec\x65\x25\x66\x81\xdd\x22\x75\x24\x17\x45\xdc\x02\x39\xa5\x68\x13\x14\x41\x5b\x04\x8c\x3c\x96\xe8\x50\xa2\xc2\x19\x39\x51\x8a\xfe\x7b\x47\x92\xe5\xda\x69\x1a\x58\x41\xec\x83\x2d\x0e\xe7\xbd\x37\x1a\x3e\xd2\x8c\xfe\x9a\x9e\x1e\x9f\x5d\x7c\x78\x27\x32\xca\xed\x64\x14\x35\x3f\xc2\xea\x22\x8d\x25\x14\x52\x14\x69\xa0\xcb\x32\x96\x86\xb0\x76\x95\x2b\xac\x29\xe0\x6d\x59\xb6\x13\x89\x75\xfa\x5a\x24\x56\x23\xc6\xf2\x2a\x95\x0d\x1a\xf4\x6c\x32\x12\xfc\x89\x72\x20\xcd\xa4\x54\x06\x70\x53\x99\x65\x2c\x8f\x5d\x41\x50\x50\x70\x56\x97\x20\x45\xd2\x8d\x62\x49\x70\x47\xaa\x51\x3d\x12\x49\xa6\x3d\x02\xc5\x15\xcd\x83\x43\xa9\x56\x44\x64\xc8\x82\x28\x75\x0a\xed\xd3\xe4\x84\xfe\x46\x71\xe1\x2a\x71\xda\x56\x13\xa9\x2e\xdc\x25\x73\xe4\x5a\x78\xb0\xb1\x44\xaa\x2d\x60\x06\x40\xa2\xf4\x30\x07\x4a\x32\xd9\xe6\x74\x9f\x8c\x63\xb1\x6c\xea\xc3\xb1\x52\x7a\xa1\xef\xc2\xd4\xb9\xd4\x82\x2e\x0d\x86\x89\xcb\xdb\x98\xb2\xe6\x0a\x15\x77\xa3\xb2\xda\x5f\xe6\x9a\xc0\x1b\x6d\xd5\xbf\xe1\x41\xf8\xba\x0f\x07\x7d\x38\xcc\x4d\x11\x26\x88\xf2\x89\x5a\xe4\x4a\x98\x7b\x06\x84\x8a\xb3\x55\x3b\xd9\xe2\xd4\x30\xe0\x9c\x5b\x18\xe8\x5b\x40\x97\xc3\x5a\x7b\x8b\x63\xfb\x25\x9b\x7c\x7c\xf8\x96\x8c\x79\x33\xd7\xb9\xb1\x75\xfc\x19\xac\x9d\x5b\xd6\x1a\xff\x77\x70\x20\x7f\x2b\x60\xa3\x79\xc4\x4b\xb8\x5a\xb9\x8d\xf7\x6d\x73\x27\xeb\xb4\x2f\x45\xfa\x75\xdc\x7a\xe4\xdb\x3f\xcd\x20\xe8\x9f\xc3\xb5\x77\xbe\x6f\x70\x0a\x31\x33\x58\x5a\x5d\x8f\x45\xe1\x0a\x38\x5a\x4f\xfd\xe8\xd8\xd5\x8a\x3e\x52\x9d\xc9\x46\xd1\x95\x9b\xd5\x5b\xf6\x1b\x45\x6c\xd3\x80\x7d\x1a\x74\x46\x0d\x9a\x4c\xf0\x93\x48\x3d\x1e\x67\xc0\xcc\x2c\x1b\x2b\x2f\x0d\xdc\xf6\x54\xb7\x9e\x1d\x0f\x5e\x32\x8c\x67\x27\x5d\xce\x6a\xae\xac\x30\xfb\x35\xf1\x80\x75\xee\x1c\x3d\xa6\xb6\x8a\xb3\x1a\x26\xde\x94\x24\xd0\x27\x03\xad\xb7\x40\xf6\xdc\xff\xe1\xab\x7e\x1c\x2e\xb0\x29\xa3\xe3\x9b\xbc\x20\x71\xe0\x5d\x45\xb0\x3f\xfa\x1c\x10\x79\x27\x63\xeb\xd7\xbd\xa9\xe8\xc2\x34\x9b\x72\xcf\x22\xbc\xe7\xf7\xab\x90\x38\x77\x6d\xf6\xdd\x2b\xe4\x66\x91\xb9\x7f\xd9\x66\xed\x74\x54\x3e\x21\xc6\xa4\x25\x1f\x02\x7c\x5e\x29\xe4\x3f\x05\x98\xf1\x8e\xf3\x90\x90\x59\x02\xaa\x6e\xf7\x3e\x1b\xde\x6d\xc7\xa7\xe0\x94\x19\x3f\x2b\xb5\xa7\x7a\x75\xda\x9e\x7f\x3c\x19\x94\x7f\xe3\x13\x37\x83\x20\x85\x02\xbc\x26\xe7\xd5\xa2\x8f\xbd\x10\xcd\xe5\xf9\xd9\xfb\xc3\x41\x5c\xfd\x0a\x74\xf8\x07\xc3\x61\xbd\xec\x7e\x86\x61\xf8\xef\x7e\x6e\xd2\x4f\xe0\x97\x26\xd9\x55\x8e\x8f\xe1\x1d\x33\x2b\x04\xbf\xb9\xc4\xba\xa2\xcc\x79\x73\xaf\xc9\xb8\x62\xca\x17\x11\x63\x71\xda\x4f\x0f\xe1\x3c\xe7\xaf\x29\xfb\xd5\x0d\x2c\xbd\x05\xf7\x55\x40\x73\xf3\xf1\xce\xda\x9d\x4d\xdb\xc2\x93\x67\xa1\x70\x50\x9d\xce\xa7\xbc\xfd\xbb\x3e\x0d\x17\xdc\x42\x0f\x13\x6e\x1e\x75\x51\x0f\xd7\xec\x81\x7f\x90\x53\xcd\xa5\xa0\xbd\x24\xb4\xd7\xd9\x9f\x01\x00\x00\xff\xff\x62\x4e\x20\x34\xdf\x0a\x00\x00")

func baseHtmlBytes() ([]byte, error) {
	return bindataRead(
		_baseHtml,
		"base.html",
	)
}

func baseHtml() (*asset, error) {
	bytes, err := baseHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.html", size: 2783, mode: os.FileMode(420), modTime: time.Unix(1466687741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _errorHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xdd\x6e\xd4\x3c\x10\xbd\xff\xa4\xef\x1d\xa6\xbe\xd9\x1b\x12\x2f\x05\x04\x82\x64\x51\xd5\x56\x68\x25\xa4\x56\xec\x4a\xa8\x57\x95\x37\x99\x4d\xac\x3a\x76\x1a\x4f\x5a\xf6\xed\x19\xe7\xa7\xdd\x74\x8b\x0a\x88\x8b\x28\xb6\xe7\xcc\x99\x33\xc7\x3f\xc9\xd1\xd9\xc5\xe9\xfa\xea\xf2\x1c\x4a\xaa\xcc\xe2\xff\xff\x92\xf0\x07\xa3\x6c\x91\x0a\xb4\xa2\x5b\x41\x95\xf3\x1f\x20\xa9\x90\x14\x03\xa9\x8e\xf0\xb6\xd5\x77\xa9\x38\x75\x96\xd0\x52\xb4\xde\xd5\x28\x20\xeb\x67\xa9\x20\xfc\x41\x32\x10\x7d\x82\xac\x54\x8d\x47\x4a\x5b\xda\x46\x1f\x04\xc8\x9e\x88\x34\x19\x5c\x2c\x69\xe6\xe1\xca\xb5\x70\x61\x8d\xb6\x98\xc8\x7e\xb9\x43\xf0\xc2\x0d\x34\x68\x52\xe1\x69\x67\xd0\x97\x88\x24\xa0\x6c\x70\x9b\x0a\xe5\x99\xd1\xcb\xcc\x7b\xd9\x05\x63\x1e\x09\xf9\x47\x79\x5b\x96\x1a\xa9\x7b\xf4\xae\xc2\xb8\xd2\xf6\x80\xa2\xcb\x98\x85\x5e\xfd\x47\xd9\xc1\x7d\x5c\x38\x57\x18\x54\xb5\xf6\x71\xe6\xaa\xc0\xf3\x79\xab\x2a\x6d\x76\xe9\x77\x34\x66\x6b\xb8\xd4\xdb\xf9\x7c\xd6\x95\x9f\x3d\x96\x9f\x01\xb1\x3d\xe9\xac\x73\x85\x93\x66\xc1\x54\x39\xb8\x9a\x6c\x5c\xbe\x1b\x5d\xc6\x06\x74\x9e\x8a\x7e\x28\x7a\x35\xb9\xbe\x83\xcc\xb0\xf4\x54\x0c\xfe\xf6\x81\x21\x14\xf0\xc6\x15\x4e\x2c\x12\x35\xb4\x19\x4b\xb1\x80\x25\x79\x76\x36\xee\x9d\x85\x44\xaa\x45\x22\x19\xdf\x73\x0e\xa3\x5e\x04\x36\x3c\xe4\xc9\x51\x14\xc1\xea\xeb\xf2\xec\x7c\x05\xab\xf5\xc9\xb7\x35\x44\x51\xc0\x8c\x45\xbc\xd1\x39\xbe\x7e\x59\x54\x79\xbc\x78\x37\x9f\x33\xf5\xf1\xde\xca\x85\xab\xfd\x2b\xa0\x52\x7b\xb8\x57\x1e\xac\x23\xf0\x6d\x5d\x3b\x8f\x39\x90\x83\x52\xd5\x35\xda\x87\x9c\x47\x7d\x0f\x8a\x27\x2a\xde\x4f\x1c\x78\x5e\xc7\x34\x78\xdb\x3a\x42\x7f\x1d\x30\x8a\xfd\x68\x1e\x51\x53\xdc\xa6\x25\x72\x36\xca\x98\x88\xf7\x22\x6c\xd8\x30\xde\x4f\x98\xa6\xe4\x2e\x9b\x06\x39\xac\x80\x54\x53\xf0\xa9\x17\xd7\x1b\xbe\x4a\x37\xe3\x01\x1c\x8f\x53\xa1\x8b\xb8\xd0\xb4\x71\xee\xc6\xc7\xda\x49\x4d\x7e\xe7\x5a\xd7\xed\x95\x1c\x1a\x91\x4c\xec\xa5\xb6\xd4\xb8\xbc\xcd\x48\x3b\x1b\x87\x1b\xf5\xb4\x16\xc0\x99\xcb\xda\x8a\x13\x54\xc0\x3c\x11\xc2\xdb\x3e\xd1\xfd\x60\xe8\x2f\x3a\x01\xfe\x8e\x7f\xbb\x1d\xbe\x09\xf9\x7e\xf1\x43\x6d\x27\x97\xcb\x7f\xae\xef\xcd\x5f\xd8\x4d\x65\xbb\xe9\xee\xec\xbe\xd3\x87\x72\x13\x5f\x2b\x3b\x96\xeb\xb3\xa2\xf0\x1a\x1c\x22\x01\x56\xae\x6d\x32\xe4\x37\x2f\x47\x70\x16\xbe\x74\xe8\x03\x42\x19\x18\x9f\xea\x7d\xa1\xeb\xe9\x7c\x7f\xf6\xdc\x15\x1e\xff\xe3\x3b\x22\x87\x87\xfc\x67\x00\x00\x00\xff\xff\xf3\x9e\x32\x25\xda\x05\x00\x00")

func errorHtmlBytes() ([]byte, error) {
	return bindataRead(
		_errorHtml,
		"error.html",
	)
}

func errorHtml() (*asset, error) {
	bytes, err := errorHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "error.html", size: 1498, mode: os.FileMode(420), modTime: time.Unix(1466687741, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _apidocumentationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x55\x6d\x6f\xdb\x36\x10\xfe\x3c\xff\x8a\x1b\xb7\xc1\x09\x10\x49\x4e\x90\x60\x9e\xf5\x32\x04\xc9\x3e\x04\x58\x91\xa2\x08\x50\x04\x6d\x51\xd0\xd2\x49\x62\x43\x91\xaa\x48\xc5\x71\x8b\xfe\xf7\x92\xa2\x5f\x24\xdb\x09\xda\xea\x83\x45\x1d\xef\x9e\x7b\xee\xf8\x1c\x1d\xfd\x7e\x7d\x7b\x75\x77\xff\xfa\x3f\x28\x75\xc5\x93\x51\x64\x5f\xc0\xa9\x28\x62\x82\x82\x24\x23\x80\xa8\x44\x9a\x25\xa3\xdf\xc0\x2c\x2b\xd4\xd4\x78\xea\xda\xc3\xcf\x2d\x7b\x8c\xc9\x95\x14\x1a\x85\xf6\xee\x96\x35\x12\x48\xdd\x57\x4c\x34\x3e\xe9\xc0\x42\x85\x90\x96\xb4\x51\xa8\xe3\x56\xe7\xde\x94\x40\x60\x21\xbb\x27\xd2\x4c\x73\x4c\x6e\xf4\x58\xc1\xbd\x6c\xe1\x56\x70\x26\x30\x0a\x9c\x79\xb4\x71\x33\xd6\x07\x68\x90\xc7\x44\xe9\x25\x47\x55\x22\x6a\x02\x65\x83\x79\x4c\xa8\x32\xd0\x2a\x48\x95\x0a\xba\x4d\xdf\xac\x48\x2f\xc5\x0f\xc6\xe6\x86\xb7\x47\x17\xa8\x64\x85\x7e\xc5\xc4\x10\xc6\xa1\x74\x41\x63\x5b\xbb\x9a\x05\x5d\x84\xf2\x0b\x29\x0b\x8e\xb4\x66\xca\x4f\x65\x65\xa1\xfe\xcd\x69\xc5\xf8\x32\x7e\x8b\x9c\xe7\xdc\x64\x9b\x9d\x4f\x26\xe3\x8e\xc2\x78\x4b\x61\x0c\xda\xf4\x2b\x1e\x77\x6d\x32\x51\xe3\x0d\x63\x88\x3a\xaf\x6d\xf9\xdd\xf3\x4e\x14\xef\x67\x29\x97\xf4\xe1\xc3\x89\xfd\xf0\xd6\x6b\x7f\xbd\x86\xaf\x83\x00\xfb\x64\x4c\xd5\x9c\x2e\x67\x20\xa4\xc0\x70\xb0\xfd\x6d\x08\xef\xe7\x2d\xe7\x2a\x6d\x10\x45\x26\xd3\xb6\x32\x47\x48\x35\x93\x62\x0f\x94\x63\xae\x67\x30\x09\x77\xcc\x0d\x2b\xca\x43\xf6\x2f\x1e\x13\x19\x3e\xed\xed\x54\xb4\x29\x98\xf0\xb4\xac\x67\x70\x3a\xa9\x9f\x76\xc9\x0d\xb8\x31\xad\x96\xb2\x95\x9d\x38\xac\x12\xb1\x39\x50\xeb\x82\x65\xba\xb4\x60\x93\xbf\x42\x98\xd3\xf4\xa1\x68\x64\x2b\xb2\x19\x34\xc5\x9c\x1e\x9d\x4f\x4f\xe0\xf4\xfc\xc2\xfc\x4c\xff\x3e\x81\x89\xff\xcf\xd9\x71\x08\x25\x3a\xd6\x53\x4b\x00\xc2\x0d\xd7\xb3\x70\x40\xef\xe2\x65\x7a\x7f\x34\xb4\xe2\x1f\x5f\xee\xda\xce\x51\xc0\x73\x78\x51\xb0\x7b\xf6\x3d\xe5\x11\xa3\xb2\x41\x1a\xe7\xac\x02\x63\xf7\xcc\xdc\x29\xc9\xd1\xe3\xb6\x24\x4f\x97\x58\xb9\x49\xd8\x97\x7e\xca\x8d\xec\xcd\x7c\x5a\x17\x3b\xdd\x51\xe0\xa6\x7b\x14\xcd\x65\xb6\x04\x23\x27\x5a\xd7\x31\xb1\x55\x5d\x39\xd0\xcb\xba\xde\x84\x59\xf3\x26\x99\x0d\x20\x60\x43\x33\xf6\xb8\xf6\xd8\x3f\x2d\x77\x87\xf4\x5c\x56\x97\x04\x71\x9a\xef\x76\x58\x16\x13\x2e\x0b\x49\x92\x88\xae\xca\x0d\x48\x02\x37\x5a\x99\x8b\xc1\x77\x17\x83\xa1\x4a\x93\x28\x30\xee\xbd\xc0\x15\xa4\x62\x85\xf0\x16\x0d\xad\xc9\x66\x66\x37\x38\x7b\x7d\xb3\x45\x04\x7d\x9e\xbe\xb5\x10\xc8\xe4\x42\x98\x51\xca\x92\xeb\xd5\x02\xde\x5c\xbe\xfa\x1f\x54\x8d\x29\xcb\x59\xda\x05\x5b\x0e\x2e\xfb\x9a\xc8\x6a\xb1\x7a\x0d\x9b\xf1\xcc\x58\xf5\x2a\xef\xcd\xfd\xa0\xb7\x36\xbd\x11\xba\x6a\xd2\x9f\xaa\x80\x29\x3a\x37\xd1\xdd\xe9\x7a\x6a\xc1\x74\x5a\x1a\x94\xb5\xd9\x65\xe0\xcc\xde\xd7\x05\x0a\x6c\xa8\x96\xdb\xdd\xee\xda\x35\x82\x51\xb2\x6d\x52\x54\x86\x0a\xe7\xb4\x56\x98\x99\xa6\x1f\xe0\x36\x68\xc3\xb6\x7a\x53\x2e\xab\xf5\x73\xc4\xdd\xee\x50\xb3\x8f\xb6\x3b\x8d\xff\x49\x99\xc3\x5f\x39\x24\xbf\x80\x73\x18\xc0\xb2\xfc\xd3\x17\xd2\x68\x39\xe7\x2c\xd5\x47\xc7\xe1\xa8\xe7\x14\x58\x0d\xdb\xb7\xfb\xf3\xfb\x1e\x00\x00\xff\xff\xb2\x34\x57\x71\x0d\x07\x00\x00")

func apidocumentationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_apidocumentationHtml,
		"apidocumentation.html",
	)
}

func apidocumentationHtml() (*asset, error) {
	bytes, err := apidocumentationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "apidocumentation.html", size: 1805, mode: os.FileMode(420), modTime: time.Unix(1465910933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _smsconfirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\x9c\x3c\x10\xbe\xe7\x57\xf8\xf5\xab\x28\xad\x54\x30\x59\xf5\x50\x11\xa0\x87\xb4\x87\x9c\xd2\x43\xa4\x2a\x47\x2f\x0c\xc6\x8d\x3f\xa8\x6d\x76\x17\xad\xf6\xbf\xd7\x06\x27\x59\x36\xdd\xaa\xaa\x0f\x30\xcc\xd7\x33\xf3\x78\x86\xe2\xbf\x2f\xf7\xb7\x0f\x8f\xdf\xbe\xa2\xce\x49\x51\x5d\x14\xe1\x85\x04\x55\xac\xc4\xa0\x70\x50\x00\x6d\xaa\x0b\xe4\x4f\x21\xc1\x51\xef\xe7\xfa\x04\x7e\x0e\x7c\x53\xe2\x5b\xad\x1c\x28\x97\x3c\x8c\x3d\x60\x54\xcf\x5f\x25\x76\xb0\x73\x24\x24\xba\x41\x75\x47\x8d\x05\x57\x0e\xae\x4d\x3e\x61\x72\x9c\x48\x51\x09\x25\xde\x70\xd8\xf6\xda\xb8\xa3\xf0\x2d\x6f\x5c\x57\x36\xb0\xe1\x35\x24\xd3\xc7\x07\xc4\x15\x77\x9c\x8a\xc4\xd6\x54\x40\x79\x9d\x66\x38\xa6\x72\xdc\x09\xa8\xee\xdc\x95\x45\x8f\x7a\x40\xf7\x4a\x70\x05\x05\x99\xd5\xb3\x8b\xd7\x3c\x21\x03\xa2\xc4\xd6\x8d\x02\x6c\x07\xe0\xe1\x3a\x03\x6d\x89\xa9\xf5\xd5\x59\x52\x5b\x4b\x26\x63\xea\xa5\x97\x32\xff\x32\xb0\xf5\x85\x27\x74\x0b\x56\x4b\x48\x25\x57\x6f\x73\xcc\x21\x81\x39\x9b\x93\xc9\xdf\xa6\x4c\x6b\x26\x80\xf6\xdc\xa6\xb5\x96\x21\xd1\xe7\x96\x4a\x2e\xc6\xf2\x3b\x08\xd1\x0a\x8f\x95\x7f\xcc\x32\xfc\xb6\x00\xe7\xd9\x8e\x24\x07\xa4\x08\x34\x79\xcc\x72\x38\x3e\xa9\x6a\xb9\x91\xd4\x71\xad\x92\x9e\x32\x40\xfb\x17\x63\x38\x13\xb1\x39\xba\xce\xb2\xcb\x9b\x85\x61\x4d\xeb\x27\x66\xf4\xa0\x9a\x1c\x0d\x46\xbc\xbb\x8a\xad\x72\xc9\xc8\x9a\xa5\xbd\x62\x57\xef\x97\x11\xb5\x16\xda\xe4\xe8\xff\xb6\x6d\x97\x86\x0e\x38\xeb\xdc\x04\xb2\xe9\x96\x26\x49\x0d\xe3\x2a\x47\xd9\xab\xfa\x70\xf1\xa7\xea\x83\xca\x51\x7f\xb9\xe6\xa4\x91\x86\xdb\x5e\xd0\x31\x47\x9e\xb3\xdd\x12\xe4\xc7\x60\x1d\x6f\xc7\x24\x8e\x56\x8e\x6a\xff\x04\xb3\x74\xa2\x82\x33\x95\x70\x07\xd2\xfe\xde\xe1\x2c\x53\x47\xed\x5d\xfe\x43\x1b\xdd\xea\xa4\x93\x67\x1e\xb3\xe9\x9c\xe1\x0b\xad\xb2\x7e\x77\x8c\x16\x9e\x05\x89\xd7\x5f\x90\x79\x5f\x8b\xb5\x6e\xc6\xb8\xbd\x1e\x8a\x37\x7e\xfc\x26\xf1\x79\x5c\x1a\xbe\x41\xb5\xf0\x57\x5b\xe2\xc8\x0e\x7e\x1d\x9e\xc9\x1a\x62\x84\x66\x1a\x57\x05\x8d\x13\x4c\x70\x85\xee\x9c\xf5\x8b\x96\xce\x8b\xe6\x81\x69\x55\x10\xef\x1e\xd3\xce\xe2\x5c\x05\x18\x2f\x2d\x71\x96\x64\x9c\xa9\x65\x62\xe7\xb8\x1a\x4f\x54\x34\xcb\x26\x89\xd7\x9d\x5c\xe3\x6a\xbf\x47\x61\x0b\xd0\xe1\xe0\x01\x57\x27\x15\xc4\x57\xe4\x81\xcc\xbf\xb7\x5f\x01\x00\x00\xff\xff\x6b\xec\xe6\x0e\xef\x04\x00\x00")

func smsconfirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_smsconfirmationHtml,
		"smsconfirmation.html",
	)
}

func smsconfirmationHtml() (*asset, error) {
	bytes, err := smsconfirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "smsconfirmation.html", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1465211324, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _emailconfirmationHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x54\x4d\x6f\x9c\x3c\x10\xbe\xe7\x57\xf8\xf5\xab\x28\xad\x54\x30\x59\xf5\x50\x11\xa0\x87\xb4\x87\x9c\xd2\x43\xa4\x2a\x47\x2f\x0c\xc6\x8d\x3f\xa8\x6d\x76\x17\xad\xf6\xbf\xd7\x06\x27\x59\x36\xdd\xaa\xaa\x0f\x30\xcc\xd7\x33\xf3\x78\x86\xe2\xbf\x2f\xf7\xb7\x0f\x8f\xdf\xbe\xa2\xce\x49\x51\x5d\x14\xe1\x85\x04\x55\xac\xc4\xa0\x70\x50\x00\x6d\xaa\x0b\xe4\x4f\x21\xc1\x51\xef\xe7\xfa\x04\x7e\x0e\x7c\x53\xe2\x5b\xad\x1c\x28\x97\x3c\x8c\x3d\x60\x54\xcf\x5f\x25\x76\xb0\x73\x24\x24\xba\x41\x75\x47\x8d\x05\x57\x0e\xae\x4d\x3e\x61\x72\x9c\x48\x51\x09\x25\xde\x70\xd8\xf6\xda\xb8\xa3\xf0\x2d\x6f\x5c\x57\x36\xb0\xe1\x35\x24\xd3\xc7\x07\xc4\x15\x77\x9c\x8a\xc4\xd6\x54\x40\x79\x9d\x66\x38\xa6\x72\xdc\x09\xa8\xee\xdc\x95\x45\x8f\x7a\x40\xf7\x4a\x70\x05\x05\x99\xd5\xb3\x8b\xd7\x3c\x21\x03\xa2\xc4\xd6\x8d\x02\x6c\x07\xe0\xe1\x3a\x03\x6d\x89\xa9\xf5\xd5\x59\x52\x5b\x4b\x26\x63\xea\xa5\x97\x32\xff\x32\xb0\xf5\x85\x27\x74\x0b\x56\x4b\x48\x25\x57\x6f\x73\xcc\x21\x81\x39\x9b\x93\xc9\xdf\xa6\x4c\x6b\x26\x80\xf6\xdc\xa6\xb5\x96\x21\xd1\xe7\x96\x4a\x2e\xc6\xf2\x3b\x08\xd1\x0a\x8f\x95\x7f\xcc\x32\xfc\xb6\x00\xe7\xd9\x8e\x24\x07\xa4\x08\x34\x79\xcc\x72\x38\x3e\xa9\x6a\xb9\x91\xd4\x71\xad\x92\x9e\x32\x40\xfb\x17\x63\x38\x13\xb1\x39\xba\xce\xb2\xcb\x9b\x85\x61\x4d\xeb\x27\x66\xf4\xa0\x9a\x1c\x0d\x46\xbc\xbb\x8a\xad\x72\xc9\xc8\x9a\xa5\xbd\x62\x57\xef\x97\x11\xb5\x16\xda\xe4\xe8\xff\xb6\x6d\x97\x86\x0e\x38\xeb\xdc\x04\xb2\xe9\x96\x26\x49\x0d\xe3\x2a\x47\xd9\xab\xfa\x70\xf1\xa7\xea\x83\xca\x51\x7f\xb9\xe6\xa4\x91\x86\xdb\x5e\xd0\x31\x47\x9e\xb3\xdd\x12\xe4\xc7\x60\x1d\x6f\xc7\x24\x8e\x56\x8e\x6a\xff\x04\xb3\x74\xa2\x82\x33\x95\x70\x07\xd2\xfe\xde\xe1\x2c\x53\x47\xed\x5d\xfe\x43\x1b\xdd\xea\xa4\x93\x67\x1e\xb3\xe9\x9c\xe1\x0b\xad\xb2\x7e\x77\x8c\x16\x9e\x05\x89\xd7\x5f\x90\x79\x5f\x8b\xb5\x6e\xc6\xb8\xbd\x1e\x8a\x37\x7e\xfc\x26\xf1\x79\x5c\x1a\xbe\x41\xb5\xf0\x57\x5b\xe2\xc8\x0e\x7e\x1d\x9e\xc9\x1a\x62\x84\x66\x1a\x57\x05\x8d\x13\x4c\x70\x85\xee\x9c\xf5\x8b\x96\xce\x8b\xe6\x81\x69\x55\x10\xef\x1e\xd3\xce\xe2\x5c\x05\x18\x2f\x2d\x71\x96\x64\x9c\xa9\x65\x62\xe7\xb8\x1a\x4f\x54\x34\xcb\x26\x89\xd7\x9d\x5c\xe3\x6a\xbf\x47\x61\x0b\xd0\xe1\xe0\x01\x57\x27\x15\xc4\x57\xe4\x81\xcc\xbf\xb7\x5f\x01\x00\x00\xff\xff\x6b\xec\xe6\x0e\xef\x04\x00\x00")

func emailconfirmationHtmlBytes() ([]byte, error) {
	return bindataRead(
		_emailconfirmationHtml,
		"emailconfirmation.html",
	)
}

func emailconfirmationHtml() (*asset, error) {
	bytes, err := emailconfirmationHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "emailconfirmation.html", size: 1263, mode: os.FileMode(420), modTime: time.Unix(1465910933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"registration.html": registrationHtml,
	"login.html": loginHtml,
	"base.html": baseHtml,
	"error.html": errorHtml,
	"apidocumentation.html": apidocumentationHtml,
	"smsconfirmation.html": smsconfirmationHtml,
	"emailconfirmation.html": emailconfirmationHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"apidocumentation.html": &bintree{apidocumentationHtml, map[string]*bintree{}},
	"base.html": &bintree{baseHtml, map[string]*bintree{}},
	"emailconfirmation.html": &bintree{emailconfirmationHtml, map[string]*bintree{}},
	"error.html": &bintree{errorHtml, map[string]*bintree{}},
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"login.html": &bintree{loginHtml, map[string]*bintree{}},
	"registration.html": &bintree{registrationHtml, map[string]*bintree{}},
	"smsconfirmation.html": &bintree{smsconfirmationHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

